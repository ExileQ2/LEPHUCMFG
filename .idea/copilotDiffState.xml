<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-feature&#10;        android:name=&quot;android.hardware.camera&quot;&#10;        android:required=&quot;false&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.AppCompat.Light.DarkActionBar&quot;&#10;        tools:targetApi=&quot;31&quot;&#10;        android:usesCleartextTraffic=&quot;true&quot;&gt;  &lt;!-- Important for HTTP testing if API is not HTTPS --&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.AppCompat.Light.DarkActionBar&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;        &lt;activity&#10;            android:name=&quot;.AbListActivity&quot;&#10;            android:exported=&quot;false&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.ABTestingActivity&quot;&#10;            android:exported=&quot;false&quot;/&gt;&#10;&#10;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-feature&#10;        android:name=&quot;android.hardware.camera&quot;&#10;        android:required=&quot;false&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.AppCompat.Light.DarkActionBar&quot;&#10;        tools:targetApi=&quot;31&quot;&#10;        android:usesCleartextTraffic=&quot;true&quot;&gt;  &lt;!-- Important for HTTP testing if API is not HTTPS --&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.AppCompat.Light.DarkActionBar&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;        &lt;activity&#10;            android:name=&quot;.AbListActivity&quot;&#10;            android:exported=&quot;false&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.ABTestingActivity&quot;&#10;            android:exported=&quot;false&quot;/&gt;&#10;        &lt;activity android:name=&quot;.MachineLogActivity&quot; /&gt;&#10;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/assets/changelog.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/assets/changelog.txt" />
              <option name="updatedContent" value="CHANGELOG:&#10;&#10;//Write changelog content here - you can edit this text easily&#10;//Format: Date - Change description&#10;//Example entries:&#10;&#10;2025-01-07:&#10;- Added loading states with yellow 'Đang xử lý...' indicator for all fields&#10;- Staff and Machine info now show dark red color when valid (with optional bold)&#10;- Moved auto-click logic to non-running machine phase for better workflow&#10;- Auto-fill functionality when machine is running:&#10;  * Chi tiết công việc filled with machine model (disabled editing)&#10;  * Lệnh sản xuất filled with ProOrdNo2 (disabled editing)  &#10;  * Số series filled with Serial2 (editable)&#10;  * Ghi chú filled with Note (editable)&#10;- ProcessNo duplicate submission prevention (4-hour cache system)&#10;- Enhanced API data retrieval (Note, Serial2, ProOrdNo2)&#10;- Serial textview now activates when &quot;Lệnh sản xuất&quot; loses focus in running machine mode&#10;- Button boxes hidden during running machine phase since editing is disabled&#10;&#10;//Add new changelog entries above this line&#10;//Keep format: YYYY-MM-DD: Description&#10;//This file can be easily edited to update changelog content" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/lephucmfg/MachineLogActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/lephucmfg/MachineLogActivity.kt" />
              <option name="originalContent" value="package com.example.lephucmfg&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.View&#10;import android.view.inputmethod.EditorInfo&#10;import android.view.inputmethod.InputMethodManager&#10;import android.widget.Button&#10;import android.widget.CheckBox&#10;import android.widget.EditText&#10;import android.widget.LinearLayout&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.lifecycle.lifecycleScope&#10;import com.example.lephucmfg.network.RetrofitClient&#10;import com.example.lephucmfg.utils.LoadingStates&#10;import com.google.gson.annotations.SerializedName&#10;import kotlinx.coroutines.launch&#10;import okhttp3.ResponseBody&#10;import com.google.gson.Gson&#10;import com.google.gson.JsonElement&#10;import com.google.gson.JsonParser&#10;import retrofit2.Call&#10;import retrofit2.Callback&#10;import retrofit2.Response&#10;import retrofit2.http.GET&#10;import retrofit2.http.Path&#10;import retrofit2.http.POST&#10;import retrofit2.http.Body&#10;&#10;class MachineLogActivity : AppCompatActivity() {&#10;    // --- API interface for fetching staff info (&quot;Thợ&quot;) ---&#10;    interface StaffApi {&#10;        @GET(&quot;/api/GetStaff/{staffNo}&quot;)&#10;        suspend fun getStaff(@Path(&quot;staffNo&quot;) staffNo: Int): StaffInfo?&#10;    }&#10;    // --- Data class for staff info ---&#10;    data class StaffInfo(&#10;        @SerializedName(&quot;fullName&quot;) val fullName: String?,&#10;        @SerializedName(&quot;workJob&quot;) val workJob: String?,&#10;        @SerializedName(&quot;workPlace&quot;) val workPlace: String?&#10;    )&#10;    // --- API interface for fetching machine info (&quot;Mã máy&quot;) ---&#10;    interface MachineApi {&#10;        @GET(&quot;/api/GetMachine/{mcName}&quot;)&#10;        suspend fun getMachine(@Path(&quot;mcName&quot;) mcName: String): MachineInfo?&#10;    }&#10;    // --- Data class for machine info ---&#10;    data class MachineInfo(&#10;        @SerializedName(&quot;model&quot;) val model: String?,&#10;        @SerializedName(&quot;status&quot;) val status: String?&#10;    )&#10;    // --- API interface for fetching production order (LSX/ProOrdNo) ---&#10;    interface ProOrdApi {&#10;        @GET(&quot;/api/Laylsx/{JobControlNo}&quot;)&#10;        suspend fun getProOrd(@Path(&quot;JobControlNo&quot;) jobControlNo: String): ResponseBody&#10;    }&#10;    // --- Data class for production order DTO ---&#10;    data class ProOrdDto(&#10;        @SerializedName(&quot;jobControlNo&quot;) val jobControlNo: String?&#10;    )&#10;    // --- API interface for fetching serial info (GetSerial) ---&#10;    interface SerialApi {&#10;        @GET(&quot;/api/GetSerial/{proOrdNo}&quot;)&#10;        suspend fun getSerial(@Path(&quot;proOrdNo&quot;) proOrdNo: String): List&lt;SerialDto&gt;&#10;    }&#10;    // --- Data class for serial info ---&#10;    data class SerialDto(&#10;        @SerializedName(&quot;serial&quot;) val serial: String?&#10;    )&#10;    // --- API interface for fetching process number (ProcessNo) ---&#10;    interface ProcessNoApi {&#10;        @GET(&quot;/api/GetProcessNoChuaKetThuc/{StaffNo}/{McName}&quot;)&#10;        suspend fun getProcessNo(@Path(&quot;StaffNo&quot;) staffNo: String, @Path(&quot;McName&quot;) mcName: String): ProcessNoDto&#10;    }&#10;    data class ProcessNoDto(&#10;        @SerializedName(&quot;processNo&quot;) val processNo: String?,&#10;        @SerializedName(&quot;note&quot;) val note: String?,&#10;        @SerializedName(&quot;serial2&quot;) val serial2: String?,&#10;        @SerializedName(&quot;proOrdNo2&quot;) val proOrdNo2: String?&#10;    )&#10;    // --- API interface for posting machine log ---&#10;    interface PostNhatKyGiaCongApi {&#10;        @POST(&quot;/api/postNhatKyGiaCong&quot;)&#10;        suspend fun postLog(@Body body: NhatKyGiaCongDto): retrofit2.Response&lt;Void&gt;&#10;    }&#10;    data class NhatKyGiaCongDto(&#10;        val processNo: String?,&#10;        val jobControlNo: String?,&#10;        val staffNo: String?,&#10;        val mcName: String?,&#10;        val note: String?,&#10;        val proOrdNo: String?,&#10;        val serial: String?,&#10;        val setup: Boolean,&#10;        val rework: Boolean,&#10;        val qtyGood: Int,&#10;        val qtyReject: Int,&#10;        val qtyRework: Int&#10;    )&#10;&#10;    // Cache for tracking submitted processNo with timestamps&#10;    private val submittedProcessCache = mutableMapOf&lt;String, Long&gt;()&#10;    private val CACHE_DURATION_HOURS = 4&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_machine_log)&#10;&#10;        // --- UI references for &quot;Thợ&quot; (Staff) block ---&#10;        val edtStaffNo = findViewById&lt;EditText&gt;(R.id.edtStaffNo)&#10;        val txtStaffInfo = findViewById&lt;TextView&gt;(R.id.txtStaffInfo)&#10;        val api = RetrofitClient.retrofitPublic.create(StaffApi::class.java)&#10;&#10;        // --- UI references for &quot;Mã máy&quot; (Machine) block ---&#10;        val edtMcName = findViewById&lt;EditText&gt;(R.id.edtMcName)&#10;        val txtMachineInfo = findViewById&lt;TextView&gt;(R.id.txtMachineInfo)&#10;        val txtProcessNo = findViewById&lt;TextView&gt;(R.id.txtProcessNo)&#10;        val txtMachineRunning = findViewById&lt;TextView&gt;(R.id.txtMachineRunning)&#10;&#10;        // --- UI reference for serial info below LSX (ProOrdNo) ---&#10;        val edtProOrdNo = findViewById&lt;EditText&gt;(R.id.edtProOrdNo)&#10;        val txtSerialInfo = findViewById&lt;TextView&gt;(R.id.txtSerialInfo)&#10;        val txtJobInfo = findViewById&lt;TextView&gt;(R.id.txtJobInfo)&#10;        val txtSerialStatus = findViewById&lt;TextView&gt;(R.id.txtSerialStatus)&#10;        val txtNoteStatus = findViewById&lt;TextView&gt;(R.id.txtNoteStatus)&#10;        val machineApi = RetrofitClient.retrofitPublic.create(MachineApi::class.java)&#10;        val serialApi = RetrofitClient.retrofitPublic.create(SerialApi::class.java)&#10;        val proOrdApi = RetrofitClient.retrofitPublic.create(ProOrdApi::class.java)&#10;        var processNoValue: String? = null&#10;&#10;        // --- Declare layoutSmallEdits reference ---&#10;        val layoutSmallEdits = findViewById&lt;LinearLayout&gt;(R.id.layoutSmallEdits)&#10;&#10;        // --- UI references for LSX (ProOrdNo) and result grid block ---&#10;        val edtJobNo = findViewById&lt;EditText&gt;(R.id.edtJobNo)&#10;        val layoutProOrdNoResults = findViewById&lt;android.widget.GridLayout&gt;(R.id.layoutProOrdNoResults)&#10;&#10;        val edtSerial = findViewById&lt;EditText&gt;(R.id.edtSerial)&#10;        val btnScan = findViewById&lt;Button&gt;(R.id.btnScan)&#10;&#10;        // --- UI references for small quantity EditTexts ---&#10;        val edtDat = findViewById&lt;EditText&gt;(R.id.edtDat)&#10;        val edtPhe = findViewById&lt;EditText&gt;(R.id.edtPhe)&#10;        val edtXuLy = findViewById&lt;EditText&gt;(R.id.edtXuLy)&#10;&#10;        // --- UI references for note field and status ---&#10;        val edtGhiChu = findViewById&lt;EditText&gt;(R.id.edtGhiChu)&#10;        val txtSendStatus = findViewById&lt;TextView&gt;(R.id.txtSendStatus)&#10;        val btnSubmit = findViewById&lt;Button&gt;(R.id.btnSubmit)&#10;&#10;        // --- Setup IME action listeners for all EditTexts ---&#10;        edtStaffNo.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtMcName.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtMcName.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtJobNo.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtJobNo.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtProOrdNo.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtProOrdNo.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtSerial.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtSerial.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                if (layoutSmallEdits.visibility == View.VISIBLE) {&#10;                    edtDat.requestFocus()&#10;                } else {&#10;                    edtGhiChu.requestFocus()&#10;                }&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtDat.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtPhe.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtPhe.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtXuLy.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtXuLy.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtGhiChu.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtGhiChu.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_DONE) {&#10;                edtGhiChu.clearFocus()&#10;                val imm = getSystemService(INPUT_METHOD_SERVICE) as? InputMethodManager&#10;                imm?.hideSoftInputFromWindow(edtGhiChu.windowToken, 0)&#10;                true&#10;            } else false&#10;        }&#10;&#10;        // --- Block for handling Staff (&quot;Thợ&quot;) input and validation ---&#10;        edtStaffNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val staffNoStr = edtStaffNo.text.toString().trim()&#10;                if (staffNoStr.isNotEmpty()) {&#10;                    try {&#10;                        val staffNo = staffNoStr.toInt()&#10;                        // Show loading indicator using LoadingStates&#10;                        txtStaffInfo.text = LoadingStates.LOADING&#10;                        txtStaffInfo.setTextColor(LoadingStates.getLoadingColor(resources))&#10;&#10;                        // Fetch staff info asynchronously&#10;                        lifecycleScope.launch {&#10;                            try {&#10;                                val info = api.getStaff(staffNo)&#10;                                if (info != null) {&#10;                                    // Display staff info if found - dark red color for valid and bold&#10;                                    txtStaffInfo.text = listOfNotNull(info.fullName, info.workJob, info.workPlace).joinToString(&quot;, &quot;)&#10;                                    txtStaffInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                                    //txtStaffInfo.setTypeface(null, android.graphics.Typeface.BOLD)  // Uncomment to make bold&#10;                                } else {&#10;                                    // Show error if staff not found&#10;                                    txtStaffInfo.text = &quot;Không hợp lệ&quot;&#10;                                    txtStaffInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                                }&#10;                            } catch (e: Exception) {&#10;                                // Show server connection error if API call fails&#10;                                txtStaffInfo.text = &quot;Không kết nối được đến server&quot;&#10;                                txtStaffInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                            }&#10;                        }&#10;                    } catch (e: NumberFormatException) {&#10;                        // Show error if input is not a number&#10;                        txtStaffInfo.text = &quot;Không hợp lệ&quot;&#10;                        txtStaffInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                    }&#10;                } else {&#10;                    // Clear staff info if input is empty&#10;                    txtStaffInfo.text = &quot;&quot;&#10;                }&#10;            }&#10;        }&#10;&#10;        // --- Block for handling Machine Code (&quot;Mã máy&quot;) input and validation ---&#10;        edtMcName.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val mcName = edtMcName.text.toString().trim()&#10;                if (mcName.isNotEmpty()) {&#10;                    // Show loading indicator using LoadingStates&#10;                    txtMachineInfo.text = LoadingStates.LOADING&#10;                    txtMachineInfo.setTextColor(LoadingStates.getLoadingColor(resources))&#10;&#10;                    // Launch coroutine to fetch machine info asynchronously&#10;                    lifecycleScope.launch {&#10;                        var machineModel: String? = null&#10;                        try {&#10;                            val info = machineApi.getMachine(mcName)&#10;                            if (info != null) {&#10;                                // Display machine model and status if found - dark red color for valid and bold&#10;                                txtMachineInfo.text = listOfNotNull(info.model, info.status).joinToString(&quot;, &quot;)&#10;                                txtMachineInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                                //txtMachineInfo.setTypeface(null, android.graphics.Typeface.BOLD)  // Uncomment to make bold&#10;                                machineModel = info.model&#10;                            } else {&#10;                                // Show error if machine not found&#10;                                txtMachineInfo.text = &quot;Không hợp lệ&quot;&#10;                                txtMachineInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            // Show server connection error if API call fails&#10;                            txtMachineInfo.text = &quot;Không kết nối được đến server&quot;&#10;                            txtMachineInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                        }&#10;&#10;                        // Fetch ProcessNo and additional data&#10;                        try {&#10;                            val staffNo = edtStaffNo.text.toString().trim()&#10;                            if (staffNo.isNotEmpty()) {&#10;                                val processNoApi = RetrofitClient.retrofitPublic.create(ProcessNoApi::class.java)&#10;                                val processNoDto = processNoApi.getProcessNo(staffNo, mcName)&#10;                                val processNoValue = processNoDto.processNo?.trim()&#10;                                txtProcessNo.text = processNoValue ?: &quot;&quot;&#10;&#10;                                // Show/hide machine running status based on processNo&#10;                                if (!processNoValue.isNullOrBlank()) {&#10;                                    txtMachineRunning.visibility = View.VISIBLE&#10;                                    txtMachineRunning.setTextColor(resources.getColor(android.R.color.holo_green_dark))&#10;                                    layoutSmallEdits.visibility = View.VISIBLE&#10;&#10;                                    //when &quot;Máy đang chạy&quot; appear&#10;                                    // Auto-fill fields with data from processNoDto&#10;&#10;                                    // 1. Auto-fill &quot;Chi tiết công việc&quot; with machine model and disable editing&#10;                                    if (!machineModel.isNullOrBlank()) {&#10;                                        edtJobNo.setText(machineModel)&#10;                                        edtJobNo.isEnabled = false&#10;                                        // Don't trigger focus/unfocus to avoid showing button boxes&#10;                                    }&#10;&#10;                                    // 2. Auto-fill &quot;Lệnh sản xuất&quot; with ProOrdNo2 and disable editing&#10;                                    if (!processNoDto.proOrdNo2.isNullOrBlank()) {&#10;                                        edtProOrdNo.setText(processNoDto.proOrdNo2)&#10;                                        // Trigger focus/unfocus to activate serial textview before disabling&#10;                                        edtProOrdNo.requestFocus()&#10;                                        edtProOrdNo.clearFocus()&#10;                                        edtProOrdNo.isEnabled = false&#10;                                    }&#10;&#10;                                    // 3. Auto-fill &quot;Số series&quot; with Serial2 but allow editing&#10;                                    if (!processNoDto.serial2.isNullOrBlank()) {&#10;                                        edtSerial.setText(processNoDto.serial2)&#10;                                        edtSerial.isEnabled = true&#10;                                    }&#10;&#10;                                    // 4. Auto-fill &quot;Ghi chú&quot; with Note but allow editing&#10;                                    if (!processNoDto.note.isNullOrBlank()) {&#10;                                        edtGhiChu.setText(processNoDto.note)&#10;                                        edtGhiChu.isEnabled = true&#10;                                    }&#10;&#10;                                    // Hide keyboard and clear any remaining focus&#10;                                    val imm = getSystemService(INPUT_METHOD_SERVICE) as? InputMethodManager&#10;                                    imm?.hideSoftInputFromWindow(edtGhiChu.windowToken, 0)&#10;                                    // Always hide button boxes when machine is running&#10;                                    layoutProOrdNoResults.removeAllViews()&#10;&#10;                                } else {&#10;                                    txtMachineRunning.visibility = View.GONE&#10;                                    layoutSmallEdits.visibility = View.GONE&#10;                                    // Re-enable editing when machine is not running&#10;                                    edtJobNo.isEnabled = true&#10;                                    edtProOrdNo.isEnabled = true&#10;                                    edtSerial.isEnabled = true&#10;                                    edtGhiChu.isEnabled = true&#10;                                }&#10;                            } else {&#10;                                txtProcessNo.text = &quot;&quot;&#10;                                txtMachineRunning.visibility = View.GONE&#10;                                layoutSmallEdits.visibility = View.GONE&#10;                                edtJobNo.isEnabled = true&#10;                                edtProOrdNo.isEnabled = true&#10;                                edtSerial.isEnabled = true&#10;                                edtGhiChu.isEnabled = true&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            txtProcessNo.text = &quot;&quot;&#10;                            txtMachineRunning.visibility = View.GONE&#10;                            layoutSmallEdits.visibility = View.GONE&#10;                            edtJobNo.isEnabled = true&#10;                            edtProOrdNo.isEnabled = true&#10;                            edtSerial.isEnabled = true&#10;                            edtGhiChu.isEnabled = true&#10;                        }&#10;                    }&#10;                } else {&#10;                    txtMachineInfo.text = &quot;&quot;&#10;                    txtProcessNo.text = &quot;&quot;&#10;                    txtMachineRunning.visibility = View.GONE&#10;                    layoutSmallEdits.visibility = View.GONE&#10;                    edtJobNo.isEnabled = true&#10;                    edtProOrdNo.isEnabled = true&#10;                    edtSerial.isEnabled = true&#10;                    edtGhiChu.isEnabled = true&#10;                }&#10;            }&#10;        }&#10;&#10;        // --- Block for handling LSX (ProOrdNo) input and displaying results in a grid ---&#10;        // Goal 2: Move the auto-click logic here when processNo is blank&#10;        edtJobNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val jobNo = edtJobNo.text.toString().trim()&#10;                if (jobNo.isNotEmpty()) {&#10;                    // Show loading indicator&#10;                    txtJobInfo.visibility = View.VISIBLE&#10;                    txtJobInfo.text = LoadingStates.LOADING&#10;                    txtJobInfo.setTextColor(LoadingStates.getLoadingColor(resources))&#10;&#10;                    // Fetch production order list asynchronously&#10;                    lifecycleScope.launch {&#10;                        try {&#10;                            val responseBody = proOrdApi.getProOrd(jobNo)&#10;                            val json = responseBody.string()&#10;                            val gson = Gson()&#10;                            val jsonElement = JsonParser.parseString(json)&#10;                            val proOrdList = when {&#10;                                jsonElement.isJsonArray -&gt; jsonElement.asJsonArray.mapNotNull {&#10;                                    gson.fromJson(it, ProOrdDto::class.java).jobControlNo&#10;                                }&#10;                                jsonElement.isJsonObject -&gt; listOfNotNull(gson.fromJson(jsonElement, ProOrdDto::class.java).jobControlNo)&#10;                                else -&gt; emptyList()&#10;                            }&#10;&#10;                            // Hide loading indicator&#10;                            txtJobInfo.visibility = View.GONE&#10;&#10;                            // Clear previous results in the grid&#10;                            layoutProOrdNoResults.removeAllViews()&#10;&#10;                            // Check if machine is running first - if so, don't show any buttons&#10;                            val currentProcessNo = txtProcessNo.text.toString().trim()&#10;                            val isMachineRunning = !currentProcessNo.isBlank()&#10;&#10;                            if (isMachineRunning) {&#10;                                // Machine is running - don't show any buttons, just clear and return&#10;                                return@launch&#10;                            }&#10;&#10;                            if (proOrdList.isNotEmpty()) {&#10;                                // Check if machine is NOT running (processNo is blank)&#10;                                val shouldAutoClick = currentProcessNo.isBlank()&#10;&#10;                                // Auto-click if only one result and machine is not running&#10;                                if (proOrdList.size == 1 &amp;&amp; shouldAutoClick) {&#10;                                    val singleJobControlNo = proOrdList.first()&#10;                                    edtProOrdNo.setText(singleJobControlNo)&#10;                                    edtProOrdNo.requestFocus()&#10;                                    edtProOrdNo.clearFocus()&#10;                                } else {&#10;                                    // Multiple results or machine is running, show clickable boxes&#10;                                    proOrdList.forEach { jobControlNo -&gt;&#10;                                        val tv = TextView(this@MachineLogActivity)&#10;                                        tv.text = jobControlNo&#10;                                        tv.setPadding(12, 8, 12, 8)&#10;                                        tv.setBackgroundResource(R.drawable.clickable_button_background)&#10;                                        tv.setTextColor(resources.getColor(android.R.color.white))&#10;                                        tv.textSize = 14f&#10;                                        tv.gravity = android.view.Gravity.CENTER&#10;&#10;                                        val params = android.widget.GridLayout.LayoutParams()&#10;                                        params.setMargins(4, 4, 4, 4)&#10;                                        params.width = android.widget.GridLayout.LayoutParams.WRAP_CONTENT&#10;                                        params.height = android.widget.GridLayout.LayoutParams.WRAP_CONTENT&#10;                                        tv.layoutParams = params&#10;&#10;                                        tv.setOnClickListener {&#10;                                            edtProOrdNo.setText(jobControlNo)&#10;                                            edtProOrdNo.requestFocus()&#10;                                            edtProOrdNo.clearFocus()&#10;                                            val imm = getSystemService(INPUT_METHOD_SERVICE) as? InputMethodManager&#10;                                            imm?.hideSoftInputFromWindow(edtProOrdNo.windowToken, 0)&#10;                                        }&#10;                                        layoutProOrdNoResults.addView(tv)&#10;                                    }&#10;                                }&#10;                            } else {&#10;                                // Show error if no results found&#10;                                val tv = TextView(this@MachineLogActivity)&#10;                                tv.text = getString(R.string.invalid_staff)&#10;                                tv.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                                layoutProOrdNoResults.addView(tv)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            // Hide loading and show error if API call fails&#10;                            txtJobInfo.visibility = View.GONE&#10;                            layoutProOrdNoResults.removeAllViews()&#10;                            val tv = TextView(this@MachineLogActivity)&#10;                            tv.text = getString(R.string.invalid_staff)&#10;                            tv.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                            layoutProOrdNoResults.addView(tv)&#10;                        }&#10;                    }&#10;                } else {&#10;                    // Clear grid and hide loading if input is empty&#10;                    layoutProOrdNoResults.removeAllViews()&#10;                    txtJobInfo.visibility = View.GONE&#10;                }&#10;            }&#10;        }&#10;&#10;        // --- Block for handling LSX (ProOrdNo) serial info fetching ---&#10;        edtProOrdNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val proOrdNo = edtProOrdNo.text.toString().trim()&#10;                if (proOrdNo.isNotEmpty()) {&#10;                    lifecycleScope.launch {&#10;                        try {&#10;                            val serialList = serialApi.getSerial(proOrdNo)&#10;                            if (serialList.isNotEmpty()) {&#10;                                txtSerialInfo.text = serialList.joinToString(&quot;, &quot;) { it.serial ?: &quot;&quot; }&#10;                            } else {&#10;                                txtSerialInfo.text = getString(R.string.invalid_staff)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            txtSerialInfo.text = getString(R.string.invalid_staff)&#10;                        }&#10;                    }&#10;                } else {&#10;                    txtSerialInfo.text = &quot;&quot;&#10;                }&#10;            }&#10;        }&#10;&#10;        // Map QR keys to EditText IDs (future-proof, add new keys here)&#10;        val editFields = mapOf(&#10;            &quot;staffNo&quot; to edtStaffNo,&#10;            &quot;mcName&quot; to edtMcName,&#10;            &quot;jobNo&quot; to edtJobNo,&#10;            &quot;proOrdNo&quot; to edtProOrdNo,&#10;            &quot;serial&quot; to edtSerial,&#10;            // fallback: also allow direct EditText id mapping&#10;            &quot;edtStaffNo&quot; to edtStaffNo,&#10;            &quot;edtMcName&quot; to edtMcName,&#10;            &quot;edtJobNo&quot; to edtJobNo,&#10;            &quot;edtProOrdNo&quot; to edtProOrdNo,&#10;            &quot;edtSerial&quot; to edtSerial&#10;        )&#10;&#10;        // Register ActivityResultLauncher for QR scan (must be defined before ScanHelper)&#10;        var scanHelper: ScanHelper? = null&#10;        val scanLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result -&gt;&#10;            if (result.resultCode == RESULT_OK) {&#10;                val intent = result.data&#10;                val qrText = intent?.getStringExtra(&quot;SCAN_RESULT&quot;)&#10;                    ?: intent?.getStringExtra(&quot;SCAN_RESULT_ORIGINAL&quot;)&#10;                    ?: intent?.getStringExtra(&quot;SCAN_RESULT_RAW&quot;)&#10;                if (!qrText.isNullOrEmpty()) {&#10;                    scanHelper?.handleScanResult(qrText)&#10;                }&#10;            }&#10;        }&#10;&#10;        // Setup ScanHelper (button click launches scan)&#10;        scanHelper = ScanHelper(this, scanLauncher, editFields, btnScan)&#10;&#10;        // --- UI references for checkboxes (Rework, Setup) ---&#10;        val chkRework = findViewById&lt;CheckBox&gt;(R.id.chkRework)&#10;        val chkSetup = findViewById&lt;CheckBox&gt;(R.id.chkSetup)&#10;        // --- Checkbox value mapping: 1 if checked, 0 if not ---&#10;        var reworkValue = 0&#10;        var setupValue = 0&#10;        chkRework.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            reworkValue = if (isChecked) 1 else 0&#10;        }&#10;        chkSetup.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            setupValue = if (isChecked) 1 else 0&#10;        }&#10;&#10;        val postApi = RetrofitClient.retrofitPublic.create(PostNhatKyGiaCongApi::class.java)&#10;        btnSubmit.setOnClickListener {&#10;            // Prevent submit if any error message is shown&#10;            val invalidText = getString(R.string.invalid_staff)&#10;            val serverError = &quot;Không kết nối được đến server&quot;&#10;            val errorFields = listOf(txtStaffInfo, txtMachineInfo, txtSerialInfo)&#10;            if (errorFields.any {&#10;                val text = it.text.toString()&#10;                text.contains(invalidText, ignoreCase = true) || text.contains(serverError, ignoreCase = true)&#10;            }) {&#10;                Toast.makeText(this, &quot;Vui lòng kiểm tra lại thông tin&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;&#10;            val processNoForDto = txtProcessNo.text.toString().let { if (it.isBlank()) &quot; &quot; else it }&#10;&#10;            // Check for duplicate submission within 4 hours&#10;            if (processNoForDto.trim().isNotEmpty() &amp;&amp; processNoForDto.trim() != &quot; &quot;) {&#10;                val currentTime = System.currentTimeMillis()&#10;                val cacheKey = processNoForDto.trim()&#10;&#10;                // Clean up expired cache entries&#10;                val expiredKeys = submittedProcessCache.filter { (_, timestamp) -&gt;&#10;                    currentTime - timestamp &gt; CACHE_DURATION_HOURS * 60 * 60 * 1000&#10;                }.keys&#10;                expiredKeys.forEach { submittedProcessCache.remove(it) }&#10;&#10;                // Check if this processNo was submitted within 4 hours&#10;                val lastSubmissionTime = submittedProcessCache[cacheKey]&#10;                if (lastSubmissionTime != null) {&#10;                    val hoursAgo = (currentTime - lastSubmissionTime) / (60 * 60 * 1000)&#10;                    val errorMessage = &quot;ProcessNo này đã được gửi ${hoursAgo}h trước. Vui lòng chờ ${CACHE_DURATION_HOURS - hoursAgo}h nữa.&quot;&#10;                    Toast.makeText(this, errorMessage, Toast.LENGTH_LONG).show()&#10;                    txtSendStatus.visibility = View.VISIBLE&#10;                    txtSendStatus.text = errorMessage&#10;                    txtSendStatus.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                    return@setOnClickListener&#10;                }&#10;            }&#10;&#10;            // Show immediate feedback and disable button&#10;            Toast.makeText(this, &quot;Dữ liệu đã được gửi&quot;, Toast.LENGTH_SHORT).show()&#10;            btnSubmit.isEnabled = false&#10;            txtSendStatus.visibility = View.VISIBLE&#10;            txtSendStatus.text = &quot;Đang xử lý...&quot;&#10;            txtSendStatus.setTextColor(resources.getColor(android.R.color.holo_orange_dark))&#10;&#10;            val dto = NhatKyGiaCongDto(&#10;                processNo = processNoForDto,&#10;                jobControlNo = edtJobNo.text.toString().trim(),&#10;                staffNo = edtStaffNo.text.toString().trim(),&#10;                mcName = edtMcName.text.toString().trim(),&#10;                note = edtGhiChu.text.toString().trim(),&#10;                proOrdNo = edtProOrdNo.text.toString().trim(),&#10;                serial = edtSerial.text.toString().trim(),&#10;                setup = chkSetup.isChecked,&#10;                rework = chkRework.isChecked,&#10;                qtyGood = edtDat.text.toString().toIntOrNull() ?: 0,&#10;                qtyReject = edtPhe.text.toString().toIntOrNull() ?: 0,&#10;                qtyRework = edtXuLy.text.toString().toIntOrNull() ?: 0&#10;            )&#10;            lifecycleScope.launch {&#10;                try {&#10;                    android.util.Log.d(&quot;POST_DTO&quot;, Gson().toJson(dto)) // Log the payload&#10;                    val response = postApi.postLog(dto)&#10;                    if (response.isSuccessful) {&#10;                        // Cache the successful submission&#10;                        if (processNoForDto.trim().isNotEmpty() &amp;&amp; processNoForDto.trim() != &quot; &quot;) {&#10;                            submittedProcessCache[processNoForDto.trim()] = System.currentTimeMillis()&#10;                        }&#10;&#10;                        Toast.makeText(this@MachineLogActivity, &quot;Cập nhật thành công&quot;, Toast.LENGTH_SHORT).show()&#10;                        txtSendStatus.text = &quot;Cập nhật thành công&quot;&#10;                        txtSendStatus.setTextColor(resources.getColor(android.R.color.holo_green_dark))&#10;                    } else {&#10;                        val errorBody = response.errorBody()?.string()&#10;                        val errorMessage = &quot;Cập nhật thất bại ${response.code()} ${errorBody ?: &quot;&quot;}&quot;&#10;                        Toast.makeText(this@MachineLogActivity, errorMessage, Toast.LENGTH_LONG).show()&#10;                        txtSendStatus.text = errorMessage&#10;                        txtSendStatus.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                        android.util.Log.e(&quot;POST_ERROR&quot;, &quot;Code: ${response.code()} Body: $errorBody&quot;)&#10;                    }&#10;                } catch (e: Exception) {&#10;                    val errorMessage = &quot;Cập nhật thất bại: ${e.message}&quot;&#10;                    Toast.makeText(this@MachineLogActivity, errorMessage, Toast.LENGTH_SHORT).show()&#10;                    txtSendStatus.text = errorMessage&#10;                    txtSendStatus.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                    android.util.Log.e(&quot;POST_EXCEPTION&quot;, e.toString())&#10;                } finally {&#10;                    // Re-enable button after operation completes&#10;                    btnSubmit.isEnabled = true&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.lephucmfg&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.View&#10;import android.view.inputmethod.EditorInfo&#10;import android.view.inputmethod.InputMethodManager&#10;import android.widget.Button&#10;import android.widget.CheckBox&#10;import android.widget.EditText&#10;import android.widget.LinearLayout&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.lifecycle.lifecycleScope&#10;import com.example.lephucmfg.network.RetrofitClient&#10;import com.example.lephucmfg.utils.LoadingStates&#10;import com.google.gson.annotations.SerializedName&#10;import kotlinx.coroutines.launch&#10;import okhttp3.ResponseBody&#10;import com.google.gson.Gson&#10;import com.google.gson.JsonElement&#10;import com.google.gson.JsonParser&#10;import retrofit2.Call&#10;import retrofit2.Callback&#10;import retrofit2.Response&#10;import retrofit2.http.GET&#10;import retrofit2.http.Path&#10;import retrofit2.http.POST&#10;import retrofit2.http.Body&#10;&#10;class MachineLogActivity : AppCompatActivity() {&#10;    // --- API interface for fetching staff info (&quot;Thợ&quot;) ---&#10;    interface StaffApi {&#10;        @GET(&quot;/api/GetStaff/{staffNo}&quot;)&#10;        suspend fun getStaff(@Path(&quot;staffNo&quot;) staffNo: Int): StaffInfo?&#10;    }&#10;    // --- Data class for staff info ---&#10;    data class StaffInfo(&#10;        @SerializedName(&quot;fullName&quot;) val fullName: String?,&#10;        @SerializedName(&quot;workJob&quot;) val workJob: String?,&#10;        @SerializedName(&quot;workPlace&quot;) val workPlace: String?&#10;    )&#10;    // --- API interface for fetching machine info (&quot;Mã máy&quot;) ---&#10;    interface MachineApi {&#10;        @GET(&quot;/api/GetMachine/{mcName}&quot;)&#10;        suspend fun getMachine(@Path(&quot;mcName&quot;) mcName: String): MachineInfo?&#10;    }&#10;    // --- Data class for machine info ---&#10;    data class MachineInfo(&#10;        @SerializedName(&quot;model&quot;) val model: String?,&#10;        @SerializedName(&quot;status&quot;) val status: String?&#10;    )&#10;    // --- API interface for fetching production order (LSX/ProOrdNo) ---&#10;    interface ProOrdApi {&#10;        @GET(&quot;/api/Laylsx/{JobControlNo}&quot;)&#10;        suspend fun getProOrd(@Path(&quot;JobControlNo&quot;) jobControlNo: String): ResponseBody&#10;    }&#10;    // --- Data class for production order DTO ---&#10;    data class ProOrdDto(&#10;        @SerializedName(&quot;jobControlNo&quot;) val jobControlNo: String?&#10;    )&#10;    // --- API interface for fetching serial info (GetSerial) ---&#10;    interface SerialApi {&#10;        @GET(&quot;/api/GetSerial/{proOrdNo}&quot;)&#10;        suspend fun getSerial(@Path(&quot;proOrdNo&quot;) proOrdNo: String): List&lt;SerialDto&gt;&#10;    }&#10;    // --- Data class for serial info ---&#10;    data class SerialDto(&#10;        @SerializedName(&quot;serial&quot;) val serial: String?&#10;    )&#10;    // --- API interface for fetching process number (ProcessNo) ---&#10;    interface ProcessNoApi {&#10;        @GET(&quot;/api/GetProcessNoChuaKetThuc/{StaffNo}/{McName}&quot;)&#10;        suspend fun getProcessNo(@Path(&quot;StaffNo&quot;) staffNo: String, @Path(&quot;McName&quot;) mcName: String): ProcessNoDto&#10;    }&#10;    data class ProcessNoDto(&#10;        @SerializedName(&quot;processNo&quot;) val processNo: String?,&#10;        @SerializedName(&quot;note&quot;) val note: String?,&#10;        @SerializedName(&quot;serial2&quot;) val serial2: String?,&#10;        @SerializedName(&quot;proOrdNo2&quot;) val proOrdNo2: String?&#10;    )&#10;    // --- API interface for posting machine log ---&#10;    interface PostNhatKyGiaCongApi {&#10;        @POST(&quot;/api/postNhatKyGiaCong&quot;)&#10;        suspend fun postLog(@Body body: NhatKyGiaCongDto): retrofit2.Response&lt;Void&gt;&#10;    }&#10;    data class NhatKyGiaCongDto(&#10;        val processNo: String?,&#10;        val jobControlNo: String?,&#10;        val staffNo: String?,&#10;        val mcName: String?,&#10;        val note: String?,&#10;        val proOrdNo: String?,&#10;        val serial: String?,&#10;        val setup: Boolean,&#10;        val rework: Boolean,&#10;        val qtyGood: Int,&#10;        val qtyReject: Int,&#10;        val qtyRework: Int&#10;    )&#10;&#10;    // Cache for tracking submitted processNo with timestamps&#10;    private val submittedProcessCache = mutableMapOf&lt;String, Long&gt;()&#10;    private val CACHE_DURATION_HOURS = 4&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_machine_log)&#10;&#10;        // --- UI references for &quot;Thợ&quot; (Staff) block ---&#10;        val edtStaffNo = findViewById&lt;EditText&gt;(R.id.edtStaffNo)&#10;        val txtStaffInfo = findViewById&lt;TextView&gt;(R.id.txtStaffInfo)&#10;        val api = RetrofitClient.retrofitPublic.create(StaffApi::class.java)&#10;&#10;        // --- UI references for &quot;Mã máy&quot; (Machine) block ---&#10;        val edtMcName = findViewById&lt;EditText&gt;(R.id.edtMcName)&#10;        val txtMachineInfo = findViewById&lt;TextView&gt;(R.id.txtMachineInfo)&#10;        val txtProcessNo = findViewById&lt;TextView&gt;(R.id.txtProcessNo)&#10;        val txtMachineRunning = findViewById&lt;TextView&gt;(R.id.txtMachineRunning)&#10;&#10;        // --- UI reference for serial info below LSX (ProOrdNo) ---&#10;        val edtProOrdNo = findViewById&lt;EditText&gt;(R.id.edtProOrdNo)&#10;        val txtSerialInfo = findViewById&lt;TextView&gt;(R.id.txtSerialInfo)&#10;        val txtJobInfo = findViewById&lt;TextView&gt;(R.id.txtJobInfo)&#10;        val txtSerialStatus = findViewById&lt;TextView&gt;(R.id.txtSerialStatus)&#10;        val txtNoteStatus = findViewById&lt;TextView&gt;(R.id.txtNoteStatus)&#10;        val machineApi = RetrofitClient.retrofitPublic.create(MachineApi::class.java)&#10;        val serialApi = RetrofitClient.retrofitPublic.create(SerialApi::class.java)&#10;        val proOrdApi = RetrofitClient.retrofitPublic.create(ProOrdApi::class.java)&#10;        var processNoValue: String? = null&#10;&#10;        // --- Declare layoutSmallEdits reference ---&#10;        val layoutSmallEdits = findViewById&lt;LinearLayout&gt;(R.id.layoutSmallEdits)&#10;&#10;        // --- UI references for LSX (ProOrdNo) and result grid block ---&#10;        val edtJobNo = findViewById&lt;EditText&gt;(R.id.edtJobNo)&#10;        val layoutProOrdNoResults = findViewById&lt;android.widget.GridLayout&gt;(R.id.layoutProOrdNoResults)&#10;&#10;        val edtSerial = findViewById&lt;EditText&gt;(R.id.edtSerial)&#10;        val btnScan = findViewById&lt;Button&gt;(R.id.btnScan)&#10;&#10;        // --- UI references for small quantity EditTexts ---&#10;        val edtDat = findViewById&lt;EditText&gt;(R.id.edtDat)&#10;        val edtPhe = findViewById&lt;EditText&gt;(R.id.edtPhe)&#10;        val edtXuLy = findViewById&lt;EditText&gt;(R.id.edtXuLy)&#10;&#10;        // --- UI references for note field and status ---&#10;        val edtGhiChu = findViewById&lt;EditText&gt;(R.id.edtGhiChu)&#10;        val txtSendStatus = findViewById&lt;TextView&gt;(R.id.txtSendStatus)&#10;        val btnSubmit = findViewById&lt;Button&gt;(R.id.btnSubmit)&#10;&#10;        // --- Setup IME action listeners for all EditTexts ---&#10;        edtStaffNo.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtMcName.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtMcName.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtJobNo.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtJobNo.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtProOrdNo.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtProOrdNo.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtSerial.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtSerial.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                if (layoutSmallEdits.visibility == View.VISIBLE) {&#10;                    edtDat.requestFocus()&#10;                } else {&#10;                    edtGhiChu.requestFocus()&#10;                }&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtDat.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtPhe.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtPhe.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtXuLy.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtXuLy.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtGhiChu.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtGhiChu.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_DONE) {&#10;                edtGhiChu.clearFocus()&#10;                val imm = getSystemService(INPUT_METHOD_SERVICE) as? InputMethodManager&#10;                imm?.hideSoftInputFromWindow(edtGhiChu.windowToken, 0)&#10;                true&#10;            } else false&#10;        }&#10;&#10;        // --- Block for handling Staff (&quot;Thợ&quot;) input and validation ---&#10;        edtStaffNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val staffNoStr = edtStaffNo.text.toString().trim()&#10;                if (staffNoStr.isNotEmpty()) {&#10;                    try {&#10;                        val staffNo = staffNoStr.toInt()&#10;                        // Show loading indicator using LoadingStates&#10;                        txtStaffInfo.text = LoadingStates.LOADING&#10;                        txtStaffInfo.setTextColor(LoadingStates.getLoadingColor(resources))&#10;&#10;                        // Fetch staff info asynchronously&#10;                        lifecycleScope.launch {&#10;                            try {&#10;                                val info = api.getStaff(staffNo)&#10;                                if (info != null) {&#10;                                    // Display staff info if found - dark red color for valid and bold&#10;                                    txtStaffInfo.text = listOfNotNull(info.fullName, info.workJob, info.workPlace).joinToString(&quot;, &quot;)&#10;                                    txtStaffInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                                    //txtStaffInfo.setTypeface(null, android.graphics.Typeface.BOLD)  // Uncomment to make bold&#10;                                } else {&#10;                                    // Show error if staff not found - API responded but returned null (invalid)&#10;                                    txtStaffInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;                                    txtStaffInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                                }&#10;                            } catch (e: Exception) {&#10;                                // Show server connection error if API call fails&#10;                                txtStaffInfo.text = &quot;Không kết nối được đến server&quot;&#10;                                txtStaffInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                            }&#10;                        }&#10;                    } catch (e: NumberFormatException) {&#10;                        // Show error if input is not a number&#10;                        txtStaffInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;                        txtStaffInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                    }&#10;                } else {&#10;                    // Clear staff info if input is empty&#10;                    txtStaffInfo.text = &quot;&quot;&#10;                }&#10;            }&#10;        }&#10;&#10;        // --- Block for handling Machine Code (&quot;Mã máy&quot;) input and validation ---&#10;        edtMcName.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val mcName = edtMcName.text.toString().trim()&#10;                if (mcName.isNotEmpty()) {&#10;                    // Show loading indicator using LoadingStates&#10;                    txtMachineInfo.text = LoadingStates.LOADING&#10;                    txtMachineInfo.setTextColor(LoadingStates.getLoadingColor(resources))&#10;&#10;                    // Launch coroutine to fetch machine info asynchronously&#10;                    lifecycleScope.launch {&#10;                        var machineModel: String? = null&#10;                        try {&#10;                            val info = machineApi.getMachine(mcName)&#10;                            if (info != null) {&#10;                                // Display machine model and status if found - blue color for valid and bold&#10;                                txtMachineInfo.text = listOfNotNull(info.model, info.status).joinToString(&quot;, &quot;)&#10;                                txtMachineInfo.setTextColor(resources.getColor(android.R.color.holo_blue_dark))&#10;                                //txtMachineInfo.setTypeface(null, android.graphics.Typeface.BOLD)  // Uncomment to make bold&#10;                                machineModel = info.model&#10;                            } else {&#10;                                // Show error if machine not found - API responded but returned null (invalid)&#10;                                txtMachineInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;                                txtMachineInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            // Show server connection error if API call fails&#10;                            txtMachineInfo.text = &quot;Không kết nối được đến server&quot;&#10;                            txtMachineInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                        }&#10;&#10;                        // Fetch ProcessNo and additional data&#10;                        try {&#10;                            val staffNo = edtStaffNo.text.toString().trim()&#10;                            if (staffNo.isNotEmpty()) {&#10;                                val processNoApi = RetrofitClient.retrofitPublic.create(ProcessNoApi::class.java)&#10;                                val processNoDto = processNoApi.getProcessNo(staffNo, mcName)&#10;                                val processNoValue = processNoDto.processNo?.trim()&#10;                                txtProcessNo.text = processNoValue ?: &quot;&quot;&#10;&#10;                                // Show/hide machine running status based on processNo&#10;                                if (!processNoValue.isNullOrBlank()) {&#10;                                    txtMachineRunning.visibility = View.VISIBLE&#10;                                    txtMachineRunning.setTextColor(resources.getColor(android.R.color.holo_green_dark))&#10;                                    layoutSmallEdits.visibility = View.VISIBLE&#10;&#10;                                    //when &quot;Máy đang chạy&quot; appear&#10;                                    // Auto-fill fields with data from processNoDto&#10;&#10;                                    // 1. Auto-fill &quot;Chi tiết công việc&quot; with machine model and disable editing&#10;                                    if (!machineModel.isNullOrBlank()) {&#10;                                        edtJobNo.setText(machineModel)&#10;                                        edtJobNo.isEnabled = false&#10;                                        // Don't trigger focus/unfocus to avoid showing button boxes&#10;                                    }&#10;&#10;                                    // 2. Auto-fill &quot;Lệnh sản xuất&quot; with ProOrdNo2 and disable editing&#10;                                    if (!processNoDto.proOrdNo2.isNullOrBlank()) {&#10;                                        edtProOrdNo.setText(processNoDto.proOrdNo2)&#10;                                        // Trigger focus/unfocus to activate serial textview before disabling&#10;                                        edtProOrdNo.requestFocus()&#10;                                        edtProOrdNo.clearFocus()&#10;                                        edtProOrdNo.isEnabled = false&#10;                                    }&#10;&#10;                                    // 3. Auto-fill &quot;Số series&quot; with Serial2 but allow editing&#10;                                    if (!processNoDto.serial2.isNullOrBlank()) {&#10;                                        edtSerial.setText(processNoDto.serial2)&#10;                                        edtSerial.isEnabled = true&#10;                                    }&#10;&#10;                                    // 4. Auto-fill &quot;Ghi chú&quot; with Note but allow editing&#10;                                    if (!processNoDto.note.isNullOrBlank()) {&#10;                                        edtGhiChu.setText(processNoDto.note)&#10;                                        edtGhiChu.isEnabled = true&#10;                                    }&#10;&#10;                                    // Hide keyboard and clear any remaining focus&#10;                                    val imm = getSystemService(INPUT_METHOD_SERVICE) as? InputMethodManager&#10;                                    imm?.hideSoftInputFromWindow(edtGhiChu.windowToken, 0)&#10;                                    // Always hide button boxes when machine is running&#10;                                    layoutProOrdNoResults.removeAllViews()&#10;&#10;                                } else {&#10;                                    txtMachineRunning.visibility = View.GONE&#10;                                    layoutSmallEdits.visibility = View.GONE&#10;                                    // Re-enable editing when machine is not running&#10;                                    edtJobNo.isEnabled = true&#10;                                    edtProOrdNo.isEnabled = true&#10;                                    edtSerial.isEnabled = true&#10;                                    edtGhiChu.isEnabled = true&#10;                                }&#10;                            } else {&#10;                                txtProcessNo.text = &quot;&quot;&#10;                                txtMachineRunning.visibility = View.GONE&#10;                                layoutSmallEdits.visibility = View.GONE&#10;                                edtJobNo.isEnabled = true&#10;                                edtProOrdNo.isEnabled = true&#10;                                edtSerial.isEnabled = true&#10;                                edtGhiChu.isEnabled = true&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            txtProcessNo.text = &quot;&quot;&#10;                            txtMachineRunning.visibility = View.GONE&#10;                            layoutSmallEdits.visibility = View.GONE&#10;                            edtJobNo.isEnabled = true&#10;                            edtProOrdNo.isEnabled = true&#10;                            edtSerial.isEnabled = true&#10;                            edtGhiChu.isEnabled = true&#10;                        }&#10;                    }&#10;                } else {&#10;                    txtMachineInfo.text = &quot;&quot;&#10;                    txtProcessNo.text = &quot;&quot;&#10;                    txtMachineRunning.visibility = View.GONE&#10;                    layoutSmallEdits.visibility = View.GONE&#10;                    edtJobNo.isEnabled = true&#10;                    edtProOrdNo.isEnabled = true&#10;                    edtSerial.isEnabled = true&#10;                    edtGhiChu.isEnabled = true&#10;                }&#10;            }&#10;        }&#10;&#10;        // --- Block for handling LSX (ProOrdNo) input and displaying results in a grid ---&#10;        // Goal 2: Move the auto-click logic here when processNo is blank&#10;        edtJobNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val jobNo = edtJobNo.text.toString().trim()&#10;                if (jobNo.isNotEmpty()) {&#10;                    // Show loading indicator&#10;                    txtJobInfo.visibility = View.VISIBLE&#10;                    txtJobInfo.text = LoadingStates.LOADING&#10;                    txtJobInfo.setTextColor(LoadingStates.getLoadingColor(resources))&#10;&#10;                    // Fetch production order list asynchronously&#10;                    lifecycleScope.launch {&#10;                        try {&#10;                            val responseBody = proOrdApi.getProOrd(jobNo)&#10;                            val json = responseBody.string()&#10;                            val gson = Gson()&#10;                            val jsonElement = JsonParser.parseString(json)&#10;                            val proOrdList = when {&#10;                                jsonElement.isJsonArray -&gt; jsonElement.asJsonArray.mapNotNull {&#10;                                    gson.fromJson(it, ProOrdDto::class.java).jobControlNo&#10;                                }&#10;                                jsonElement.isJsonObject -&gt; listOfNotNull(gson.fromJson(jsonElement, ProOrdDto::class.java).jobControlNo)&#10;                                else -&gt; emptyList()&#10;                            }&#10;&#10;                            // Hide loading indicator&#10;                            txtJobInfo.visibility = View.GONE&#10;&#10;                            // Clear previous results in the grid&#10;                            layoutProOrdNoResults.removeAllViews()&#10;&#10;                            // Check if machine is running first - if so, don't show any buttons&#10;                            val currentProcessNo = txtProcessNo.text.toString().trim()&#10;                            val isMachineRunning = !currentProcessNo.isBlank()&#10;&#10;                            if (isMachineRunning) {&#10;                                // Machine is running - don't show any buttons, just clear and return&#10;                                return@launch&#10;                            }&#10;&#10;                            if (proOrdList.isNotEmpty()) {&#10;                                // Check if machine is NOT running (processNo is blank)&#10;                                val shouldAutoClick = currentProcessNo.isBlank()&#10;&#10;                                // Auto-click if only one result and machine is not running&#10;                                if (proOrdList.size == 1 &amp;&amp; shouldAutoClick) {&#10;                                    val singleJobControlNo = proOrdList.first()&#10;                                    edtProOrdNo.setText(singleJobControlNo)&#10;                                    edtProOrdNo.requestFocus()&#10;                                    edtProOrdNo.clearFocus()&#10;                                } else {&#10;                                    // Multiple results or machine is running, show clickable boxes&#10;                                    proOrdList.forEach { jobControlNo -&gt;&#10;                                        val tv = TextView(this@MachineLogActivity)&#10;                                        tv.text = jobControlNo&#10;                                        tv.setPadding(12, 8, 12, 8)&#10;                                        tv.setBackgroundResource(R.drawable.clickable_button_background)&#10;                                        tv.setTextColor(resources.getColor(android.R.color.white))&#10;                                        tv.textSize = 14f&#10;                                        tv.gravity = android.view.Gravity.CENTER&#10;&#10;                                        val params = android.widget.GridLayout.LayoutParams()&#10;                                        params.setMargins(4, 4, 4, 4)&#10;                                        params.width = android.widget.GridLayout.LayoutParams.WRAP_CONTENT&#10;                                        params.height = android.widget.GridLayout.LayoutParams.WRAP_CONTENT&#10;                                        tv.layoutParams = params&#10;&#10;                                        tv.setOnClickListener {&#10;                                            edtProOrdNo.setText(jobControlNo)&#10;                                            edtProOrdNo.requestFocus()&#10;                                            edtProOrdNo.clearFocus()&#10;                                            val imm = getSystemService(INPUT_METHOD_SERVICE) as? InputMethodManager&#10;                                            imm?.hideSoftInputFromWindow(edtProOrdNo.windowToken, 0)&#10;                                        }&#10;                                        layoutProOrdNoResults.addView(tv)&#10;                                    }&#10;                                }&#10;                            } else {&#10;                                // Show error if no results found&#10;                                val tv = TextView(this@MachineLogActivity)&#10;                                tv.text = &quot;Không lấy được dữ liệu&quot;&#10;                                tv.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                                layoutProOrdNoResults.addView(tv)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            // Hide loading and show error if API call fails&#10;                            txtJobInfo.visibility = View.GONE&#10;                            layoutProOrdNoResults.removeAllViews()&#10;                            val tv = TextView(this@MachineLogActivity)&#10;                            tv.text = &quot;Không lấy được dữ liệu&quot;&#10;                            tv.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                            layoutProOrdNoResults.addView(tv)&#10;                        }&#10;                    }&#10;                } else {&#10;                    // Clear grid and hide loading if input is empty&#10;                    layoutProOrdNoResults.removeAllViews()&#10;                    txtJobInfo.visibility = View.GONE&#10;                }&#10;            }&#10;        }&#10;&#10;        // --- Block for handling LSX (ProOrdNo) serial info fetching ---&#10;        edtProOrdNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val proOrdNo = edtProOrdNo.text.toString().trim()&#10;                if (proOrdNo.isNotEmpty()) {&#10;                    lifecycleScope.launch {&#10;                        try {&#10;                            val serialList = serialApi.getSerial(proOrdNo)&#10;                            if (serialList.isNotEmpty()) {&#10;                                txtSerialInfo.text = serialList.joinToString(&quot;, &quot;) { it.serial ?: &quot;&quot; }&#10;                            } else {&#10;                                txtSerialInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            txtSerialInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;                        }&#10;                    }&#10;                } else {&#10;                    txtSerialInfo.text = &quot;&quot;&#10;                }&#10;            }&#10;        }&#10;&#10;        // Map QR keys to EditText IDs (future-proof, add new keys here)&#10;        val editFields = mapOf(&#10;            &quot;staffNo&quot; to edtStaffNo,&#10;            &quot;mcName&quot; to edtMcName,&#10;            &quot;jobNo&quot; to edtJobNo,&#10;            &quot;proOrdNo&quot; to edtProOrdNo,&#10;            &quot;serial&quot; to edtSerial,&#10;            // fallback: also allow direct EditText id mapping&#10;            &quot;edtStaffNo&quot; to edtStaffNo,&#10;            &quot;edtMcName&quot; to edtMcName,&#10;            &quot;edtJobNo&quot; to edtJobNo,&#10;            &quot;edtProOrdNo&quot; to edtProOrdNo,&#10;            &quot;edtSerial&quot; to edtSerial&#10;        )&#10;&#10;        // Register ActivityResultLauncher for QR scan (must be defined before ScanHelper)&#10;        var scanHelper: ScanHelper? = null&#10;        val scanLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result -&gt;&#10;            if (result.resultCode == RESULT_OK) {&#10;                val intent = result.data&#10;                val qrText = intent?.getStringExtra(&quot;SCAN_RESULT&quot;)&#10;                    ?: intent?.getStringExtra(&quot;SCAN_RESULT_ORIGINAL&quot;)&#10;                    ?: intent?.getStringExtra(&quot;SCAN_RESULT_RAW&quot;)&#10;                if (!qrText.isNullOrEmpty()) {&#10;                    scanHelper?.handleScanResult(qrText)&#10;                }&#10;            }&#10;        }&#10;&#10;        // Setup ScanHelper (button click launches scan)&#10;        scanHelper = ScanHelper(this, scanLauncher, editFields, btnScan)&#10;&#10;        // --- UI references for checkboxes (Rework, Setup) ---&#10;        val chkRework = findViewById&lt;CheckBox&gt;(R.id.chkRework)&#10;        val chkSetup = findViewById&lt;CheckBox&gt;(R.id.chkSetup)&#10;        // --- Checkbox value mapping: 1 if checked, 0 if not ---&#10;        var reworkValue = 0&#10;        var setupValue = 0&#10;        chkRework.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            reworkValue = if (isChecked) 1 else 0&#10;        }&#10;        chkSetup.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            setupValue = if (isChecked) 1 else 0&#10;        }&#10;&#10;        val postApi = RetrofitClient.retrofitPublic.create(PostNhatKyGiaCongApi::class.java)&#10;        btnSubmit.setOnClickListener {&#10;            // Prevent submit if any error message is shown&#10;            val dataError = &quot;Không lấy được dữ liệu&quot;&#10;            val serverError = &quot;Không kết nối được đến server&quot;&#10;            val errorFields = listOf(txtStaffInfo, txtMachineInfo, txtSerialInfo)&#10;            if (errorFields.any {&#10;                val text = it.text.toString()&#10;                text.contains(dataError, ignoreCase = true) || text.contains(serverError, ignoreCase = true)&#10;            }) {&#10;                Toast.makeText(this, &quot;Vui lòng kiểm tra lại thông tin&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;&#10;            val processNoForDto = txtProcessNo.text.toString().let { if (it.isBlank()) &quot; &quot; else it }&#10;&#10;            // Check for duplicate submission within 4 hours&#10;            if (processNoForDto.trim().isNotEmpty() &amp;&amp; processNoForDto.trim() != &quot; &quot;) {&#10;                val currentTime = System.currentTimeMillis()&#10;                val cacheKey = processNoForDto.trim()&#10;&#10;                // Clean up expired cache entries&#10;                val expiredKeys = submittedProcessCache.filter { (_, timestamp) -&gt;&#10;                    currentTime - timestamp &gt; CACHE_DURATION_HOURS * 60 * 60 * 1000&#10;                }.keys&#10;                expiredKeys.forEach { submittedProcessCache.remove(it) }&#10;&#10;                // Check if this processNo was submitted within 4 hours&#10;                val lastSubmissionTime = submittedProcessCache[cacheKey]&#10;                if (lastSubmissionTime != null) {&#10;                    val hoursAgo = (currentTime - lastSubmissionTime) / (60 * 60 * 1000)&#10;                    val errorMessage = &quot;ProcessNo này đã được gửi ${hoursAgo}h trước. Vui lòng chờ ${CACHE_DURATION_HOURS - hoursAgo}h nữa.&quot;&#10;                    Toast.makeText(this, errorMessage, Toast.LENGTH_LONG).show()&#10;                    txtSendStatus.visibility = View.VISIBLE&#10;                    txtSendStatus.text = errorMessage&#10;                    txtSendStatus.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                    return@setOnClickListener&#10;                }&#10;            }&#10;&#10;            // Show immediate feedback and disable button&#10;            Toast.makeText(this, &quot;Dữ liệu đã được gửi&quot;, Toast.LENGTH_SHORT).show()&#10;            btnSubmit.isEnabled = false&#10;            txtSendStatus.visibility = View.VISIBLE&#10;            txtSendStatus.text = &quot;Đang xử lý...&quot;&#10;            txtSendStatus.setTextColor(resources.getColor(android.R.color.holo_orange_dark))&#10;&#10;            val dto = NhatKyGiaCongDto(&#10;                processNo = processNoForDto,&#10;                jobControlNo = edtJobNo.text.toString().trim(),&#10;                staffNo = edtStaffNo.text.toString().trim(),&#10;                mcName = edtMcName.text.toString().trim(),&#10;                note = edtGhiChu.text.toString().trim(),&#10;                proOrdNo = edtProOrdNo.text.toString().trim(),&#10;                serial = edtSerial.text.toString().trim(),&#10;                setup = chkSetup.isChecked,&#10;                rework = chkRework.isChecked,&#10;                qtyGood = edtDat.text.toString().toIntOrNull() ?: 0,&#10;                qtyReject = edtPhe.text.toString().toIntOrNull() ?: 0,&#10;                qtyRework = edtXuLy.text.toString().toIntOrNull() ?: 0&#10;            )&#10;            lifecycleScope.launch {&#10;                try {&#10;                    android.util.Log.d(&quot;POST_DTO&quot;, Gson().toJson(dto)) // Log the payload&#10;                    val response = postApi.postLog(dto)&#10;                    if (response.isSuccessful) {&#10;                        // Cache the successful submission&#10;                        if (processNoForDto.trim().isNotEmpty() &amp;&amp; processNoForDto.trim() != &quot; &quot;) {&#10;                            submittedProcessCache[processNoForDto.trim()] = System.currentTimeMillis()&#10;                        }&#10;&#10;                        Toast.makeText(this@MachineLogActivity, &quot;Cập nhật thành công&quot;, Toast.LENGTH_SHORT).show()&#10;                        txtSendStatus.text = &quot;Cập nhật thành công&quot;&#10;                        txtSendStatus.setTextColor(resources.getColor(android.R.color.holo_green_dark))&#10;                    } else {&#10;                        val errorBody = response.errorBody()?.string()&#10;                        val errorMessage = &quot;Cập nhật thất bại ${response.code()} ${errorBody ?: &quot;&quot;}&quot;&#10;                        Toast.makeText(this@MachineLogActivity, errorMessage, Toast.LENGTH_LONG).show()&#10;                        txtSendStatus.text = errorMessage&#10;                        txtSendStatus.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                        android.util.Log.e(&quot;POST_ERROR&quot;, &quot;Code: ${response.code()} Body: $errorBody&quot;)&#10;                    }&#10;                } catch (e: Exception) {&#10;                    val errorMessage = &quot;Cập nhật thất bại: ${e.message}&quot;&#10;                    Toast.makeText(this@MachineLogActivity, errorMessage, Toast.LENGTH_SHORT).show()&#10;                    txtSendStatus.text = errorMessage&#10;                    txtSendStatus.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                    android.util.Log.e(&quot;POST_EXCEPTION&quot;, e.toString())&#10;                } finally {&#10;                    // Re-enable button after operation completes&#10;                    btnSubmit.isEnabled = true&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/lephucmfg/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/lephucmfg/MainActivity.kt" />
              <option name="originalContent" value="package com.example.lephucmfg&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import androidx.appcompat.app.AppCompatActivity&#10;&#10;import com.example.lephucmfg.ABTestingActivity&#10;&#10;class MainActivity : AppCompatActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.frontpage)&#10;&#10;        findViewById&lt;Button&gt;(R.id.btnAbTesting).setOnClickListener {&#10;            startActivity(Intent(this, ABTestingActivity::class.java))&#10;        }&#10;        findViewById&lt;Button&gt;(R.id.btnMachineLog).setOnClickListener {&#10;            startActivity(Intent(this, MachineLogActivity::class.java))&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.lephucmfg&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import java.io.IOException&#10;&#10;import com.example.lephucmfg.ABTestingActivity&#10;&#10;class MainActivity : AppCompatActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.frontpage)&#10;&#10;        // Load changelog content from assets&#10;        val txtChangeLog = findViewById&lt;TextView&gt;(R.id.txtChangeLog)&#10;        loadChangelogFromAssets(txtChangeLog)&#10;&#10;        findViewById&lt;Button&gt;(R.id.btnAbTesting).setOnClickListener {&#10;            startActivity(Intent(this, ABTestingActivity::class.java))&#10;        }&#10;        findViewById&lt;Button&gt;(R.id.btnMachineLog).setOnClickListener {&#10;            startActivity(Intent(this, MachineLogActivity::class.java))&#10;        }&#10;    }&#10;&#10;    private fun loadChangelogFromAssets(textView: TextView) {&#10;        try {&#10;            val inputStream = assets.open(&quot;changelog.txt&quot;)&#10;            val text = inputStream.bufferedReader().use { it.readText() }&#10;            textView.text = text&#10;        } catch (e: IOException) {&#10;            textView.text = &quot;Error loading changelog: ${e.message}&quot;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/lephucmfg/utils/LoadingStates.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/lephucmfg/utils/LoadingStates.kt" />
              <option name="updatedContent" value="package com.example.lephucmfg.utils&#10;&#10;import android.content.res.Resources&#10;&#10;object LoadingStates {&#10;    const val LOADING = &quot;Đang xử lý...&quot;&#10;    &#10;    fun getLoadingColor(resources: Resources): Int {&#10;        return resources.getColor(android.R.color.holo_orange_dark)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/clickable_button_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/clickable_button_background.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;solid android:color=&quot;@android:color/holo_blue_light&quot; /&gt;&#10;    &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;    &lt;stroke &#10;        android:width=&quot;1dp&quot; &#10;        android:color=&quot;@android:color/holo_blue_dark&quot; /&gt;&#10;    &lt;padding &#10;        android:left=&quot;12dp&quot; &#10;        android:right=&quot;12dp&quot; &#10;        android:top=&quot;8dp&quot; &#10;        android:bottom=&quot;8dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_machine_log.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_machine_log.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;24dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnScan&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Scan&quot;&#10;                android:layout_marginEnd=&quot;0dp&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtStaffNo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Thợ&quot;&#10;            android:layout_marginTop=&quot;0dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;number&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtStaffInfo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtMcName&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Mã máy&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;text&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtMachineInfo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginTop=&quot;4dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/txtProcessNo&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;&quot;&#10;                android:textColor=&quot;@android:color/holo_blue_dark&quot;&#10;                android:visibility=&quot;gone&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/txtMachineRunning&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Máy đang chạy&quot;&#10;                android:textColor=&quot;@android:color/holo_blue_dark&quot;&#10;                android:visibility=&quot;gone&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtJobNo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Chi tiết công việc&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;text&quot; /&gt;&#10;&#10;        &lt;!-- Replacing LinearLayout with GridLayout for 3 columns per row --&gt;&#10;        &lt;GridLayout&#10;            android:id=&quot;@+id/layoutProOrdNoResults&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:columnCount=&quot;3&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:background=&quot;@android:color/white&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtProOrdNo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Lệnh sản xuất&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;text&quot; /&gt;&#10;&#10;        &lt;!-- Serial info result for LSX (ProOrdNo) --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtSerialInfo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtSerial&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Số series&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;text&quot; /&gt;&#10;&#10;        &lt;!-- Only two checkboxes: Rework and Setup, can be checked independently --&gt;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/layoutCheckBoxes&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&gt;&#10;            &lt;CheckBox&#10;                android:id=&quot;@+id/chkRework&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Rework&quot;&#10;                android:layout_marginStart=&quot;0dp&quot;/&gt;&#10;            &lt;CheckBox&#10;                android:id=&quot;@+id/chkSetup&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Setup&quot;&#10;                android:layout_marginStart=&quot;16dp&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Add 3 small edit boxes for &quot;Đạt&quot;, &quot;Phế&quot;, &quot;Xử lý&quot; --&gt;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/layoutSmallEdits&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:visibility=&quot;gone&quot;&gt;&#10;            &lt;EditText&#10;                android:id=&quot;@+id/edtDat&quot;&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:hint=&quot;Đạt&quot;&#10;                android:inputType=&quot;number&quot;&#10;                android:maxLength=&quot;3&quot;&#10;                android:textAlignment=&quot;center&quot;&#10;                android:imeOptions=&quot;actionNext&quot;/&gt;&#10;            &lt;EditText&#10;                android:id=&quot;@+id/edtPhe&quot;&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:hint=&quot;Phế&quot;&#10;                android:inputType=&quot;number&quot;&#10;                android:maxLength=&quot;3&quot;&#10;                android:layout_marginStart=&quot;16dp&quot;&#10;                android:textAlignment=&quot;center&quot;&#10;                android:imeOptions=&quot;actionNext&quot;/&gt;&#10;            &lt;EditText&#10;                android:id=&quot;@+id/edtXuLy&quot;&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:hint=&quot;Xử lý&quot;&#10;                android:inputType=&quot;number&quot;&#10;                android:maxLength=&quot;3&quot;&#10;                android:layout_marginStart=&quot;16dp&quot;&#10;                android:textAlignment=&quot;center&quot;&#10;                android:imeOptions=&quot;actionNext&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Add TextEdit for &quot;Ghi chú&quot; --&gt;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtGhiChu&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Ghi chú&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:imeOptions=&quot;actionDone&quot;/&gt;&#10;&#10;        &lt;!-- Status TextView for showing send status --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtSendStatus&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnSubmit&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Cập nhật&quot;&#10;            android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;24dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnScan&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Scan&quot;&#10;                android:layout_marginEnd=&quot;0dp&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtStaffNo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Thợ&quot;&#10;            android:layout_marginTop=&quot;0dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;number&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtStaffInfo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtMcName&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Mã máy&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;number&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtMachineInfo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginTop=&quot;4dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/txtProcessNo&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;&quot;&#10;                android:textColor=&quot;@android:color/holo_blue_dark&quot;&#10;                android:visibility=&quot;gone&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/txtMachineRunning&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Máy đang chạy&quot;&#10;                android:textColor=&quot;@android:color/holo_blue_dark&quot;&#10;                android:visibility=&quot;gone&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtJobNo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Chi tiết công việc&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;number&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtJobInfo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;!-- Replacing LinearLayout with GridLayout for 3 columns per row --&gt;&#10;        &lt;GridLayout&#10;            android:id=&quot;@+id/layoutProOrdNoResults&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:columnCount=&quot;3&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:background=&quot;@android:color/white&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtProOrdNo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Lệnh sản xuất&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;number&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtSerialInfo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtSerial&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Số series&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;text&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtSerialStatus&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;!-- Only two checkboxes: Rework and Setup, can be checked independently --&gt;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/layoutCheckBoxes&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&gt;&#10;            &lt;CheckBox&#10;                android:id=&quot;@+id/chkRework&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Rework&quot;&#10;                android:layout_marginStart=&quot;0dp&quot;/&gt;&#10;            &lt;CheckBox&#10;                android:id=&quot;@+id/chkSetup&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Setup&quot;&#10;                android:layout_marginStart=&quot;16dp&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Add 3 small edit boxes for &quot;Đạt&quot;, &quot;Phế&quot;, &quot;Xử lý&quot; --&gt;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/layoutSmallEdits&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:visibility=&quot;gone&quot;&gt;&#10;            &lt;EditText&#10;                android:id=&quot;@+id/edtDat&quot;&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:hint=&quot;Đạt&quot;&#10;                android:inputType=&quot;number&quot;&#10;                android:maxLength=&quot;3&quot;&#10;                android:textAlignment=&quot;center&quot;&#10;                android:imeOptions=&quot;actionNext&quot;/&gt;&#10;            &lt;EditText&#10;                android:id=&quot;@+id/edtPhe&quot;&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:hint=&quot;Phế&quot;&#10;                android:inputType=&quot;number&quot;&#10;                android:maxLength=&quot;3&quot;&#10;                android:layout_marginStart=&quot;16dp&quot;&#10;                android:textAlignment=&quot;center&quot;&#10;                android:imeOptions=&quot;actionNext&quot;/&gt;&#10;            &lt;EditText&#10;                android:id=&quot;@+id/edtXuLy&quot;&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:hint=&quot;Xử lý&quot;&#10;                android:inputType=&quot;number&quot;&#10;                android:maxLength=&quot;3&quot;&#10;                android:layout_marginStart=&quot;16dp&quot;&#10;                android:textAlignment=&quot;center&quot;&#10;                android:imeOptions=&quot;actionNext&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Add TextEdit for &quot;Ghi chú&quot; --&gt;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtGhiChu&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Ghi chú&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:imeOptions=&quot;actionDone&quot;/&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtNoteStatus&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;!-- Status TextView for showing send status --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtSendStatus&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnSubmit&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Cập nhật&quot;&#10;            android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/frontpage.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/frontpage.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnAbTesting&quot;&#10;        android:layout_width=&quot;48dp&quot;&#10;        android:layout_height=&quot;48dp&quot;&#10;        android:background=&quot;@android:color/transparent&quot;&#10;        android:text=&quot;&quot;&#10;        android:visibility=&quot;invisible&quot;&#10;        android:layout_alignParentBottom=&quot;true&quot;&#10;        android:layout_alignParentStart=&quot;true&quot;&#10;        android:layout_marginStart=&quot;8dp&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnMachineLog&quot;&#10;        android:layout_width=&quot;144dp&quot;&#10;        android:layout_height=&quot;86dp&quot;&#10;        android:layout_alignBottom=&quot;@+id/btnAbTesting&quot;&#10;        android:layout_marginEnd=&quot;-164dp&quot;&#10;        android:layout_marginBottom=&quot;569dp&quot;&#10;        android:layout_toStartOf=&quot;@+id/btnAbTesting&quot;&#10;        android:text=&quot;Nhật ký máy&quot; /&gt;&#10;&#10;    &lt;!-- Changelog box - Free to position anywhere --&gt;&#10;    &lt;ScrollView&#10;        android:id=&quot;@+id/scrollChangeLog&quot;&#10;        android:layout_width=&quot;128dp&quot;&#10;        android:layout_height=&quot;131dp&quot;&#10;        android:layout_centerVertical=&quot;true&quot;&#10;        android:layout_marginTop=&quot;50dp&quot;&#10;        android:background=&quot;@android:drawable/edit_text&quot;&#10;        android:padding=&quot;8dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtChangeLog&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;CHANGELOG:&#10;&#10;//Write changelog content here - you can edit this text in the layout file or programmatically&#10;//Format: Date - Change description&#10;//Example entries:&#10;&#10;2025-01-07:&#10;- Added loading states with yellow 'Đang xử lý...' indicator&#10;- Staff and Machine info now show blue color when valid&#10;- Moved auto-click logic to non-running machine phase&#10;- Auto-fill functionality when machine is running:&#10;  * Chi tiết công việc filled with machine model (disabled)&#10;  * Lệnh sản xuất filled with ProOrdNo2 (disabled)&#10;  * Số series filled with Serial2 (editable)&#10;  * Ghi chú filled with Note (editable)&#10;- ProcessNo duplicate submission prevention (4-hour cache)&#10;- Enhanced API data retrieval (Note, Serial2, ProOrdNo2)&#10;&#10;//Add new changelog entries above this line&#10;//Keep format: YYYY-MM-DD: Description&#10;//You can resize and move this box freely in the layout&quot;&#10;            android:textColor=&quot;@android:color/black&quot;&#10;            android:textSize=&quot;12sp&quot; /&gt;&#10;    &lt;/ScrollView&gt;&#10;&#10;    &lt;!-- Add more buttons and use layout_alignParent*, layout_center*, layout_below, layout_above, etc. to freely anchor and move them in the design view --&gt;&#10;&#10;&lt;/RelativeLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;!-- Hidden test button for debugging - freely positioned --&gt;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnAbTesting&quot;&#10;        android:layout_width=&quot;48dp&quot;&#10;        android:layout_height=&quot;48dp&quot;&#10;        android:background=&quot;@android:color/transparent&quot;&#10;        android:text=&quot;&quot;&#10;        android:visibility=&quot;invisible&quot;&#10;        android:layout_alignParentBottom=&quot;true&quot;&#10;        android:layout_alignParentStart=&quot;true&quot;&#10;        android:layout_marginStart=&quot;8dp&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;!-- Main Machine Log button - freely positioned with margins --&gt;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnMachineLog&quot;&#10;        android:layout_width=&quot;144dp&quot;&#10;        android:layout_height=&quot;86dp&quot;&#10;        android:layout_alignParentTop=&quot;true&quot;&#10;        android:layout_alignParentStart=&quot;true&quot;&#10;        android:layout_marginStart=&quot;20dp&quot;&#10;        android:layout_marginTop=&quot;50dp&quot;&#10;        android:text=&quot;Nhật ký máy&quot; /&gt;&#10;&#10;    &lt;!-- Changelog box - Freely positioned and resizable --&gt;&#10;    &lt;ScrollView&#10;        android:id=&quot;@+id/scrollChangeLog&quot;&#10;        android:layout_width=&quot;280dp&quot;&#10;        android:layout_height=&quot;180dp&quot;&#10;        android:layout_alignParentEnd=&quot;true&quot;&#10;        android:layout_alignParentTop=&quot;true&quot;&#10;        android:layout_marginEnd=&quot;20dp&quot;&#10;        android:layout_marginTop=&quot;100dp&quot;&#10;        android:background=&quot;@android:drawable/edit_text&quot;&#10;        android:padding=&quot;8dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtChangeLog&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textColor=&quot;@android:color/black&quot;&#10;            android:textSize=&quot;11sp&quot;&#10;            android:text=&quot;Loading changelog...&quot; /&gt;&#10;    &lt;/ScrollView&gt;&#10;&#10;    &lt;!-- Example of how to add more freely positioned elements:&#10;    &#10;    &lt;Button&#10;        android:id=&quot;@+id/btnExample1&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_centerHorizontal=&quot;true&quot;&#10;        android:layout_centerVertical=&quot;true&quot;&#10;        android:text=&quot;Center Button&quot; /&gt;&#10;        &#10;    &lt;Button&#10;        android:id=&quot;@+id/btnExample2&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_alignParentBottom=&quot;true&quot;&#10;        android:layout_centerHorizontal=&quot;true&quot;&#10;        android:layout_marginBottom=&quot;100dp&quot;&#10;        android:text=&quot;Bottom Center&quot; /&gt;&#10;        &#10;    Use these attributes for free positioning:&#10;    - layout_alignParentTop/Bottom/Start/End=&quot;true&quot;&#10;    - layout_centerHorizontal/Vertical=&quot;true&quot; &#10;    - layout_centerInParent=&quot;true&quot;&#10;    - layout_above/below/toStartOf/toEndOf=&quot;@id/other_view&quot;&#10;    - layout_marginTop/Bottom/Start/End=&quot;XXdp&quot;&#10;    --&gt;&#10;&#10;&lt;/RelativeLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/strings.xml" />
              <option name="originalContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;LEPHUCMFG&lt;/string&gt;&#10;    &lt;string name=&quot;scan_qr&quot;&gt;Scan QR&lt;/string&gt;&#10;    &lt;string name=&quot;result_will_show_here&quot;&gt;kết quả&lt;/string&gt;&#10;&#10;&#10;" />
              <option name="updatedContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;LEPHUCMFG&lt;/string&gt;&#10;    &lt;string name=&quot;scan_qr&quot;&gt;Scan QR&lt;/string&gt;&#10;    &lt;string name=&quot;result_will_show_here&quot;&gt;kết quả&lt;/string&gt;&#10;    &lt;string name=&quot;invalid_staff&quot;&gt;không hợp lệ&lt;/string&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>