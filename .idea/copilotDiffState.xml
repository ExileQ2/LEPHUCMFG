<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/lephucmfg/MaterialLogActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/lephucmfg/MaterialLogActivity.kt" />
              <option name="originalContent" value="package com.example.lephucmfg&#10;&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.TextView&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.content.ContextCompat&#10;import androidx.lifecycle.lifecycleScope&#10;import com.example.lephucmfg.network.RetrofitClient&#10;import com.example.lephucmfg.utils.LoadingStates&#10;import com.google.gson.annotations.SerializedName&#10;import com.google.zxing.integration.android.IntentIntegrator&#10;import kotlinx.coroutines.launch&#10;import retrofit2.http.GET&#10;import retrofit2.http.Path&#10;&#10;class MaterialLogActivity : AppCompatActivity() {&#10;    // --- API interface for fetching staff info (&quot;Thợ&quot;) ---&#10;    interface StaffApi {&#10;        @GET(&quot;/api/GetStaff/{staffNo}&quot;)&#10;        suspend fun getStaff(@Path(&quot;staffNo&quot;) staffNo: Int): StaffInfo?&#10;    }&#10;&#10;    // --- API interface for fetching heat number info ---&#10;    interface HeatNoApi {&#10;        @GET(&quot;/api/GetInfoHeatNo/{HeatNo}&quot;)&#10;        suspend fun getHeatNoInfo(@Path(&quot;HeatNo&quot;) heatNo: String): List&lt;HeatNoInfo&gt;?&#10;    }&#10;&#10;    // --- Data class for staff info ---&#10;    data class StaffInfo(&#10;        @SerializedName(&quot;fullName&quot;) val fullName: String?,&#10;        @SerializedName(&quot;workJob&quot;) val workJob: String?,&#10;        @SerializedName(&quot;workPlace&quot;) val workPlace: String?&#10;    )&#10;&#10;    // --- Data class for heat number info ---&#10;    data class HeatNoInfo(&#10;        @SerializedName(&quot;material&quot;) val material: String?,&#10;        @SerializedName(&quot;existQty&quot;) val existQty: Int?,&#10;        @SerializedName(&quot;inpSize1&quot;) val inpSize1: String?,&#10;        @SerializedName(&quot;inpSize2&quot;) val inpSize2: String?,&#10;        @SerializedName(&quot;qty&quot;) val qty: Int?,&#10;        @SerializedName(&quot;notes&quot;) val notes: String?&#10;    )&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_material_log)&#10;&#10;        val edtStaffNo = findViewById&lt;EditText&gt;(R.id.edtStaffNo)&#10;        val txtStaffInfo = findViewById&lt;TextView&gt;(R.id.txtStaffInfo)&#10;        val edtHeatNo = findViewById&lt;EditText&gt;(R.id.edtHeatNo)&#10;        val txtHeatInfo = findViewById&lt;TextView&gt;(R.id.txtHeatInfo)&#10;        val btnScan = findViewById&lt;Button&gt;(R.id.btnScan)&#10;&#10;        val staffApi = RetrofitClient.retrofitPublic.create(StaffApi::class.java)&#10;        val heatNoApi = RetrofitClient.retrofitPublic.create(HeatNoApi::class.java)&#10;&#10;        // --- QR Scan integration ---&#10;        val editFields = mapOf(&#10;            &quot;staffNo&quot; to edtStaffNo,&#10;            &quot;heatno&quot; to edtHeatNo,&#10;            // fallback: also allow direct EditText id mapping&#10;            &quot;edtStaffNo&quot; to edtStaffNo,&#10;            &quot;edtHeatNo&quot; to edtHeatNo&#10;        )&#10;        var scanHelper: ScanHelper? = null&#10;        val scanLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result -&gt;&#10;            if (result.resultCode == RESULT_OK) {&#10;                val intent = result.data&#10;                val qrText = intent?.getStringExtra(&quot;SCAN_RESULT&quot;)&#10;                    ?: intent?.getStringExtra(&quot;SCAN_RESULT_ORIGINAL&quot;)&#10;                    ?: intent?.getStringExtra(&quot;SCAN_RESULT_RAW&quot;)&#10;                if (!qrText.isNullOrEmpty()) {&#10;                    scanHelper?.handleScanResult(qrText)&#10;                }&#10;            }&#10;        }&#10;        scanHelper = ScanHelper(this, scanLauncher, editFields, btnScan)&#10;&#10;        // Staff number focus change listener&#10;        edtStaffNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val staffNoStr = edtStaffNo.text.toString().trim()&#10;                if (staffNoStr.isNotEmpty()) {&#10;                    try {&#10;                        val staffNo = staffNoStr.toInt()&#10;                        txtStaffInfo.text = getString(R.string.loading)&#10;                        txtStaffInfo.setTextColor(ContextCompat.getColor(this, android.R.color.holo_red_dark))&#10;                        lifecycleScope.launch {&#10;                            try {&#10;                                val info = staffApi.getStaff(staffNo)&#10;                                if (info != null) {&#10;                                    txtStaffInfo.text = listOfNotNull(info.fullName, info.workJob, info.workPlace).joinToString(&quot;, &quot;)&#10;                                    txtStaffInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;                                } else {&#10;                                    txtStaffInfo.text = getString(R.string.data_not_found)&#10;                                    txtStaffInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;                                }&#10;                            } catch (_: Exception) {&#10;                                txtStaffInfo.text = getString(R.string.data_not_found)&#10;                                txtStaffInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;                            }&#10;                        }&#10;                    } catch (_: NumberFormatException) {&#10;                        txtStaffInfo.text = getString(R.string.data_not_found)&#10;                    }&#10;                } else {&#10;                    txtStaffInfo.text = &quot;&quot;&#10;                }&#10;            }&#10;        }&#10;&#10;        // HeatNo focus change listener&#10;        edtHeatNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val heatNoStr = edtHeatNo.text.toString().trim()&#10;                if (heatNoStr.isNotEmpty()) {&#10;                    txtHeatInfo.text = getString(R.string.loading)&#10;                    txtHeatInfo.setTextColor(ContextCompat.getColor(this, android.R.color.holo_red_dark))&#10;                    lifecycleScope.launch {&#10;                        try {&#10;                            val heatInfoList = heatNoApi.getHeatNoInfo(heatNoStr)&#10;                            if (heatInfoList != null &amp;&amp; heatInfoList.isNotEmpty()) {&#10;                                val formattedInfo = heatInfoList.joinToString(&quot;\n&quot;) { info -&gt;&#10;                                    val material = info.material ?: &quot;&quot;&#10;                                    val existQty = info.existQty?.toString() ?: &quot;&quot;&#10;                                    val inpSize1 = info.inpSize1 ?: &quot;&quot;&#10;                                    val inpSize2 = info.inpSize2 ?: &quot;&quot;&#10;                                    val qty = info.qty?.toString() ?: &quot;&quot;&#10;                                    val notes = info.notes ?: &quot;&quot;&#10;                                    &quot;$material, SL vật liệu $existQty, $inpSize1 * $inpSize2, SL con hàng $qty, $notes&quot;&#10;                                }&#10;                                txtHeatInfo.text = formattedInfo&#10;                                txtHeatInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;                            } else {&#10;                                txtHeatInfo.text = getString(R.string.data_not_found)&#10;                                txtHeatInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;                            }&#10;                        } catch (_: Exception) {&#10;                            txtHeatInfo.text = getString(R.string.data_not_found)&#10;                            txtHeatInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;                        }&#10;                    }&#10;                } else {&#10;                    txtHeatInfo.text = &quot;&quot;&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.lephucmfg&#10;&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.LinearLayout&#10;import android.widget.TextView&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.content.ContextCompat&#10;import androidx.lifecycle.lifecycleScope&#10;import com.example.lephucmfg.network.RetrofitClient&#10;import com.example.lephucmfg.utils.LoadingStates&#10;import com.google.gson.annotations.SerializedName&#10;import com.google.zxing.integration.android.IntentIntegrator&#10;import kotlinx.coroutines.launch&#10;import retrofit2.http.GET&#10;import retrofit2.http.Path&#10;&#10;class MaterialLogActivity : AppCompatActivity() {&#10;    // --- API interface for fetching staff info (&quot;Thợ&quot;) ---&#10;    interface StaffApi {&#10;        @GET(&quot;/api/GetStaff/{staffNo}&quot;)&#10;        suspend fun getStaff(@Path(&quot;staffNo&quot;) staffNo: Int): StaffInfo?&#10;    }&#10;&#10;    // --- API interface for fetching heat number info ---&#10;    interface HeatNoApi {&#10;        @GET(&quot;/api/GetInfoHeatNo/{HeatNo}&quot;)&#10;        suspend fun getHeatNoInfo(@Path(&quot;HeatNo&quot;) heatNo: String): List&lt;HeatNoInfo&gt;?&#10;    }&#10;&#10;    // --- Data class for staff info ---&#10;    data class StaffInfo(&#10;        @SerializedName(&quot;fullName&quot;) val fullName: String?,&#10;        @SerializedName(&quot;workJob&quot;) val workJob: String?,&#10;        @SerializedName(&quot;workPlace&quot;) val workPlace: String?&#10;    )&#10;&#10;    // --- Data class for heat number info ---&#10;    data class HeatNoInfo(&#10;        @SerializedName(&quot;material&quot;) val material: String?,&#10;        @SerializedName(&quot;existQty&quot;) val existQty: Int?,&#10;        @SerializedName(&quot;inpSize1&quot;) val inpSize1: String?,&#10;        @SerializedName(&quot;inpSize2&quot;) val inpSize2: String?,&#10;        @SerializedName(&quot;qty&quot;) val qty: Int?,&#10;        @SerializedName(&quot;notes&quot;) val notes: String?&#10;    )&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_material_log)&#10;&#10;        val edtStaffNo = findViewById&lt;EditText&gt;(R.id.edtStaffNo)&#10;        val txtStaffInfo = findViewById&lt;TextView&gt;(R.id.txtStaffInfo)&#10;        val edtHeatNo = findViewById&lt;EditText&gt;(R.id.edtHeatNo)&#10;        val txtHeatInfo = findViewById&lt;TextView&gt;(R.id.txtHeatInfo)&#10;        val btnScan = findViewById&lt;Button&gt;(R.id.btnScan)&#10;        val layoutHeatInfoButtons = findViewById&lt;LinearLayout&gt;(R.id.layoutHeatInfoButtons)&#10;&#10;        val staffApi = RetrofitClient.retrofitPublic.create(StaffApi::class.java)&#10;        val heatNoApi = RetrofitClient.retrofitPublic.create(HeatNoApi::class.java)&#10;&#10;        // --- QR Scan integration ---&#10;        val editFields = mapOf(&#10;            &quot;staffNo&quot; to edtStaffNo,&#10;            &quot;heatno&quot; to edtHeatNo,&#10;            // fallback: also allow direct EditText id mapping&#10;            &quot;edtStaffNo&quot; to edtStaffNo,&#10;            &quot;edtHeatNo&quot; to edtHeatNo&#10;        )&#10;        var scanHelper: ScanHelper? = null&#10;        val scanLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result -&gt;&#10;            if (result.resultCode == RESULT_OK) {&#10;                val intent = result.data&#10;                val qrText = intent?.getStringExtra(&quot;SCAN_RESULT&quot;)&#10;                    ?: intent?.getStringExtra(&quot;SCAN_RESULT_ORIGINAL&quot;)&#10;                    ?: intent?.getStringExtra(&quot;SCAN_RESULT_RAW&quot;)&#10;                if (!qrText.isNullOrEmpty()) {&#10;                    scanHelper?.handleScanResult(qrText)&#10;                }&#10;            }&#10;        }&#10;        scanHelper = ScanHelper(this, scanLauncher, editFields, btnScan)&#10;&#10;        // Staff number focus change listener&#10;        edtStaffNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val staffNoStr = edtStaffNo.text.toString().trim()&#10;                if (staffNoStr.isNotEmpty()) {&#10;                    try {&#10;                        val staffNo = staffNoStr.toInt()&#10;                        txtStaffInfo.text = getString(R.string.loading)&#10;                        txtStaffInfo.setTextColor(ContextCompat.getColor(this, android.R.color.holo_red_dark))&#10;                        lifecycleScope.launch {&#10;                            try {&#10;                                val info = staffApi.getStaff(staffNo)&#10;                                if (info != null) {&#10;                                    txtStaffInfo.text = listOfNotNull(info.fullName, info.workJob, info.workPlace).joinToString(&quot;, &quot;)&#10;                                    txtStaffInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;                                } else {&#10;                                    txtStaffInfo.text = getString(R.string.data_not_found)&#10;                                    txtStaffInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;                                }&#10;                            } catch (_: Exception) {&#10;                                txtStaffInfo.text = getString(R.string.data_not_found)&#10;                                txtStaffInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;                            }&#10;                        }&#10;                    } catch (_: NumberFormatException) {&#10;                        txtStaffInfo.text = getString(R.string.data_not_found)&#10;                    }&#10;                } else {&#10;                    txtStaffInfo.text = &quot;&quot;&#10;                }&#10;            }&#10;        }&#10;&#10;        // HeatNo focus change listener&#10;        edtHeatNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val heatNoStr = edtHeatNo.text.toString().trim()&#10;                // Clear previous buttons&#10;                layoutHeatInfoButtons.removeAllViews()&#10;                &#10;                if (heatNoStr.isNotEmpty()) {&#10;                    txtHeatInfo.text = getString(R.string.loading)&#10;                    txtHeatInfo.setTextColor(ContextCompat.getColor(this, android.R.color.holo_red_dark))&#10;                    lifecycleScope.launch {&#10;                        try {&#10;                            val heatInfoList = heatNoApi.getHeatNoInfo(heatNoStr)&#10;                            if (heatInfoList != null &amp;&amp; heatInfoList.isNotEmpty()) {&#10;                                txtHeatInfo.text = &quot;&quot;&#10;                                &#10;                                // Create clickable buttons for each heat info item&#10;                                heatInfoList.forEach { info -&gt;&#10;                                    val material = info.material ?: &quot;&quot;&#10;                                    val existQty = info.existQty?.toString() ?: &quot;&quot;&#10;                                    val inpSize1 = info.inpSize1 ?: &quot;&quot;&#10;                                    val inpSize2 = info.inpSize2 ?: &quot;&quot;&#10;                                    val qty = info.qty?.toString() ?: &quot;&quot;&#10;                                    val notes = info.notes ?: &quot;&quot;&#10;                                    &#10;                                    val buttonText = &quot;$material, SL vật liệu $existQty, $inpSize1 * $inpSize2, SL con hàng $qty, $notes&quot;&#10;                                    &#10;                                    val button = Button(this@MaterialLogActivity).apply {&#10;                                        text = buttonText&#10;                                        setBackgroundResource(R.drawable.clickable_button_background)&#10;                                        setTextColor(ContextCompat.getColor(context, android.R.color.white))&#10;                                        layoutParams = LinearLayout.LayoutParams(&#10;                                            LinearLayout.LayoutParams.MATCH_PARENT,&#10;                                            LinearLayout.LayoutParams.WRAP_CONTENT&#10;                                        ).apply {&#10;                                            setMargins(0, 0, 0, 8)&#10;                                        }&#10;                                        &#10;                                        setOnClickListener {&#10;                                            // Handle button click - you can add specific functionality here&#10;                                            txtHeatInfo.text = &quot;Clicked: $buttonText&quot;&#10;                                            txtHeatInfo.setTextColor(ContextCompat.getColor(context, android.R.color.holo_red_dark))&#10;                                        }&#10;                                    }&#10;                                    &#10;                                    layoutHeatInfoButtons.addView(button)&#10;                                }&#10;                            } else {&#10;                                txtHeatInfo.text = getString(R.string.data_not_found)&#10;                                txtHeatInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;                            }&#10;                        } catch (_: Exception) {&#10;                            txtHeatInfo.text = getString(R.string.data_not_found)&#10;                            txtHeatInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;                        }&#10;                    }&#10;                } else {&#10;                    txtHeatInfo.text = &quot;&quot;&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_material_log.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_material_log.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;24dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnScan&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Scan&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtStaffNo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Thợ&quot;&#10;            android:layout_marginTop=&quot;0dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;number&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtStaffInfo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtHeatNo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;HeatNo&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;text&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtHeatInfo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;!-- ...other UI elements... --&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;24dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnScan&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Scan&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtStaffNo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Thợ&quot;&#10;            android:layout_marginTop=&quot;0dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;number&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtStaffInfo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtHeatNo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;HeatNo&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;text&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtHeatInfo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/layoutHeatInfoButtons&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;!-- ...other UI elements... --&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>