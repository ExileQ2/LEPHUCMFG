<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/lephucmfg/MachineLogActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/lephucmfg/MachineLogActivity.kt" />
              <option name="originalContent" value="package com.example.lephucmfg&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.View&#10;import android.view.inputmethod.EditorInfo&#10;import android.view.inputmethod.InputMethodManager&#10;import android.widget.Button&#10;import android.widget.CheckBox&#10;import android.widget.EditText&#10;import android.widget.LinearLayout&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.lifecycle.lifecycleScope&#10;import com.example.lephucmfg.network.RetrofitClient&#10;import com.example.lephucmfg.utils.LoadingStates&#10;import com.google.gson.Gson&#10;import com.google.gson.JsonElement&#10;import com.google.gson.JsonParser&#10;import retrofit2.Call&#10;import retrofit2.Callback&#10;import retrofit2.Response&#10;import retrofit2.http.GET&#10;import retrofit2.http.Path&#10;import retrofit2.http.POST&#10;import retrofit2.http.Body&#10;&#10;class MachineLogActivity : AppCompatActivity() {&#10;    // --- API interface for fetching staff info (&quot;Thợ&quot;) ---&#10;    // --- Data class for staff info ---&#10;    )&#10;    }&#10;    // --- Data class for machine info ---&#10;    data class MachineInfo(&#10;        @SerializedName(&quot;model&quot;) val model: String?,&#10;        @SerializedName(&quot;status&quot;) val status: String?&#10;    )&#10;    // --- API interface for fetching production order (LSX/ProOrdNo) ---&#10;    interface ProOrdApi {&#10;        @GET(&quot;/api/Laylsx/{JobControlNo}&quot;)&#10;        suspend fun getProOrd(@Path(&quot;JobControlNo&quot;) jobControlNo: String): ResponseBody&#10;    }&#10;    // --- Data class for production order DTO ---&#10;    data class ProOrdDto(&#10;        @SerializedName(&quot;jobControlNo&quot;) val jobControlNo: String?&#10;    )&#10;    // --- API interface for fetching serial info (GetSerial) ---&#10;    interface SerialApi {&#10;        @GET(&quot;/api/GetSerial/{proOrdNo}&quot;)&#10;        suspend fun getSerial(@Path(&quot;proOrdNo&quot;) proOrdNo: String): List&lt;SerialDto&gt;&#10;    }&#10;    // --- Data class for serial info ---&#10;    data class SerialDto(&#10;        @SerializedName(&quot;serial&quot;) val serial: String?&#10;    )&#10;    // --- API interface for fetching process number (ProcessNo) ---&#10;    interface ProcessNoApi {&#10;        @GET(&quot;/api/GetProcessNoChuaKetThuc/{StaffNo}/{McName}&quot;)&#10;        suspend fun getProcessNo(@Path(&quot;StaffNo&quot;) staffNo: String, @Path(&quot;McName&quot;) mcName: String): ProcessNoDto&#10;    }&#10;    data class ProcessNoDto(&#10;        @SerializedName(&quot;processNo&quot;) val processNo: String?,&#10;        @SerializedName(&quot;note&quot;) val note: String?,&#10;        @SerializedName(&quot;serial2&quot;) val serial2: String?,&#10;        @SerializedName(&quot;proOrdNo2&quot;) val proOrdNo2: String?&#10;    )&#10;    // --- API interface for posting machine log ---&#10;    interface PostNhatKyGiaCongApi {&#10;        @POST(&quot;/api/postNhatKyGiaCong&quot;)&#10;        suspend fun postLog(@Body body: NhatKyGiaCongDto): retrofit2.Response&lt;Void&gt;&#10;    }&#10;    data class NhatKyGiaCongDto(&#10;        val processNo: String?,&#10;        val jobControlNo: String?,&#10;        val staffNo: String?,&#10;        val mcName: String?,&#10;        val note: String?,&#10;        val proOrdNo: String?,&#10;        val serial: String?,&#10;        val setup: Boolean,&#10;        val rework: Boolean,&#10;        val qtyGood: Int,&#10;        val qtyReject: Int,&#10;        val qtyRework: Int&#10;    )&#10;&#10;    // Shared function to process machine and staff data&#10;    private suspend fun processMachineAndStaff() {&#10;        val edtStaffNo = findViewById&lt;EditText&gt;(R.id.edtStaffNo)&#10;        val edtMcName = findViewById&lt;EditText&gt;(R.id.edtMcName)&#10;        val txtMachineInfo = findViewById&lt;TextView&gt;(R.id.txtMachineInfo)&#10;        val txtProcessNo = findViewById&lt;TextView&gt;(R.id.txtProcessNo)&#10;        val txtMachineRunning = findViewById&lt;TextView&gt;(R.id.txtMachineRunning)&#10;        val layoutSmallEdits = findViewById&lt;LinearLayout&gt;(R.id.layoutSmallEdits)&#10;        val edtJobNo = findViewById&lt;EditText&gt;(R.id.edtJobNo)&#10;        val edtProOrdNo = findViewById&lt;EditText&gt;(R.id.edtProOrdNo)&#10;        val edtSerial = findViewById&lt;EditText&gt;(R.id.edtSerial)&#10;        val edtGhiChu = findViewById&lt;EditText&gt;(R.id.edtGhiChu)&#10;        val layoutProOrdNoResults = findViewById&lt;android.widget.GridLayout&gt;(R.id.layoutProOrdNoResults)&#10;        val machineApi = RetrofitClient.retrofitPublic.create(MachineApi::class.java)&#10;&#10;        val staffNo = edtStaffNo.text.toString().trim()&#10;        val mcName = edtMcName.text.toString().trim()&#10;&#10;        // If machine code is empty, clear everything and return&#10;        if (mcName.isEmpty()) {&#10;            txtMachineInfo.text = &quot;&quot;&#10;            txtProcessNo.text = &quot;&quot;&#10;            txtMachineRunning.visibility = View.GONE&#10;            layoutSmallEdits.visibility = View.GONE&#10;            edtJobNo.isEnabled = true&#10;            edtProOrdNo.isEnabled = true&#10;            edtSerial.isEnabled = true&#10;            edtGhiChu.isEnabled = true&#10;            updateSubmitButtonState()&#10;            return&#10;        }&#10;&#10;        // Show loading indicator&#10;        txtMachineInfo.text = LoadingStates.LOADING&#10;        txtMachineInfo.setTextColor(LoadingStates.getLoadingColor(resources))&#10;&#10;        var machineModel: String? = null&#10;        var machineStatus: String? = null&#10;&#10;        // Fetch machine info&#10;        try {&#10;            val info = machineApi.getMachine(mcName)&#10;            if (info != null) {&#10;                txtMachineInfo.text = listOfNotNull(info.model, info.status).joinToString(&quot;, &quot;)&#10;                txtMachineInfo.setTextColor(resources.getColor(android.R.color.holo_blue_dark))&#10;                machineModel = info.model&#10;                machineStatus = info.status&#10;            } else {&#10;                txtMachineInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;                txtMachineInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;            }&#10;        } catch (e: Exception) {&#10;            txtMachineInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;            txtMachineInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;        }&#10;&#10;        // Fetch ProcessNo if both staff and machine are available&#10;        var processNoValue: String? = null&#10;        var processNoDto: ProcessNoDto? = null&#10;&#10;        if (staffNo.isNotEmpty()) {&#10;            try {&#10;                val processNoApi = RetrofitClient.retrofitPublic.create(ProcessNoApi::class.java)&#10;                processNoDto = processNoApi.getProcessNo(staffNo, mcName)&#10;                processNoValue = processNoDto.processNo?.trim()&#10;                txtProcessNo.text = processNoValue ?: &quot;&quot;&#10;&#10;                // If we have a processNo, show &quot;Máy đang chạy&quot; and auto-fill fields&#10;                if (!processNoValue.isNullOrBlank()) {&#10;                    txtMachineRunning.visibility = View.VISIBLE&#10;                    txtMachineRunning.text = &quot;Máy đang chạy&quot;&#10;                    txtMachineRunning.setTextColor(resources.getColor(android.R.color.holo_green_dark))&#10;                    txtMachineRunning.setTypeface(null, android.graphics.Typeface.NORMAL)&#10;                    layoutSmallEdits.visibility = View.VISIBLE&#10;&#10;                    // Auto-fill fields with data from processNoDto&#10;                    if (!machineModel.isNullOrBlank()) {&#10;                        edtJobNo.setText(machineModel)&#10;                        edtJobNo.isEnabled = false&#10;                    }&#10;&#10;                    if (!processNoDto.proOrdNo2.isNullOrBlank()) {&#10;                        edtProOrdNo.setText(processNoDto.proOrdNo2)&#10;                        edtProOrdNo.requestFocus()&#10;                        edtProOrdNo.clearFocus()&#10;                        edtProOrdNo.isEnabled = false&#10;                    }&#10;&#10;                    if (!processNoDto.serial2.isNullOrBlank()) {&#10;                        edtSerial.setText(processNoDto.serial2)&#10;                        edtSerial.isEnabled = true&#10;                    }&#10;&#10;                    if (!processNoDto.note.isNullOrBlank()) {&#10;                        edtGhiChu.setText(processNoDto.note)&#10;                        edtGhiChu.isEnabled = true&#10;                    }&#10;&#10;                    // Hide keyboard and clear any remaining focus&#10;                    val imm = getSystemService(INPUT_METHOD_SERVICE) as? InputMethodManager&#10;                    imm?.hideSoftInputFromWindow(edtGhiChu.windowToken, 0)&#10;                    layoutProOrdNoResults.removeAllViews()&#10;&#10;                    updateSubmitButtonState()&#10;                    return&#10;                }&#10;            } catch (e: Exception) {&#10;                txtProcessNo.text = &quot;&quot;&#10;            }&#10;        } else {&#10;            txtProcessNo.text = &quot;&quot;&#10;        }&#10;&#10;        // Show machine status based on machine status only&#10;        when {&#10;            machineStatus?.contains(&quot;Status: Ready&quot;, ignoreCase = true) == true -&gt; {&#10;                txtMachineRunning.visibility = View.VISIBLE&#10;                txtMachineRunning.text = &quot;Đang chờ việc&quot;&#10;                txtMachineRunning.setTextColor(resources.getColor(android.R.color.holo_orange_dark))&#10;                txtMachineRunning.setTypeface(null, android.graphics.Typeface.NORMAL)&#10;                layoutSmallEdits.visibility = View.GONE&#10;            }&#10;            machineStatus?.contains(&quot;Status: Processing&quot;, ignoreCase = true) == true -&gt; {&#10;                txtMachineRunning.visibility = View.VISIBLE&#10;                txtMachineRunning.text = &quot;Đang gia công&quot;&#10;                txtMachineRunning.setTextColor(resources.getColor(android.R.color.holo_green_dark))&#10;                txtMachineRunning.setTypeface(null, android.graphics.Typeface.BOLD)&#10;                layoutSmallEdits.visibility = View.GONE&#10;            }&#10;            machineStatus?.contains(&quot;Status: Maintenance&quot;, ignoreCase = true) == true -&gt; {&#10;                txtMachineRunning.visibility = View.VISIBLE&#10;                txtMachineRunning.text = &quot;Đang bảo trì&quot;&#10;                txtMachineRunning.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                txtMachineRunning.setTypeface(null, android.graphics.Typeface.NORMAL)&#10;                layoutSmallEdits.visibility = View.GONE&#10;            }&#10;            machineStatus?.contains(&quot;Status: BeingSetup&quot;, ignoreCase = true) == true -&gt; {&#10;                txtMachineRunning.visibility = View.VISIBLE&#10;                txtMachineRunning.text = &quot;Đang setup&quot;&#10;                txtMachineRunning.setTextColor(resources.getColor(android.R.color.holo_orange_dark))&#10;                txtMachineRunning.setTypeface(null, android.graphics.Typeface.NORMAL)&#10;                layoutSmallEdits.visibility = View.GONE&#10;            }&#10;            machineStatus?.contains(&quot;Status: Damage&quot;, ignoreCase = true) == true -&gt; {&#10;                txtMachineRunning.visibility = View.VISIBLE&#10;                txtMachineRunning.text = &quot;Báo hư chờ sửa&quot;&#10;                txtMachineRunning.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                txtMachineRunning.setTypeface(null, android.graphics.Typeface.NORMAL)&#10;                layoutSmallEdits.visibility = View.GONE&#10;            }&#10;            else -&gt; {&#10;                txtMachineRunning.visibility = View.GONE&#10;                layoutSmallEdits.visibility = View.GONE&#10;            }&#10;        }&#10;&#10;        // Re-enable editing when machine is not running for this user&#10;        edtJobNo.isEnabled = true&#10;        edtProOrdNo.isEnabled = true&#10;        edtSerial.isEnabled = true&#10;        edtGhiChu.isEnabled = true&#10;&#10;        updateSubmitButtonState()&#10;    }&#10;&#10;    // Function to check machine status and control submit button&#10;    private fun updateSubmitButtonState() {&#10;        val btnSubmit = findViewById&lt;Button&gt;(R.id.btnSubmit)&#10;        val txtMachineInfo = findViewById&lt;TextView&gt;(R.id.txtMachineInfo)&#10;        val txtMachineRunning = findViewById&lt;TextView&gt;(R.id.txtMachineRunning)&#10;&#10;        val machineInfoText = txtMachineInfo.text.toString()&#10;        val machineRunningText = txtMachineRunning.text.toString()&#10;        val isMachineRunningVisible = txtMachineRunning.visibility == View.VISIBLE&#10;&#10;        // Check conditions that should block submit&#10;        val hasProcessingStatus = machineInfoText.contains(&quot;Status: Processing&quot;, ignoreCase = true)&#10;        val isShowingProcessingForOther = isMachineRunningVisible &amp;&amp; machineRunningText == &quot;Đang gia công&quot;&#10;        val hasMaintenanceStatus = machineInfoText.contains(&quot;Status: Maintenance&quot;, ignoreCase = true)&#10;        val isShowingMaintenance = isMachineRunningVisible &amp;&amp; machineRunningText == &quot;Đang bảo trì&quot;&#10;        val hasBeingSetupStatus = machineInfoText.contains(&quot;Status: BeingSetup&quot;, ignoreCase = true)&#10;        val isShowingBeingSetup = isMachineRunningVisible &amp;&amp; machineRunningText == &quot;Đang setup&quot;&#10;        val hasDamageStatus = machineInfoText.contains(&quot;Status: Damage&quot;, ignoreCase = true)&#10;        val isShowingDamage = isMachineRunningVisible &amp;&amp; machineRunningText == &quot;Báo hư chờ sửa&quot;&#10;&#10;        val shouldBlockSubmit = (hasProcessingStatus &amp;&amp; isShowingProcessingForOther) ||&#10;                               (hasMaintenanceStatus &amp;&amp; isShowingMaintenance) ||&#10;                               (hasBeingSetupStatus &amp;&amp; isShowingBeingSetup) ||&#10;                               (hasDamageStatus &amp;&amp; isShowingDamage)&#10;&#10;        if (shouldBlockSubmit) {&#10;            btnSubmit.isEnabled = false&#10;            btnSubmit.alpha = 0.5f // Gray out the button&#10;        } else {&#10;            btnSubmit.isEnabled = true&#10;            btnSubmit.alpha = 1.0f // Restore normal appearance&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_machine_log)&#10;&#10;        // --- UI references for &quot;Thợ&quot; (Staff) block ---&#10;        val edtStaffNo = findViewById&lt;EditText&gt;(R.id.edtStaffNo)&#10;        val txtStaffInfo = findViewById&lt;TextView&gt;(R.id.txtStaffInfo)&#10;        val api = RetrofitClient.retrofitPublic.create(StaffApi::class.java)&#10;&#10;        val txtProcessNo = findViewById&lt;TextView&gt;(R.id.txtProcessNo)&#10;        val txtMachineRunning = findViewById&lt;TextView&gt;(R.id.txtMachineRunning)&#10;&#10;        // --- UI reference for serial info below LSX (ProOrdNo) ---&#10;        val edtProOrdNo = findViewById&lt;EditText&gt;(R.id.edtProOrdNo)&#10;        val btnScan = findViewById&lt;Button&gt;(R.id.btnScan)&#10;&#10;        // --- UI references for small quantity EditTexts ---&#10;        val edtDat = findViewById&lt;EditText&gt;(R.id.edtDat)&#10;        val edtPhe = findViewById&lt;EditText&gt;(R.id.edtPhe)&#10;                edtJobNo.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtSerial.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                if (layoutSmallEdits.visibility == View.VISIBLE) {&#10;                    edtDat.requestFocus()&#10;                } else {&#10;                    edtGhiChu.requestFocus()&#10;                }&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtDat.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtPhe.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtPhe.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtXuLy.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtXuLy.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtGhiChu.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtGhiChu.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_DONE) {&#10;                edtGhiChu.clearFocus()&#10;                val imm = getSystemService(INPUT_METHOD_SERVICE) as? InputMethodManager&#10;                imm?.hideSoftInputFromWindow(edtGhiChu.windowToken, 0)&#10;                true&#10;            } else false&#10;        }&#10;&#10;        // --- Block for handling Staff (&quot;Thợ&quot;) input and validation ---&#10;        edtStaffNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val staffNoStr = edtStaffNo.text.toString().trim()&#10;                if (staffNoStr.isNotEmpty()) {&#10;                    try {&#10;                        val staffNo = staffNoStr.toInt()&#10;                        // Show loading indicator using LoadingStates&#10;                        txtStaffInfo.text = LoadingStates.LOADING&#10;                        txtStaffInfo.setTextColor(LoadingStates.getLoadingColor(resources))&#10;&#10;                        // Fetch staff info asynchronously&#10;                        lifecycleScope.launch {&#10;                            try {&#10;                                val info = api.getStaff(staffNo)&#10;                                if (info != null) {&#10;                                    // Display staff info if found - dark red color for valid and bold&#10;                                    txtStaffInfo.text = listOfNotNull(info.fullName, info.workJob, info.workPlace).joinToString(&quot;, &quot;)&#10;                                    txtStaffInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                                    //txtStaffInfo.setTypeface(null, android.graphics.Typeface.BOLD)  // Uncomment to make bold&#10;                                } else {&#10;                                    // Show error if staff not found - API responded but returned null (invalid)&#10;                                    txtStaffInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;                                    txtStaffInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                                }&#10;                            } catch (e: Exception) {&#10;                                txtStaffInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                            // Call shared function to process machine and staff combination&#10;                            processMachineAndStaff()&#10;                        }&#10;                    } catch (e: NumberFormatException) {&#10;                        // Show error if input is not a number&#10;                        txtStaffInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;                        txtStaffInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                    }&#10;                } else {&#10;                    // Clear staff info if input is empty&#10;                    txtStaffInfo.text = &quot;&quot;&#10;                    // Call shared function to clear machine processing&#10;                                    txtStaffInfo.text = listOfNotNull(info.fullName, info.workJob, info.workPlace).joinToString(&quot;, &quot;)&#10;                    }&#10;                                    //txtStaffInfo.setTypeface(null, android.graphics.Typeface.BOLD)  // Uncomment to make bold&#10;&#10;        // --- Block for handling Machine Code (&quot;Mã máy&quot;) input and validation ---&#10;        edtMcName.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                lifecycleScope.launch {&#10;                    processMachineAndStaff()&#10;        }&#10;        edtJobNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val jobNo = edtJobNo.text.toString().trim()&#10;                if (jobNo.isNotEmpty()) {&#10;                    // Show loading indicator&#10;                    txtJobInfo.visibility = View.VISIBLE&#10;                    txtJobInfo.text = LoadingStates.LOADING&#10;&#10;                    // Fetch production order list asynchronously&#10;                    lifecycleScope.launch {&#10;                        try {&#10;                            val gson = Gson()&#10;                                    txtStaffInfo.text = listOfNotNull(info.fullName, info.workJob, info.workPlace).joinToString(&quot;, &quot;)&#10;                                jsonElement.isJsonArray -&gt; jsonElement.asJsonArray.mapNotNull {&#10;                                    //txtStaffInfo.setTypeface(null, android.graphics.Typeface.BOLD)  // Uncomment to make bold&#10;                                else -&gt; emptyList()&#10;                            }&#10;&#10;                            // Hide loading indicator&#10;&#10;                            // Clear previous results in the grid&#10;                            // Check if machine is running first - if so, don't show any buttons&#10;                            if (isMachineRunning) {&#10;                                // Machine is running - don't show any buttons, just clear and return&#10;                                return@launch&#10;                            }&#10;&#10;                            if (proOrdList.isNotEmpty()) {&#10;                                // Check if machine is NOT running (processNo is blank)&#10;&#10;                                // Auto-click if only one result and machine is not running&#10;                                if (proOrdList.size == 1 &amp;&amp; shouldAutoClick) {&#10;                                    val singleJobControlNo = proOrdList.first()&#10;                                    edtProOrdNo.clearFocus()&#10;                                    txtStaffInfo.text = listOfNotNull(info.fullName, info.workJob, info.workPlace).joinToString(&quot;, &quot;)&#10;                                    proOrdList.forEach { jobControlNo -&gt;&#10;                                    //txtStaffInfo.setTypeface(null, android.graphics.Typeface.BOLD)  // Uncomment to make bold&#10;                                        tv.setBackgroundResource(R.drawable.clickable_button_background)&#10;                                        tv.setTextColor(resources.getColor(android.R.color.white))&#10;                                        tv.textSize = 14f&#10;                                        tv.gravity = android.view.Gravity.CENTER&#10;                                        val params = android.widget.GridLayout.LayoutParams()&#10;                                        params.setMargins(4, 4, 4, 4)&#10;                                        params.width = android.widget.GridLayout.LayoutParams.WRAP_CONTENT&#10;                                        params.height = android.widget.GridLayout.LayoutParams.WRAP_CONTENT&#10;                                        tv.layoutParams = params&#10;                                        tv.setOnClickListener {&#10;                                            edtProOrdNo.setText(jobControlNo)&#10;                                            edtProOrdNo.requestFocus()&#10;                                            edtProOrdNo.clearFocus()&#10;                                            val imm = getSystemService(INPUT_METHOD_SERVICE) as? InputMethodManager&#10;                                            imm?.hideSoftInputFromWindow(edtProOrdNo.windowToken, 0)&#10;                                        }&#10;                                        layoutProOrdNoResults.addView(tv)&#10;                                    }&#10;                            } else {&#10;                                // Show error if no results found&#10;                                val tv = TextView(this@MachineLogActivity)&#10;                                tv.text = &quot;Không lấy được dữ liệu&quot;&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            // Hide loading and show error if API call fails&#10;                            txtJobInfo.visibility = View.GONE&#10;                            layoutProOrdNoResults.removeAllViews()&#10;                            val tv = TextView(this@MachineLogActivity)&#10;                            tv.text = &quot;Không lấy được dữ liệu&quot;&#10;                            tv.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                            layoutProOrdNoResults.addView(tv)&#10;                        }&#10;                    }&#10;                } else {&#10;                    // Clear grid and hide loading if input is empty&#10;                    layoutProOrdNoResults.removeAllViews()&#10;                    txtJobInfo.visibility = View.GONE&#10;                }&#10;            }&#10;        }&#10;&#10;        // --- Block for handling LSX (ProOrdNo) serial info fetching ---&#10;        edtProOrdNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val proOrdNo = edtProOrdNo.text.toString().trim()&#10;                if (proOrdNo.isNotEmpty()) {&#10;                    lifecycleScope.launch {&#10;                        try {&#10;                            val serialList = serialApi.getSerial(proOrdNo)&#10;                            if (serialList.isNotEmpty()) {&#10;                                txtSerialInfo.text = serialList.joinToString(&quot;, &quot;) { it.serial ?: &quot;&quot; }&#10;                            } else {&#10;                                txtSerialInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            txtSerialInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;                        }&#10;                    }&#10;                } else {&#10;                    txtSerialInfo.text = &quot;&quot;&#10;                }&#10;            }&#10;        }&#10;&#10;        // Map QR keys to EditText IDs (future-proof, add new keys here)&#10;        val editFields = mapOf(&#10;            &quot;staffNo&quot; to edtStaffNo,&#10;            &quot;mcName&quot; to edtMcName,&#10;            &quot;jobNo&quot; to edtJobNo,&#10;            &quot;proOrdNo&quot; to edtProOrdNo,&#10;            &quot;serial&quot; to edtSerial,&#10;            // fallback: also allow direct EditText id mapping&#10;            &quot;edtStaffNo&quot; to edtStaffNo,&#10;            &quot;edtMcName&quot; to edtMcName,&#10;            &quot;edtJobNo&quot; to edtJobNo,&#10;            &quot;edtProOrdNo&quot; to edtProOrdNo,&#10;            &quot;edtSerial&quot; to edtSerial&#10;        )&#10;&#10;        // Register ActivityResultLauncher for QR scan (must be defined before ScanHelper)&#10;        var scanHelper: ScanHelper? = null&#10;        val scanLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result -&gt;&#10;            if (result.resultCode == RESULT_OK) {&#10;                val intent = result.data&#10;                val qrText = intent?.getStringExtra(&quot;SCAN_RESULT&quot;)&#10;                    ?: intent?.getStringExtra(&quot;SCAN_RESULT_ORIGINAL&quot;)&#10;                    ?: intent?.getStringExtra(&quot;SCAN_RESULT_RAW&quot;)&#10;                if (!qrText.isNullOrEmpty()) {&#10;                    scanHelper?.handleScanResult(qrText)&#10;                }&#10;            }&#10;        }&#10;&#10;        // Setup ScanHelper (button click launches scan)&#10;        scanHelper = ScanHelper(this, scanLauncher, editFields, btnScan)&#10;&#10;        // --- UI references for checkboxes (Rework, Setup) ---&#10;        val chkRework = findViewById&lt;CheckBox&gt;(R.id.chkRework)&#10;        val chkSetup = findViewById&lt;CheckBox&gt;(R.id.chkSetup)&#10;        // --- Checkbox value mapping: 1 if checked, 0 if not ---&#10;        var reworkValue = 0&#10;        var setupValue = 0&#10;        chkRework.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            reworkValue = if (isChecked) 1 else 0&#10;        }&#10;        chkSetup.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            setupValue = if (isChecked) 1 else 0&#10;        }&#10;&#10;        val postApi = RetrofitClient.retrofitPublic.create(PostNhatKyGiaCongApi::class.java)&#10;        btnSubmit.setOnClickListener {&#10;            // Prevent submit if any error message is shown&#10;            val dataError = &quot;Không lấy được dữ liệu&quot;&#10;            val serverError = &quot;Không lấy được dữ liệu&quot;&#10;            val errorFields = listOf(txtStaffInfo, txtMachineInfo, txtSerialInfo)&#10;            if (errorFields.any {&#10;                val text = it.text.toString()&#10;                text.contains(dataError, ignoreCase = true) || text.contains(serverError, ignoreCase = true)&#10;            }) {&#10;                Toast.makeText(this, &quot;Vui lòng kiểm tra lại thông tin&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;&#10;            val processNoForDto = txtProcessNo.text.toString().let { if (it.isBlank()) &quot; &quot; else it }&#10;&#10;            // Show immediate feedback and disable button&#10;            Toast.makeText(this, &quot;Dữ liệu đã được gửi&quot;, Toast.LENGTH_SHORT).show()&#10;            btnSubmit.isEnabled = false&#10;            txtSendStatus.visibility = View.VISIBLE&#10;            txtSendStatus.text = &quot;Đang xử lý...&quot;&#10;            txtSendStatus.setTextColor(resources.getColor(android.R.color.holo_orange_dark))&#10;&#10;            val dto = NhatKyGiaCongDto(&#10;                processNo = processNoForDto,&#10;                jobControlNo = edtJobNo.text.toString().trim(),&#10;                staffNo = edtStaffNo.text.toString().trim(),&#10;                mcName = edtMcName.text.toString().trim(),&#10;                note = edtGhiChu.text.toString().trim(),&#10;                proOrdNo = edtProOrdNo.text.toString().trim(),&#10;                serial = edtSerial.text.toString().trim(),&#10;                setup = chkSetup.isChecked,&#10;                rework = chkRework.isChecked,&#10;                qtyGood = edtDat.text.toString().toIntOrNull() ?: 0,&#10;                qtyReject = edtPhe.text.toString().toIntOrNull() ?: 0,&#10;                qtyRework = edtXuLy.text.toString().toIntOrNull() ?: 0&#10;            )&#10;            lifecycleScope.launch {&#10;                try {&#10;                    android.util.Log.d(&quot;POST_DTO&quot;, Gson().toJson(dto)) // Log the payload&#10;                    val response = postApi.postLog(dto)&#10;                    if (response.isSuccessful) {&#10;                        Toast.makeText(this@MachineLogActivity, &quot;Cập nhật thành công&quot;, Toast.LENGTH_SHORT).show()&#10;                        txtSendStatus.text = &quot;Cập nhật thành công&quot;&#10;                        txtSendStatus.setTextColor(resources.getColor(android.R.color.holo_green_dark))&#10;                    } else {&#10;                        val errorBody = response.errorBody()?.string()&#10;                        val errorMessage = &quot;Cập nhật thất bại ${response.code()} ${errorBody ?: &quot;&quot;}&quot;&#10;                        Toast.makeText(this@MachineLogActivity, errorMessage, Toast.LENGTH_LONG).show()&#10;                        txtSendStatus.text = errorMessage&#10;                        txtSendStatus.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                        android.util.Log.e(&quot;POST_ERROR&quot;, &quot;Code: ${response.code()} Body: $errorBody&quot;)&#10;                    }&#10;                } catch (e: Exception) {&#10;                    val errorMessage = &quot;Cập nhật thất bại: ${e.message}&quot;&#10;                    Toast.makeText(this@MachineLogActivity, errorMessage, Toast.LENGTH_SHORT).show()&#10;                    txtSendStatus.text = errorMessage&#10;                    txtSendStatus.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                    android.util.Log.e(&quot;POST_EXCEPTION&quot;, e.toString())&#10;                } finally {&#10;                    // Re-enable button after operation completes&#10;                    btnSubmit.isEnabled = true&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.lephucmfg&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.View&#10;import android.view.inputmethod.EditorInfo&#10;import android.view.inputmethod.InputMethodManager&#10;import android.widget.Button&#10;import android.widget.CheckBox&#10;import android.widget.EditText&#10;import android.widget.LinearLayout&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.lifecycle.lifecycleScope&#10;import com.example.lephucmfg.network.RetrofitClient&#10;import com.example.lephucmfg.utils.LoadingStates&#10;import com.example.lephucmfg.utils.StaffPreferences&#10;import com.google.gson.annotations.SerializedName&#10;import kotlinx.coroutines.launch&#10;import okhttp3.ResponseBody&#10;import com.google.gson.Gson&#10;import com.google.gson.JsonElement&#10;import com.google.gson.JsonParser&#10;import retrofit2.Call&#10;import retrofit2.Callback&#10;import retrofit2.Response&#10;import retrofit2.http.GET&#10;import retrofit2.http.Path&#10;import retrofit2.http.POST&#10;import retrofit2.http.Body&#10;&#10;class MachineLogActivity : AppCompatActivity() {&#10;&#10;    // Add StaffPreferences instance&#10;    private lateinit var staffPreferences: StaffPreferences&#10;&#10;    // --- API interface for fetching staff info (&quot;Thợ&quot;) ---&#10;    interface StaffApi {&#10;        @GET(&quot;/api/GetStaff/{staffNo}&quot;)&#10;        suspend fun getStaff(@Path(&quot;staffNo&quot;) staffNo: Int): StaffInfo?&#10;    }&#10;    // --- Data class for staff info ---&#10;    data class StaffInfo(&#10;        @SerializedName(&quot;fullName&quot;) val fullName: String?,&#10;        @SerializedName(&quot;workJob&quot;) val workJob: String?,&#10;        @SerializedName(&quot;workPlace&quot;) val workPlace: String?&#10;    )&#10;    // --- API interface for fetching machine info (&quot;Mã máy&quot;) ---&#10;    interface MachineApi {&#10;        @GET(&quot;/api/GetMachine/{mcName}&quot;)&#10;        suspend fun getMachine(@Path(&quot;mcName&quot;) mcName: String): MachineInfo?&#10;    }&#10;    // --- Data class for machine info ---&#10;    data class MachineInfo(&#10;        @SerializedName(&quot;model&quot;) val model: String?,&#10;        @SerializedName(&quot;status&quot;) val status: String?&#10;    )&#10;    // --- API interface for fetching production order (LSX/ProOrdNo) ---&#10;    interface ProOrdApi {&#10;        @GET(&quot;/api/Laylsx/{JobControlNo}&quot;)&#10;        suspend fun getProOrd(@Path(&quot;JobControlNo&quot;) jobControlNo: String): ResponseBody&#10;    }&#10;    // --- Data class for production order DTO ---&#10;    data class ProOrdDto(&#10;        @SerializedName(&quot;jobControlNo&quot;) val jobControlNo: String?&#10;    )&#10;    // --- API interface for fetching serial info (GetSerial) ---&#10;    interface SerialApi {&#10;        @GET(&quot;/api/GetSerial/{proOrdNo}&quot;)&#10;        suspend fun getSerial(@Path(&quot;proOrdNo&quot;) proOrdNo: String): List&lt;SerialDto&gt;&#10;    }&#10;    // --- Data class for serial info ---&#10;    data class SerialDto(&#10;        @SerializedName(&quot;serial&quot;) val serial: String?&#10;    )&#10;    // --- API interface for fetching process number (ProcessNo) ---&#10;    interface ProcessNoApi {&#10;        @GET(&quot;/api/GetProcessNoChuaKetThuc/{StaffNo}/{McName}&quot;)&#10;        suspend fun getProcessNo(@Path(&quot;StaffNo&quot;) staffNo: String, @Path(&quot;McName&quot;) mcName: String): ProcessNoDto&#10;    }&#10;    data class ProcessNoDto(&#10;        @SerializedName(&quot;processNo&quot;) val processNo: String?,&#10;        @SerializedName(&quot;note&quot;) val note: String?,&#10;        @SerializedName(&quot;serial2&quot;) val serial2: String?,&#10;        @SerializedName(&quot;proOrdNo2&quot;) val proOrdNo2: String?&#10;    )&#10;    // --- API interface for posting machine log ---&#10;    interface PostNhatKyGiaCongApi {&#10;        @POST(&quot;/api/postNhatKyGiaCong&quot;)&#10;        suspend fun postLog(@Body body: NhatKyGiaCongDto): retrofit2.Response&lt;Void&gt;&#10;    }&#10;    data class NhatKyGiaCongDto(&#10;        val processNo: String?,&#10;        val jobControlNo: String?,&#10;        val staffNo: String?,&#10;        val mcName: String?,&#10;        val note: String?,&#10;        val proOrdNo: String?,&#10;        val serial: String?,&#10;        val setup: Boolean,&#10;        val rework: Boolean,&#10;        val qtyGood: Int,&#10;        val qtyReject: Int,&#10;        val qtyRework: Int&#10;    )&#10;&#10;    // Shared function to process machine and staff data&#10;    private suspend fun processMachineAndStaff() {&#10;        val edtStaffNo = findViewById&lt;EditText&gt;(R.id.edtStaffNo)&#10;        val edtMcName = findViewById&lt;EditText&gt;(R.id.edtMcName)&#10;        val txtMachineInfo = findViewById&lt;TextView&gt;(R.id.txtMachineInfo)&#10;        val txtProcessNo = findViewById&lt;TextView&gt;(R.id.txtProcessNo)&#10;        val txtMachineRunning = findViewById&lt;TextView&gt;(R.id.txtMachineRunning)&#10;        val layoutSmallEdits = findViewById&lt;LinearLayout&gt;(R.id.layoutSmallEdits)&#10;        val edtJobNo = findViewById&lt;EditText&gt;(R.id.edtJobNo)&#10;        val edtProOrdNo = findViewById&lt;EditText&gt;(R.id.edtProOrdNo)&#10;        val edtSerial = findViewById&lt;EditText&gt;(R.id.edtSerial)&#10;        val edtGhiChu = findViewById&lt;EditText&gt;(R.id.edtGhiChu)&#10;        val layoutProOrdNoResults = findViewById&lt;android.widget.GridLayout&gt;(R.id.layoutProOrdNoResults)&#10;        val machineApi = RetrofitClient.retrofitPublic.create(MachineApi::class.java)&#10;&#10;        val staffNo = edtStaffNo.text.toString().trim()&#10;        val mcName = edtMcName.text.toString().trim()&#10;&#10;        // If machine code is empty, clear everything and return&#10;        if (mcName.isEmpty()) {&#10;            txtMachineInfo.text = &quot;&quot;&#10;            txtProcessNo.text = &quot;&quot;&#10;            txtMachineRunning.visibility = View.GONE&#10;            layoutSmallEdits.visibility = View.GONE&#10;            edtJobNo.isEnabled = true&#10;            edtProOrdNo.isEnabled = true&#10;            edtSerial.isEnabled = true&#10;            edtGhiChu.isEnabled = true&#10;            updateSubmitButtonState()&#10;            return&#10;        }&#10;&#10;        // Show loading indicator&#10;        txtMachineInfo.text = LoadingStates.LOADING&#10;        txtMachineInfo.setTextColor(LoadingStates.getLoadingColor(resources))&#10;&#10;        var machineModel: String? = null&#10;        var machineStatus: String? = null&#10;&#10;        // Fetch machine info&#10;        try {&#10;            val info = machineApi.getMachine(mcName)&#10;            if (info != null) {&#10;                txtMachineInfo.text = listOfNotNull(info.model, info.status).joinToString(&quot;, &quot;)&#10;                txtMachineInfo.setTextColor(resources.getColor(android.R.color.holo_blue_dark))&#10;                machineModel = info.model&#10;                machineStatus = info.status&#10;            } else {&#10;                txtMachineInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;                txtMachineInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;            }&#10;        } catch (e: Exception) {&#10;            txtMachineInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;            txtMachineInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;        }&#10;&#10;        // Fetch ProcessNo if both staff and machine are available&#10;        var processNoValue: String? = null&#10;        var processNoDto: ProcessNoDto? = null&#10;&#10;        if (staffNo.isNotEmpty()) {&#10;            try {&#10;                val processNoApi = RetrofitClient.retrofitPublic.create(ProcessNoApi::class.java)&#10;                processNoDto = processNoApi.getProcessNo(staffNo, mcName)&#10;                processNoValue = processNoDto.processNo?.trim()&#10;                txtProcessNo.text = processNoValue ?: &quot;&quot;&#10;&#10;                // If we have a processNo, show &quot;Máy đang chạy&quot; and auto-fill fields&#10;                if (!processNoValue.isNullOrBlank()) {&#10;                    txtMachineRunning.visibility = View.VISIBLE&#10;                    txtMachineRunning.text = &quot;Máy đang chạy&quot;&#10;                    txtMachineRunning.setTextColor(resources.getColor(android.R.color.holo_green_dark))&#10;                    txtMachineRunning.setTypeface(null, android.graphics.Typeface.NORMAL)&#10;                    layoutSmallEdits.visibility = View.VISIBLE&#10;&#10;                    // Auto-fill fields with data from processNoDto&#10;                    if (!machineModel.isNullOrBlank()) {&#10;                        edtJobNo.setText(machineModel)&#10;                        edtJobNo.isEnabled = false&#10;                    }&#10;&#10;                    if (!processNoDto.proOrdNo2.isNullOrBlank()) {&#10;                        edtProOrdNo.setText(processNoDto.proOrdNo2)&#10;                        edtProOrdNo.requestFocus()&#10;                        edtProOrdNo.clearFocus()&#10;                        edtProOrdNo.isEnabled = false&#10;                    }&#10;&#10;                    if (!processNoDto.serial2.isNullOrBlank()) {&#10;                        edtSerial.setText(processNoDto.serial2)&#10;                        edtSerial.isEnabled = true&#10;                    }&#10;&#10;                    if (!processNoDto.note.isNullOrBlank()) {&#10;                        edtGhiChu.setText(processNoDto.note)&#10;                        edtGhiChu.isEnabled = true&#10;                    }&#10;&#10;                    // Hide keyboard and clear any remaining focus&#10;                    val imm = getSystemService(INPUT_METHOD_SERVICE) as? InputMethodManager&#10;                    imm?.hideSoftInputFromWindow(edtGhiChu.windowToken, 0)&#10;                    layoutProOrdNoResults.removeAllViews()&#10;&#10;                    updateSubmitButtonState()&#10;                    return&#10;                }&#10;            } catch (e: Exception) {&#10;                txtProcessNo.text = &quot;&quot;&#10;            }&#10;        } else {&#10;            txtProcessNo.text = &quot;&quot;&#10;        }&#10;&#10;        // Show machine status based on machine status only&#10;        when {&#10;            machineStatus?.contains(&quot;Status: Ready&quot;, ignoreCase = true) == true -&gt; {&#10;                txtMachineRunning.visibility = View.VISIBLE&#10;                txtMachineRunning.text = &quot;Đang chờ việc&quot;&#10;                txtMachineRunning.setTextColor(resources.getColor(android.R.color.holo_orange_dark))&#10;                txtMachineRunning.setTypeface(null, android.graphics.Typeface.NORMAL)&#10;                layoutSmallEdits.visibility = View.GONE&#10;            }&#10;            machineStatus?.contains(&quot;Status: Processing&quot;, ignoreCase = true) == true -&gt; {&#10;                txtMachineRunning.visibility = View.VISIBLE&#10;                txtMachineRunning.text = &quot;Đang gia công&quot;&#10;                txtMachineRunning.setTextColor(resources.getColor(android.R.color.holo_green_dark))&#10;                txtMachineRunning.setTypeface(null, android.graphics.Typeface.BOLD)&#10;                layoutSmallEdits.visibility = View.GONE&#10;            }&#10;            machineStatus?.contains(&quot;Status: Maintenance&quot;, ignoreCase = true) == true -&gt; {&#10;                txtMachineRunning.visibility = View.VISIBLE&#10;                txtMachineRunning.text = &quot;Đang bảo trì&quot;&#10;                txtMachineRunning.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                txtMachineRunning.setTypeface(null, android.graphics.Typeface.NORMAL)&#10;                layoutSmallEdits.visibility = View.GONE&#10;            }&#10;            machineStatus?.contains(&quot;Status: BeingSetup&quot;, ignoreCase = true) == true -&gt; {&#10;                txtMachineRunning.visibility = View.VISIBLE&#10;                txtMachineRunning.text = &quot;Đang setup&quot;&#10;                txtMachineRunning.setTextColor(resources.getColor(android.R.color.holo_orange_dark))&#10;                txtMachineRunning.setTypeface(null, android.graphics.Typeface.NORMAL)&#10;                layoutSmallEdits.visibility = View.GONE&#10;            }&#10;            machineStatus?.contains(&quot;Status: Damage&quot;, ignoreCase = true) == true -&gt; {&#10;                txtMachineRunning.visibility = View.VISIBLE&#10;                txtMachineRunning.text = &quot;Báo hư chờ sửa&quot;&#10;                txtMachineRunning.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                txtMachineRunning.setTypeface(null, android.graphics.Typeface.NORMAL)&#10;                layoutSmallEdits.visibility = View.GONE&#10;            }&#10;            else -&gt; {&#10;                txtMachineRunning.visibility = View.GONE&#10;                layoutSmallEdits.visibility = View.GONE&#10;            }&#10;        }&#10;&#10;        // Re-enable editing when machine is not running for this user&#10;        edtJobNo.isEnabled = true&#10;        edtProOrdNo.isEnabled = true&#10;        edtSerial.isEnabled = true&#10;        edtGhiChu.isEnabled = true&#10;&#10;        updateSubmitButtonState()&#10;    }&#10;&#10;    // Function to check machine status and control submit button&#10;    private fun updateSubmitButtonState() {&#10;        val btnSubmit = findViewById&lt;Button&gt;(R.id.btnSubmit)&#10;        val txtMachineInfo = findViewById&lt;TextView&gt;(R.id.txtMachineInfo)&#10;        val txtMachineRunning = findViewById&lt;TextView&gt;(R.id.txtMachineRunning)&#10;&#10;        val machineInfoText = txtMachineInfo.text.toString()&#10;        val machineRunningText = txtMachineRunning.text.toString()&#10;        val isMachineRunningVisible = txtMachineRunning.visibility == View.VISIBLE&#10;&#10;        // Check conditions that should block submit&#10;        val hasProcessingStatus = machineInfoText.contains(&quot;Status: Processing&quot;, ignoreCase = true)&#10;        val isShowingProcessingForOther = isMachineRunningVisible &amp;&amp; machineRunningText == &quot;Đang gia công&quot;&#10;        val hasMaintenanceStatus = machineInfoText.contains(&quot;Status: Maintenance&quot;, ignoreCase = true)&#10;        val isShowingMaintenance = isMachineRunningVisible &amp;&amp; machineRunningText == &quot;Đang bảo trì&quot;&#10;        val hasBeingSetupStatus = machineInfoText.contains(&quot;Status: BeingSetup&quot;, ignoreCase = true)&#10;        val isShowingBeingSetup = isMachineRunningVisible &amp;&amp; machineRunningText == &quot;Đang setup&quot;&#10;        val hasDamageStatus = machineInfoText.contains(&quot;Status: Damage&quot;, ignoreCase = true)&#10;        val isShowingDamage = isMachineRunningVisible &amp;&amp; machineRunningText == &quot;Báo hư chờ sửa&quot;&#10;&#10;        val shouldBlockSubmit = (hasProcessingStatus &amp;&amp; isShowingProcessingForOther) ||&#10;                               (hasMaintenanceStatus &amp;&amp; isShowingMaintenance) ||&#10;                               (hasBeingSetupStatus &amp;&amp; isShowingBeingSetup) ||&#10;                               (hasDamageStatus &amp;&amp; isShowingDamage)&#10;&#10;        if (shouldBlockSubmit) {&#10;            btnSubmit.isEnabled = false&#10;            btnSubmit.alpha = 0.5f // Gray out the button&#10;        } else {&#10;            btnSubmit.isEnabled = true&#10;            btnSubmit.alpha = 1.0f // Restore normal appearance&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_machine_log)&#10;&#10;        // Initialize StaffPreferences&#10;        staffPreferences = StaffPreferences(this)&#10;&#10;        // --- UI references for &quot;Thợ&quot; (Staff) block ---&#10;        val edtStaffNo = findViewById&lt;EditText&gt;(R.id.edtStaffNo)&#10;        val txtStaffInfo = findViewById&lt;TextView&gt;(R.id.txtStaffInfo)&#10;        val api = RetrofitClient.retrofitPublic.create(StaffApi::class.java)&#10;&#10;        // Load saved staff number and info on startup&#10;        val savedStaffNumber = staffPreferences.getStaffNumber()&#10;        val savedStaffInfo = staffPreferences.getStaffInfo()&#10;        &#10;        if (savedStaffNumber.isNotEmpty()) {&#10;            edtStaffNo.setText(savedStaffNumber)&#10;            if (savedStaffInfo.isNotEmpty()) {&#10;                txtStaffInfo.text = savedStaffInfo&#10;                txtStaffInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;            }&#10;            // Auto-call API with saved staff number&#10;            autoCallStaffApi(savedStaffNumber.toIntOrNull() ?: 0)&#10;        }&#10;&#10;        // --- UI references for &quot;Mã máy&quot; (Machine) block ---&#10;        val edtMcName = findViewById&lt;EditText&gt;(R.id.edtMcName)&#10;        val txtMachineInfo = findViewById&lt;TextView&gt;(R.id.txtMachineInfo)&#10;        val txtProcessNo = findViewById&lt;TextView&gt;(R.id.txtProcessNo)&#10;        val txtMachineRunning = findViewById&lt;TextView&gt;(R.id.txtMachineRunning)&#10;&#10;        // --- UI reference for serial info below LSX (ProOrdNo) ---&#10;        val edtProOrdNo = findViewById&lt;EditText&gt;(R.id.edtProOrdNo)&#10;        val txtSerialInfo = findViewById&lt;TextView&gt;(R.id.txtSerialInfo)&#10;        val txtJobInfo = findViewById&lt;TextView&gt;(R.id.txtJobInfo)&#10;        val txtSerialStatus = findViewById&lt;TextView&gt;(R.id.txtSerialStatus)&#10;        val txtNoteStatus = findViewById&lt;TextView&gt;(R.id.txtNoteStatus)&#10;        val machineApi = RetrofitClient.retrofitPublic.create(MachineApi::class.java)&#10;        val serialApi = RetrofitClient.retrofitPublic.create(SerialApi::class.java)&#10;        val proOrdApi = RetrofitClient.retrofitPublic.create(ProOrdApi::class.java)&#10;        var processNoValue: String? = null&#10;&#10;        // --- Declare layoutSmallEdits reference ---&#10;        val layoutSmallEdits = findViewById&lt;LinearLayout&gt;(R.id.layoutSmallEdits)&#10;&#10;        // --- UI references for LSX (ProOrdNo) and result grid block ---&#10;        val edtJobNo = findViewById&lt;EditText&gt;(R.id.edtJobNo)&#10;        val layoutProOrdNoResults = findViewById&lt;android.widget.GridLayout&gt;(R.id.layoutProOrdNoResults)&#10;&#10;        val edtSerial = findViewById&lt;EditText&gt;(R.id.edtSerial)&#10;        val btnScan = findViewById&lt;Button&gt;(R.id.btnScan)&#10;&#10;        // --- UI references for small quantity EditTexts ---&#10;        val edtDat = findViewById&lt;EditText&gt;(R.id.edtDat)&#10;        val edtPhe = findViewById&lt;EditText&gt;(R.id.edtPhe)&#10;        val edtXuLy = findViewById&lt;EditText&gt;(R.id.edtXuLy)&#10;&#10;        // --- UI references for note field and status ---&#10;        val edtGhiChu = findViewById&lt;EditText&gt;(R.id.edtGhiChu)&#10;        val txtSendStatus = findViewById&lt;TextView&gt;(R.id.txtSendStatus)&#10;        val btnSubmit = findViewById&lt;Button&gt;(R.id.btnSubmit)&#10;&#10;        // --- Setup IME action listeners for all EditTexts ---&#10;        edtStaffNo.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtMcName.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtMcName.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtJobNo.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtJobNo.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtProOrdNo.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtProOrdNo.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtSerial.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtSerial.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                if (layoutSmallEdits.visibility == View.VISIBLE) {&#10;                    edtDat.requestFocus()&#10;                } else {&#10;                    edtGhiChu.requestFocus()&#10;                }&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtDat.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtPhe.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtPhe.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtXuLy.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtXuLy.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtGhiChu.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtGhiChu.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_DONE) {&#10;                edtGhiChu.clearFocus()&#10;                val imm = getSystemService(INPUT_METHOD_SERVICE) as? InputMethodManager&#10;                imm?.hideSoftInputFromWindow(edtGhiChu.windowToken, 0)&#10;                true&#10;            } else false&#10;        }&#10;&#10;        // --- Block for handling Staff (&quot;Thợ&quot;) input and validation ---&#10;        edtStaffNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val staffNoStr = edtStaffNo.text.toString().trim()&#10;                &#10;                // Save staff number to SharedPreferences when user finishes editing&#10;                if (staffNoStr.isNotEmpty()) {&#10;                    staffPreferences.saveStaffNumber(staffNoStr)&#10;                    &#10;                    try {&#10;                        val staffNo = staffNoStr.toInt()&#10;                        // Show loading indicator using LoadingStates&#10;                        txtStaffInfo.text = LoadingStates.LOADING&#10;                        txtStaffInfo.setTextColor(LoadingStates.getLoadingColor(resources))&#10;&#10;                        // Fetch staff info asynchronously&#10;                        lifecycleScope.launch {&#10;                            try {&#10;                                val info = api.getStaff(staffNo)&#10;                                if (info != null) {&#10;                                    // Display staff info if found - dark red color for valid and bold&#10;                                    val staffInfoText = listOfNotNull(info.fullName, info.workJob, info.workPlace).joinToString(&quot;, &quot;)&#10;                                    txtStaffInfo.text = staffInfoText&#10;                                    txtStaffInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                                    &#10;                                    // Save staff info to SharedPreferences&#10;                                    staffPreferences.saveStaffInfo(staffInfoText)&#10;                                } else {&#10;                                    // Show error if staff not found - API responded but returned null (invalid)&#10;                                    txtStaffInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;                                    txtStaffInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                                    staffPreferences.saveStaffInfo(&quot;&quot;)&#10;                                }&#10;                            } catch (e: Exception) {&#10;                                // Show server connection error if API call fails&#10;                                txtStaffInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;                                txtStaffInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                                staffPreferences.saveStaffInfo(&quot;&quot;)&#10;                            }&#10;&#10;                            // Call shared function to process machine and staff combination&#10;                            processMachineAndStaff()&#10;                        }&#10;                    } catch (e: NumberFormatException) {&#10;                        // Show error if input is not a number&#10;                        txtStaffInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;                        txtStaffInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                        staffPreferences.saveStaffInfo(&quot;&quot;)&#10;                    }&#10;                } else {&#10;                    // Clear staff info if input is empty&#10;                    txtStaffInfo.text = &quot;&quot;&#10;                    // Clear saved staff data if field is emptied&#10;                    staffPreferences.clearStaffPreferences()&#10;                    // Call shared function to clear machine processing&#10;                    lifecycleScope.launch {&#10;                        processMachineAndStaff()&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // --- Block for handling Machine Code (&quot;Mã máy&quot;) input and validation ---&#10;        edtMcName.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                // Call shared function to process machine and staff combination&#10;                lifecycleScope.launch {&#10;                    processMachineAndStaff()&#10;                }&#10;            }&#10;        }&#10;&#10;        // --- Block for handling LSX (ProOrdNo) input and displaying results in a grid ---&#10;        // Goal 2: Move the auto-click logic here when processNo is blank&#10;        edtJobNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val jobNo = edtJobNo.text.toString().trim()&#10;                if (jobNo.isNotEmpty()) {&#10;                    // Show loading indicator&#10;                    txtJobInfo.visibility = View.VISIBLE&#10;                    txtJobInfo.text = LoadingStates.LOADING&#10;                    txtJobInfo.setTextColor(LoadingStates.getLoadingColor(resources))&#10;&#10;                    // Fetch production order list asynchronously&#10;                    lifecycleScope.launch {&#10;                        try {&#10;                            val responseBody = proOrdApi.getProOrd(jobNo)&#10;                            val json = responseBody.string()&#10;                            val gson = Gson()&#10;                            val jsonElement = JsonParser.parseString(json)&#10;                            val proOrdList = when {&#10;                                jsonElement.isJsonArray -&gt; jsonElement.asJsonArray.mapNotNull {&#10;                                    gson.fromJson(it, ProOrdDto::class.java).jobControlNo&#10;                                }&#10;                                jsonElement.isJsonObject -&gt; listOfNotNull(gson.fromJson(jsonElement, ProOrdDto::class.java).jobControlNo)&#10;                                else -&gt; emptyList()&#10;                            }&#10;&#10;                            // Hide loading indicator&#10;                            txtJobInfo.visibility = View.GONE&#10;&#10;                            // Clear previous results in the grid&#10;                            layoutProOrdNoResults.removeAllViews()&#10;&#10;                            // Check if machine is running first - if so, don't show any buttons&#10;                            val currentProcessNo = txtProcessNo.text.toString().trim()&#10;                            val isMachineRunning = !currentProcessNo.isBlank()&#10;&#10;                            if (isMachineRunning) {&#10;                                // Machine is running - don't show any buttons, just clear and return&#10;                                return@launch&#10;                            }&#10;&#10;                            if (proOrdList.isNotEmpty()) {&#10;                                // Check if machine is NOT running (processNo is blank)&#10;                                val shouldAutoClick = currentProcessNo.isBlank()&#10;&#10;                                // Auto-click if only one result and machine is not running&#10;                                if (proOrdList.size == 1 &amp;&amp; shouldAutoClick) {&#10;                                    val singleJobControlNo = proOrdList.first()&#10;                                    edtProOrdNo.setText(singleJobControlNo)&#10;                                    edtProOrdNo.requestFocus()&#10;                                    edtProOrdNo.clearFocus()&#10;                                } else {&#10;                                    // Multiple results or machine is running, show clickable boxes&#10;                                    proOrdList.forEach { jobControlNo -&gt;&#10;                                        val tv = TextView(this@MachineLogActivity)&#10;                                        tv.text = jobControlNo&#10;                                        tv.setPadding(12, 8, 12, 8)&#10;                                        tv.setBackgroundResource(R.drawable.clickable_button_background)&#10;                                        tv.setTextColor(resources.getColor(android.R.color.white))&#10;                                        tv.textSize = 14f&#10;                                        tv.gravity = android.view.Gravity.CENTER&#10;&#10;                                        val params = android.widget.GridLayout.LayoutParams()&#10;                                        params.setMargins(4, 4, 4, 4)&#10;                                        params.width = android.widget.GridLayout.LayoutParams.WRAP_CONTENT&#10;                                        params.height = android.widget.GridLayout.LayoutParams.WRAP_CONTENT&#10;                                        tv.layoutParams = params&#10;&#10;                                        tv.setOnClickListener {&#10;                                            edtProOrdNo.setText(jobControlNo)&#10;                                            edtProOrdNo.requestFocus()&#10;                                            edtProOrdNo.clearFocus()&#10;                                            val imm = getSystemService(INPUT_METHOD_SERVICE) as? InputMethodManager&#10;                                            imm?.hideSoftInputFromWindow(edtProOrdNo.windowToken, 0)&#10;                                        }&#10;                                        layoutProOrdNoResults.addView(tv)&#10;                                    }&#10;                                }&#10;                            } else {&#10;                                // Show error if no results found&#10;                                val tv = TextView(this@MachineLogActivity)&#10;                                tv.text = &quot;Không lấy được dữ liệu&quot;&#10;                                tv.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                                layoutProOrdNoResults.addView(tv)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            // Hide loading and show error if API call fails&#10;                            txtJobInfo.visibility = View.GONE&#10;                            layoutProOrdNoResults.removeAllViews()&#10;                            val tv = TextView(this@MachineLogActivity)&#10;                            tv.text = &quot;Không lấy được dữ liệu&quot;&#10;                            tv.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                            layoutProOrdNoResults.addView(tv)&#10;                        }&#10;                    }&#10;                } else {&#10;                    // Clear grid and hide loading if input is empty&#10;                    layoutProOrdNoResults.removeAllViews()&#10;                    txtJobInfo.visibility = View.GONE&#10;                }&#10;            }&#10;        }&#10;&#10;        // --- Block for handling LSX (ProOrdNo) serial info fetching ---&#10;        edtProOrdNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val proOrdNo = edtProOrdNo.text.toString().trim()&#10;                if (proOrdNo.isNotEmpty()) {&#10;                    lifecycleScope.launch {&#10;                        try {&#10;                            val serialList = serialApi.getSerial(proOrdNo)&#10;                            if (serialList.isNotEmpty()) {&#10;                                txtSerialInfo.text = serialList.joinToString(&quot;, &quot;) { it.serial ?: &quot;&quot; }&#10;                            } else {&#10;                                txtSerialInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            txtSerialInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;                        }&#10;                    }&#10;                } else {&#10;                    txtSerialInfo.text = &quot;&quot;&#10;                }&#10;            }&#10;        }&#10;&#10;        // Map QR keys to EditText IDs (future-proof, add new keys here)&#10;        val editFields = mapOf(&#10;            &quot;staffNo&quot; to edtStaffNo,&#10;            &quot;mcName&quot; to edtMcName,&#10;            &quot;jobNo&quot; to edtJobNo,&#10;            &quot;proOrdNo&quot; to edtProOrdNo,&#10;            &quot;serial&quot; to edtSerial,&#10;            // fallback: also allow direct EditText id mapping&#10;            &quot;edtStaffNo&quot; to edtStaffNo,&#10;            &quot;edtMcName&quot; to edtMcName,&#10;            &quot;edtJobNo&quot; to edtJobNo,&#10;            &quot;edtProOrdNo&quot; to edtProOrdNo,&#10;            &quot;edtSerial&quot; to edtSerial&#10;        )&#10;&#10;        // Register ActivityResultLauncher for QR scan (must be defined before ScanHelper)&#10;        var scanHelper: ScanHelper? = null&#10;        val scanLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result -&gt;&#10;            if (result.resultCode == RESULT_OK) {&#10;                val intent = result.data&#10;                val qrText = intent?.getStringExtra(&quot;SCAN_RESULT&quot;)&#10;                    ?: intent?.getStringExtra(&quot;SCAN_RESULT_ORIGINAL&quot;)&#10;                    ?: intent?.getStringExtra(&quot;SCAN_RESULT_RAW&quot;)&#10;                if (!qrText.isNullOrEmpty()) {&#10;                    scanHelper?.handleScanResult(qrText)&#10;                }&#10;            }&#10;        }&#10;&#10;        // Setup ScanHelper (button click launches scan)&#10;        scanHelper = ScanHelper(this, scanLauncher, editFields, btnScan)&#10;&#10;        // --- UI references for checkboxes (Rework, Setup) ---&#10;        val chkRework = findViewById&lt;CheckBox&gt;(R.id.chkRework)&#10;        val chkSetup = findViewById&lt;CheckBox&gt;(R.id.chkSetup)&#10;        // --- Checkbox value mapping: 1 if checked, 0 if not ---&#10;        var reworkValue = 0&#10;        var setupValue = 0&#10;        chkRework.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            reworkValue = if (isChecked) 1 else 0&#10;        }&#10;        chkSetup.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            setupValue = if (isChecked) 1 else 0&#10;        }&#10;&#10;        val postApi = RetrofitClient.retrofitPublic.create(PostNhatKyGiaCongApi::class.java)&#10;        btnSubmit.setOnClickListener {&#10;            // Prevent submit if any error message is shown&#10;            val dataError = &quot;Không lấy được dữ liệu&quot;&#10;            val serverError = &quot;Không lấy được dữ liệu&quot;&#10;            val errorFields = listOf(txtStaffInfo, txtMachineInfo, txtSerialInfo)&#10;            if (errorFields.any {&#10;                val text = it.text.toString()&#10;                text.contains(dataError, ignoreCase = true) || text.contains(serverError, ignoreCase = true)&#10;            }) {&#10;                Toast.makeText(this, &quot;Vui lòng kiểm tra lại thông tin&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;&#10;            val processNoForDto = txtProcessNo.text.toString().let { if (it.isBlank()) &quot; &quot; else it }&#10;&#10;            // Show immediate feedback and disable button&#10;            Toast.makeText(this, &quot;Dữ liệu đã được gửi&quot;, Toast.LENGTH_SHORT).show()&#10;            btnSubmit.isEnabled = false&#10;            txtSendStatus.visibility = View.VISIBLE&#10;            txtSendStatus.text = &quot;Đang xử lý...&quot;&#10;            txtSendStatus.setTextColor(resources.getColor(android.R.color.holo_orange_dark))&#10;&#10;            val dto = NhatKyGiaCongDto(&#10;                processNo = processNoForDto,&#10;                jobControlNo = edtJobNo.text.toString().trim(),&#10;                staffNo = edtStaffNo.text.toString().trim(),&#10;                mcName = edtMcName.text.toString().trim(),&#10;                note = edtGhiChu.text.toString().trim(),&#10;                proOrdNo = edtProOrdNo.text.toString().trim(),&#10;                serial = edtSerial.text.toString().trim(),&#10;                setup = chkSetup.isChecked,&#10;                rework = chkRework.isChecked,&#10;                qtyGood = edtDat.text.toString().toIntOrNull() ?: 0,&#10;                qtyReject = edtPhe.text.toString().toIntOrNull() ?: 0,&#10;                qtyRework = edtXuLy.text.toString().toIntOrNull() ?: 0&#10;            )&#10;            lifecycleScope.launch {&#10;                try {&#10;                    android.util.Log.d(&quot;POST_DTO&quot;, Gson().toJson(dto)) // Log the payload&#10;                    val response = postApi.postLog(dto)&#10;                    if (response.isSuccessful) {&#10;                        Toast.makeText(this@MachineLogActivity, &quot;Cập nhật thành công&quot;, Toast.LENGTH_SHORT).show()&#10;                        txtSendStatus.text = &quot;Cập nhật thành công&quot;&#10;                        txtSendStatus.setTextColor(resources.getColor(android.R.color.holo_green_dark))&#10;                    } else {&#10;                        val errorBody = response.errorBody()?.string()&#10;                        val errorMessage = &quot;Cập nhật thất bại ${response.code()} ${errorBody ?: &quot;&quot;}&quot;&#10;                        Toast.makeText(this@MachineLogActivity, errorMessage, Toast.LENGTH_LONG).show()&#10;                        txtSendStatus.text = errorMessage&#10;                        txtSendStatus.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                        android.util.Log.e(&quot;POST_ERROR&quot;, &quot;Code: ${response.code()} Body: $errorBody&quot;)&#10;                    }&#10;                } catch (e: Exception) {&#10;                    val errorMessage = &quot;Cập nhật thất bại: ${e.message}&quot;&#10;                    Toast.makeText(this@MachineLogActivity, errorMessage, Toast.LENGTH_SHORT).show()&#10;                    txtSendStatus.text = errorMessage&#10;                    txtSendStatus.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                    android.util.Log.e(&quot;POST_EXCEPTION&quot;, e.toString())&#10;                } finally {&#10;                    // Re-enable button after operation completes&#10;                    btnSubmit.isEnabled = true&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Auto-call staff API with saved staff number&#10;    private fun autoCallStaffApi(staffNo: Int) {&#10;        val txtStaffInfo = findViewById&lt;TextView&gt;(R.id.txtStaffInfo)&#10;        val api = RetrofitClient.retrofitPublic.create(StaffApi::class.java)&#10;&#10;        txtStaffInfo.text = LoadingStates.LOADING&#10;        txtStaffInfo.setTextColor(LoadingStates.getLoadingColor(resources))&#10;&#10;        lifecycleScope.launch {&#10;            try {&#10;                val info = api.getStaff(staffNo)&#10;                if (info != null) {&#10;                    val staffInfoText = listOfNotNull(info.fullName, info.workJob, info.workPlace).joinToString(&quot;, &quot;)&#10;                    txtStaffInfo.text = staffInfoText&#10;                    txtStaffInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                } else {&#10;                    txtStaffInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;                    txtStaffInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                }&#10;            } catch (_: Exception) {&#10;                txtStaffInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;                txtStaffInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/lephucmfg/MaterialLogActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/lephucmfg/MaterialLogActivity.kt" />
              <option name="originalContent" value="package com.example.lephucmfg&#10;&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.LinearLayout&#10;import android.widget.TextView&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.content.ContextCompat&#10;import androidx.lifecycle.lifecycleScope&#10;import com.example.lephucmfg.network.RetrofitClient&#10;import com.example.lephucmfg.utils.LoadingStates&#10;import com.example.lephucmfg.utils.StaffPreferences&#10;import com.google.gson.annotations.SerializedName&#10;import com.google.zxing.integration.android.IntentIntegrator&#10;import kotlinx.coroutines.launch&#10;import retrofit2.http.GET&#10;import retrofit2.http.Path&#10;&#10;class MaterialLogActivity : AppCompatActivity() {&#10;&#10;    // Add StaffPreferences instance&#10;    private lateinit var staffPreferences: StaffPreferences&#10;&#10;    // --- API interface for fetching staff info (&quot;Thợ&quot;) ---&#10;    interface StaffApi {&#10;        @GET(&quot;/api/GetStaff/{staffNo}&quot;)&#10;        suspend fun getStaff(@Path(&quot;staffNo&quot;) staffNo: Int): StaffInfo?&#10;    }&#10;&#10;    // --- API interface for fetching heat number info ---&#10;    interface HeatNoApi {&#10;        @GET(&quot;/api/GetInfoHeatNo/{HeatNo}&quot;)&#10;        suspend fun getHeatNoInfo(@Path(&quot;HeatNo&quot;) heatNo: String): List&lt;HeatNoInfo&gt;?&#10;    }&#10;&#10;    // --- API interface for fetching HeatNo from Production Order ---&#10;    interface GetHeatNoApi {&#10;        @GET(&quot;/api/GetHeatNo/{proOrdNo}&quot;)&#10;        suspend fun getHeatNo(@Path(&quot;proOrdNo&quot;) proOrdNo: String): GetHeatNoResponse?&#10;    }&#10;&#10;    // --- API interface for fetching input material info ---&#10;    interface InputMaterialApi {&#10;        @GET(&quot;/api/GetInputMaterial/{HeatNo}&quot;)&#10;        suspend fun getInputMaterial(@Path(&quot;HeatNo&quot;) heatNo: String): List&lt;InputMaterialInfo&gt;?&#10;    }&#10;&#10;    // --- API interface for posting material usage ---&#10;    interface PostMUsingApi {&#10;        @retrofit2.http.POST(&quot;/api/PostMUsing&quot;)&#10;        suspend fun postMaterialUsing(@retrofit2.http.Body data: PostMUsingDto): retrofit2.Response&lt;PostMUsingResponse&gt;&#10;    }&#10;&#10;    // --- API interface for posting material input ---&#10;    interface PostMInputApi {&#10;        @retrofit2.http.POST(&quot;/api/PostMInput&quot;)&#10;        suspend fun postMaterialInput(@retrofit2.http.Body data: PostMInputDto): retrofit2.Response&lt;PostMInputResponse&gt;&#10;    }&#10;&#10;    // --- Data class for staff info ---&#10;    data class StaffInfo(&#10;        @SerializedName(&quot;fullName&quot;) val fullName: String?,&#10;        @SerializedName(&quot;workJob&quot;) val workJob: String?,&#10;        @SerializedName(&quot;workPlace&quot;) val workPlace: String?&#10;    )&#10;&#10;    // --- Data class for GetHeatNo response ---&#10;    data class GetHeatNoResponse(&#10;        @SerializedName(&quot;heatNo&quot;) val heatNo: String?&#10;    )&#10;&#10;    // --- Data class for heat number info ---&#10;    data class HeatNoInfo(&#10;        @SerializedName(&quot;material&quot;) val material: String?,&#10;        @SerializedName(&quot;existQty&quot;) val existQty: Int?,&#10;        @SerializedName(&quot;inpSize1&quot;) val inpSize1: String?,&#10;        @SerializedName(&quot;inpSize2&quot;) val inpSize2: String?,&#10;        @SerializedName(&quot;qty&quot;) val qty: Int?,&#10;        @SerializedName(&quot;notes&quot;) val notes: String?,&#10;        @SerializedName(&quot;matIID&quot;) val matIID: String?&#10;    )&#10;&#10;    // --- Data class for input material info ---&#10;    data class InputMaterialInfo(&#10;        @SerializedName(&quot;material&quot;) val material: String?,&#10;        @SerializedName(&quot;matPONo&quot;) val matPONo: String?&#10;    )&#10;&#10;    // --- Data class for POST request ---&#10;    data class PostMUsingDto(&#10;        @SerializedName(&quot;staffNo&quot;) val staffNo: Int,&#10;        @SerializedName(&quot;matIID&quot;) val matIID: String,&#10;        @SerializedName(&quot;matQty&quot;) val matQty: Int,  // Changed from Float to Int&#10;        @SerializedName(&quot;partQty&quot;) val partQty: Int,&#10;        @SerializedName(&quot;jobNo&quot;) val jobNo: String,&#10;        @SerializedName(&quot;notes&quot;) val notes: String&#10;    )&#10;&#10;    // --- Data class for POST response ---&#10;    data class PostMUsingResponse(&#10;        @SerializedName(&quot;message&quot;) val message: String?&#10;    )&#10;&#10;    // --- Data class for POST request (Material Input) ---&#10;    data class PostMInputDto(&#10;        @SerializedName(&quot;staffNo&quot;) val staffNo: Int,&#10;        @SerializedName(&quot;heatNo&quot;) val heatNo: String,&#10;        @SerializedName(&quot;materialType&quot;) val materialType: String,&#10;        @SerializedName(&quot;newInpSize1&quot;) val newInpSize1: String,&#10;        @SerializedName(&quot;newInpSize2&quot;) val newInpSize2: String,&#10;        @SerializedName(&quot;warehouseArea&quot;) val warehouseArea: String,&#10;        @SerializedName(&quot;matQty&quot;) val matQty: Int&#10;    )&#10;&#10;    // --- Data class for POST response (Material Input) ---&#10;    data class PostMInputResponse(&#10;        @SerializedName(&quot;message&quot;) val message: String?&#10;    )&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_material_log)&#10;&#10;        // Initialize StaffPreferences&#10;        staffPreferences = StaffPreferences(this)&#10;&#10;        val edtStaffNo = findViewById&lt;EditText&gt;(R.id.edtStaffNo)&#10;        val txtStaffInfo = findViewById&lt;TextView&gt;(R.id.txtStaffInfo)&#10;        val edtProductionOrder = findViewById&lt;EditText&gt;(R.id.edtProductionOrder)&#10;        val edtHeatNo = findViewById&lt;EditText&gt;(R.id.edtHeatNo)&#10;        val txtHeatInfo = findViewById&lt;TextView&gt;(R.id.txtHeatInfo)&#10;        val btnScan = findViewById&lt;Button&gt;(R.id.btnScan)&#10;        val layoutHeatInfoButtons = findViewById&lt;LinearLayout&gt;(R.id.layoutHeatInfoButtons)&#10;        val txtSelectedMaterial = findViewById&lt;TextView&gt;(R.id.txtSelectedMaterial)&#10;&#10;        // Load saved staff number and info on startup&#10;        val savedStaffNumber = staffPreferences.getStaffNumber()&#10;        val savedStaffInfo = staffPreferences.getStaffInfo()&#10;&#10;        if (savedStaffNumber.isNotEmpty()) {&#10;            edtStaffNo.setText(savedStaffNumber)&#10;            if (savedStaffInfo.isNotEmpty()) {&#10;                txtStaffInfo.text = savedStaffInfo&#10;                txtStaffInfo.setTextColor(ContextCompat.getColor(this, android.R.color.holo_red_dark))&#10;            }&#10;            // Auto-call API with saved staff number&#10;            autoCallStaffApi(savedStaffNumber.toIntOrNull() ?: 0)&#10;        }&#10;&#10;        // New material type selection UI elements&#10;        val layoutMaterialTypeButtons = findViewById&lt;LinearLayout&gt;(R.id.layoutMaterialTypeButtons)&#10;        val btnTam = findViewById&lt;Button&gt;(R.id.btnTam)&#10;        val btnCay = findViewById&lt;Button&gt;(R.id.btnCay)&#10;        val btnOng = findViewById&lt;Button&gt;(R.id.btnOng)&#10;&#10;        // New size input fields&#10;        val txtSizeALabel = findViewById&lt;TextView&gt;(R.id.txtSizeALabel)&#10;        val edtSizeA = findViewById&lt;EditText&gt;(R.id.edtSizeA)&#10;        val txtSizeBLabel = findViewById&lt;TextView&gt;(R.id.txtSizeBLabel)&#10;        val edtSizeB = findViewById&lt;EditText&gt;(R.id.edtSizeB)&#10;        val txtSizeCLabel = findViewById&lt;TextView&gt;(R.id.txtSizeCLabel)&#10;        val edtSizeC = findViewById&lt;EditText&gt;(R.id.edtSizeC)&#10;&#10;        // Existing UI elements for Xuất phôi mode&#10;        val edtJobNo = findViewById&lt;EditText&gt;(R.id.edtJobNo)&#10;        val txtSize1Label = findViewById&lt;TextView&gt;(R.id.txtSize1Label)&#10;        val edtSize1 = findViewById&lt;EditText&gt;(R.id.edtSize1)&#10;        val txtOldSize1 = findViewById&lt;TextView&gt;(R.id.txtOldSize1)&#10;        val txtSize2Label = findViewById&lt;TextView&gt;(R.id.txtSize2Label)&#10;        val edtSize2 = findViewById&lt;EditText&gt;(R.id.edtSize2)&#10;        val txtOldSize2 = findViewById&lt;TextView&gt;(R.id.txtOldSize2)&#10;        val edtMatQty = findViewById&lt;EditText&gt;(R.id.edtMaterialQty)  // matQty for API consistency&#10;        val txtMatQtyLabel = findViewById&lt;TextView&gt;(R.id.txtOldMaterialQty)&#10;        val txtPartQtyLabel = findViewById&lt;TextView&gt;(R.id.txtPartQtyLabel)&#10;        val edtPartQty = findViewById&lt;EditText&gt;(R.id.edtPartQty)&#10;        val edtNotes = findViewById&lt;EditText&gt;(R.id.edtNotes)&#10;        val edtWarehouseArea = findViewById&lt;EditText&gt;(R.id.edtWarehouseArea)&#10;        val edtMatQtyInput = findViewById&lt;EditText&gt;(R.id.edtMatQty)  // For Nhập phôi mode&#10;        val btnXuatHang = findViewById&lt;Button&gt;(R.id.btnXuatHang)&#10;        val btnNhapHang = findViewById&lt;Button&gt;(R.id.btnNhapHang)&#10;        val btnXuatHangTop = findViewById&lt;Button&gt;(R.id.btnXuatHangTop)&#10;&#10;        // Track which mode is selected&#10;        var isXuatHangModeSelected = false&#10;        var isNhapHangModeSelected = false&#10;        var selectedMaterialType = &quot;&quot; // &quot;TẤM&quot;, &quot;CÂY&quot;, or &quot;ỐNG&quot; - UI helper only&#10;        var selectedMatIID = &quot;&quot; // Store the selected Material Input ID for POST function&#10;        var actualMaterialName = &quot;&quot; // Store the actual material name from API for POST function&#10;&#10;        val staffApi = RetrofitClient.retrofitPublic.create(StaffApi::class.java)&#10;        val heatNoApi = RetrofitClient.retrofitPublic.create(HeatNoApi::class.java)&#10;        val getHeatNoApi = RetrofitClient.retrofitPublic.create(GetHeatNoApi::class.java)&#10;        val inputMaterialApi = RetrofitClient.retrofitPublic.create(InputMaterialApi::class.java)&#10;        val postMUsingApi = RetrofitClient.retrofitPublic.create(PostMUsingApi::class.java)&#10;        val postMInputApi = RetrofitClient.retrofitPublic.create(PostMInputApi::class.java)&#10;&#10;        // --- QR Scan integration ---&#10;        val editFields = mapOf(&#10;            &quot;staffNo&quot; to edtStaffNo,&#10;            &quot;heatno&quot; to edtHeatNo,&#10;            // fallback: also allow direct EditText id mapping&#10;            &quot;edtStaffNo&quot; to edtStaffNo,&#10;            &quot;edtHeatNo&quot; to edtHeatNo&#10;        )&#10;        var scanHelper: ScanHelper? = null&#10;        val scanLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result -&gt;&#10;            if (result.resultCode == RESULT_OK) {&#10;                val intent = result.data&#10;                val qrText = intent?.getStringExtra(&quot;SCAN_RESULT&quot;)&#10;                    ?: intent?.getStringExtra(&quot;SCAN_RESULT_ORIGINAL&quot;)&#10;                    ?: intent?.getStringExtra(&quot;SCAN_RESULT_RAW&quot;)&#10;                if (!qrText.isNullOrEmpty()) {&#10;                    scanHelper?.handleScanResult(qrText)&#10;                }&#10;            }&#10;        }&#10;        scanHelper = ScanHelper(this, scanLauncher, editFields, btnScan)&#10;&#10;        // Function to reset button states&#10;        fun resetButtonStates() {&#10;            btnNhapHang.setBackgroundResource(android.R.drawable.btn_default)&#10;            btnXuatHangTop.setBackgroundResource(android.R.drawable.btn_default)&#10;            isNhapHangModeSelected = false&#10;            isXuatHangModeSelected = false&#10;        }&#10;&#10;        // Function to reset material type button states&#10;        fun resetMaterialTypeButtons() {&#10;            btnTam.setBackgroundResource(android.R.drawable.btn_default)&#10;            btnCay.setBackgroundResource(android.R.drawable.btn_default)&#10;            btnOng.setBackgroundResource(android.R.drawable.btn_default)&#10;            selectedMaterialType = &quot;&quot;&#10;        }&#10;&#10;        // Function to clear all form fields (EXCEPT staff input - preserve during mode switching)&#10;        fun clearAllFields() {&#10;            // Clear text fields&#10;            txtHeatInfo.text = &quot;&quot;&#10;            txtSelectedMaterial.text = &quot;&quot;&#10;            txtSelectedMaterial.visibility = android.view.View.GONE&#10;&#10;            // Hide material type buttons&#10;            layoutMaterialTypeButtons.visibility = android.view.View.GONE&#10;            resetMaterialTypeButtons()&#10;&#10;            // Clear and hide input fields&#10;            edtJobNo.setText(&quot;&quot;)&#10;            edtJobNo.visibility = android.view.View.GONE&#10;&#10;            // Clear and hide old size fields and labels&#10;            txtSize1Label.visibility = android.view.View.GONE&#10;            edtSize1.setText(&quot;&quot;)&#10;            edtSize1.visibility = android.view.View.GONE&#10;            txtOldSize1.text = &quot;&quot;&#10;            txtOldSize1.visibility = android.view.View.GONE&#10;&#10;            txtSize2Label.visibility = android.view.View.GONE&#10;            edtSize2.setText(&quot;&quot;)&#10;            edtSize2.visibility = android.view.View.GONE&#10;            txtOldSize2.text = &quot;&quot;&#10;            txtOldSize2.visibility = android.view.View.GONE&#10;&#10;            // Clear new size fields and labels&#10;            txtSizeALabel.visibility = android.view.View.GONE&#10;            edtSizeA.setText(&quot;&quot;)&#10;            edtSizeA.visibility = android.view.View.GONE&#10;            txtSizeBLabel.visibility = android.view.View.GONE&#10;            edtSizeB.setText(&quot;&quot;)&#10;            edtSizeB.visibility = android.view.View.GONE&#10;            txtSizeCLabel.visibility = android.view.View.GONE&#10;            edtSizeC.setText(&quot;&quot;)&#10;            edtSizeC.visibility = android.view.View.GONE&#10;&#10;            // Clear Xuất phôi mode fields (matQty and partQty)&#10;            edtMatQty.setText(&quot;&quot;)&#10;            edtMatQty.visibility = android.view.View.GONE&#10;            txtMatQtyLabel.text = &quot;&quot;&#10;            txtMatQtyLabel.visibility = android.view.View.GONE&#10;            txtPartQtyLabel.text = &quot;&quot;&#10;            txtPartQtyLabel.visibility = android.view.View.GONE&#10;            edtPartQty.setText(&quot;&quot;)&#10;            edtPartQty.visibility = android.view.View.GONE&#10;&#10;            edtNotes.setText(&quot;&quot;)&#10;            edtNotes.visibility = android.view.View.GONE&#10;&#10;            // Clear Nhập phôi mode fields&#10;            edtWarehouseArea.setText(&quot;&quot;)&#10;            edtWarehouseArea.visibility = android.view.View.GONE&#10;            edtMatQtyInput.setText(&quot;&quot;)&#10;            edtMatQtyInput.visibility = android.view.View.GONE&#10;&#10;            // Hide the update button&#10;            btnXuatHang.visibility = android.view.View.GONE&#10;&#10;            // Clear any dynamic buttons&#10;            layoutHeatInfoButtons.removeAllViews()&#10;&#10;            // Clear heat number and production order fields&#10;            edtHeatNo.setText(&quot;&quot;)&#10;            edtProductionOrder.setText(&quot;&quot;)&#10;&#10;            // PRESERVED: Staff input (edtStaffNo and txtStaffInfo) are NOT cleared&#10;            // This allows the staff number to survive mode switching&#10;        }&#10;&#10;        // Nhập phôi button click listener&#10;        btnNhapHang.setOnClickListener {&#10;            resetButtonStates()&#10;            clearAllFields()&#10;            isNhapHangModeSelected = true&#10;            btnNhapHang.setBackgroundResource(R.drawable.button_activated_background)&#10;        }&#10;&#10;        // Xuất phôi button click listener&#10;        btnXuatHangTop.setOnClickListener {&#10;            resetButtonStates()&#10;            clearAllFields()&#10;            isXuatHangModeSelected = true&#10;            btnXuatHangTop.setBackgroundResource(R.drawable.button_activated_background)&#10;        }&#10;&#10;        // Staff number focus change listener&#10;        edtStaffNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val staffNoStr = edtStaffNo.text.toString().trim()&#10;&#10;                // Save staff number to SharedPreferences when user finishes editing&#10;                if (staffNoStr.isNotEmpty()) {&#10;                    staffPreferences.saveStaffNumber(staffNoStr)&#10;&#10;                    try {&#10;                        val staffNo = staffNoStr.toInt()&#10;                        txtStaffInfo.text = getString(R.string.loading)&#10;                        txtStaffInfo.setTextColor(ContextCompat.getColor(this, android.R.color.holo_red_dark))&#10;                        lifecycleScope.launch {&#10;                            try {&#10;                                val info = staffApi.getStaff(staffNo)&#10;                                if (info != null) {&#10;                                    val staffInfoText = listOfNotNull(info.fullName, info.workJob, info.workPlace).joinToString(&quot;, &quot;)&#10;                                    txtStaffInfo.text = staffInfoText&#10;                                    txtStaffInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;&#10;                                    // Save staff info to SharedPreferences&#10;                                    staffPreferences.saveStaffInfo(staffInfoText)&#10;                                } else {&#10;                                    txtStaffInfo.text = getString(R.string.data_not_found)&#10;                                    txtStaffInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;                                    staffPreferences.saveStaffInfo(&quot;&quot;)&#10;                                }&#10;                            } catch (_: Exception) {&#10;                                txtStaffInfo.text = getString(R.string.data_not_found)&#10;                                txtStaffInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;                                staffPreferences.saveStaffInfo(&quot;&quot;)&#10;                            }&#10;                        }&#10;                    } catch (_: NumberFormatException) {&#10;                        txtStaffInfo.text = getString(R.string.data_not_found)&#10;                        staffPreferences.saveStaffInfo(&quot;&quot;)&#10;                    }&#10;                } else {&#10;                    txtStaffInfo.text = &quot;&quot;&#10;                    // Clear saved staff data if field is emptied&#10;                    staffPreferences.clearStaffPreferences()&#10;                }&#10;            }&#10;        }&#10;&#10;        // Production Order focus change listener&#10;        edtProductionOrder.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val proOrdNoStr = edtProductionOrder.text.toString().trim()&#10;                // Clear previous HeatNo buttons when Production Order changes&#10;                layoutHeatInfoButtons.removeAllViews()&#10;&#10;                if (proOrdNoStr.isNotEmpty()) {&#10;                    txtHeatInfo.text = getString(R.string.loading)&#10;                    txtHeatInfo.setTextColor(ContextCompat.getColor(this, android.R.color.holo_red_dark))&#10;&#10;                    lifecycleScope.launch {&#10;                        try {&#10;                            val response = getHeatNoApi.getHeatNo(proOrdNoStr)&#10;                            if (response != null &amp;&amp; !response.heatNo.isNullOrEmpty()) {&#10;                                val heatNo = response.heatNo!!&#10;                                txtHeatInfo.text = &quot;&quot;&#10;&#10;                                // Create clickable HeatNo button&#10;                                val heatNoButton = Button(this@MaterialLogActivity).apply {&#10;                                    text = &quot;HeatNo: $heatNo&quot;&#10;                                    setBackgroundResource(R.drawable.clickable_button_background)&#10;                                    setTextColor(ContextCompat.getColor(context, android.R.color.white))&#10;                                    layoutParams = LinearLayout.LayoutParams(&#10;                                        LinearLayout.LayoutParams.MATCH_PARENT,&#10;                                        LinearLayout.LayoutParams.WRAP_CONTENT&#10;                                    ).apply {&#10;                                        setMargins(0, 0, 0, 8)&#10;                                    }&#10;&#10;                                    setOnClickListener {&#10;                                        // Populate HeatNo field when button is clicked&#10;                                        edtHeatNo.setText(heatNo)&#10;                                        // Trigger HeatNo processing by simulating focus loss&#10;                                        edtHeatNo.clearFocus()&#10;                                        edtHeatNo.requestFocus()&#10;                                        edtHeatNo.clearFocus()&#10;                                    }&#10;                                }&#10;&#10;                                layoutHeatInfoButtons.addView(heatNoButton)&#10;                            } else {&#10;                                txtHeatInfo.text = getString(R.string.data_not_found)&#10;                                txtHeatInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;                            }&#10;                        } catch (_: Exception) {&#10;                            txtHeatInfo.text = getString(R.string.data_not_found)&#10;                            txtHeatInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;                        }&#10;                    }&#10;                } else {&#10;                    txtHeatInfo.text = &quot;&quot;&#10;                }&#10;            }&#10;        }&#10;&#10;        // HeatNo focus change listener&#10;        edtHeatNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val heatNoStr = edtHeatNo.text.toString().trim()&#10;                // Clear previous buttons&#10;                layoutHeatInfoButtons.removeAllViews()&#10;&#10;                if (heatNoStr.isNotEmpty()) {&#10;                    // Check if any mode is selected&#10;                    if (!isXuatHangModeSelected &amp;&amp; !isNhapHangModeSelected) {&#10;                        txtHeatInfo.text = &quot;Hãy chọn Nhập phôi hoặc Xuất phôi&quot;&#10;                        txtHeatInfo.setTextColor(ContextCompat.getColor(this, android.R.color.holo_red_dark))&#10;                        return@setOnFocusChangeListener&#10;                    }&#10;&#10;                    // Only proceed with API call if Xuất phôi is selected&#10;                    if (isXuatHangModeSelected) {&#10;                        txtHeatInfo.text = getString(R.string.loading)&#10;                        txtHeatInfo.setTextColor(ContextCompat.getColor(this, android.R.color.holo_red_dark))&#10;                        lifecycleScope.launch {&#10;                            try {&#10;                                val heatInfoList = heatNoApi.getHeatNoInfo(heatNoStr)&#10;                                if (heatInfoList != null &amp;&amp; heatInfoList.isNotEmpty()) {&#10;                                    txtHeatInfo.text = &quot;&quot;&#10;&#10;                                    // Create clickable buttons for each heat info item&#10;                                    heatInfoList.forEach { info -&gt;&#10;                                        val material = info.material ?: &quot;&quot;&#10;                                        val existQty = info.existQty?.toString() ?: &quot;&quot;&#10;                                        val inpSize1 = info.inpSize1 ?: &quot;&quot;&#10;                                        val inpSize2 = info.inpSize2 ?: &quot;&quot;&#10;                                        val qty = info.qty?.toString() ?: &quot;&quot;&#10;                                        val notes = info.notes ?: &quot;&quot;&#10;                                        val matIID = info.matIID ?: &quot;&quot;&#10;&#10;                                        // Include MatIID in the button text&#10;                                        val buttonText = &quot;ID: $matIID - $material, SL vật liệu $existQty, $inpSize1 * $inpSize2, SL con hàng $qty, $notes&quot;&#10;&#10;                                        val button = Button(this@MaterialLogActivity).apply {&#10;                                            text = buttonText&#10;                                            setBackgroundResource(R.drawable.clickable_button_background)&#10;                                            setTextColor(ContextCompat.getColor(context, android.R.color.white))&#10;                                            layoutParams = LinearLayout.LayoutParams(&#10;                                                LinearLayout.LayoutParams.MATCH_PARENT,&#10;                                                LinearLayout.LayoutParams.WRAP_CONTENT&#10;                                            ).apply {&#10;                                                setMargins(0, 0, 0, 8)&#10;                                            }&#10;&#10;                                            setOnClickListener {&#10;                                                // Store the MatIID internally for POST function&#10;                                                selectedMatIID = info.matIID ?: &quot;&quot;&#10;&#10;                                                // Show selected material with MatIID in the TextView&#10;                                                txtSelectedMaterial.text = &quot;ID: $matIID - Tên vật liệu: $material&quot;&#10;                                                txtSelectedMaterial.visibility = android.view.View.VISIBLE&#10;                                                txtSelectedMaterial.setTextColor(ContextCompat.getColor(context, android.R.color.holo_red_dark))&#10;&#10;                                                // Show size fields as display-only TextViews (no edit fields)&#10;                                                txtOldSize1.text = inpSize1&#10;                                                txtOldSize1.visibility = android.view.View.VISIBLE&#10;                                                txtOldSize1.setTextColor(ContextCompat.getColor(context, android.R.color.holo_red_dark))&#10;                                                edtSize1.visibility = android.view.View.GONE&#10;&#10;                                                txtOldSize2.text = inpSize2&#10;                                                txtOldSize2.visibility = android.view.View.VISIBLE&#10;                                                txtOldSize2.setTextColor(ContextCompat.getColor(context, android.R.color.holo_red_dark))&#10;                                                edtSize2.visibility = android.view.View.GONE&#10;&#10;                                                // Show job details field (Chi tiết công việc)&#10;                                                edtJobNo.hint = &quot;Chi tiết công việc&quot;&#10;                                                edtJobNo.visibility = android.view.View.VISIBLE&#10;&#10;                                                // Show material quantity with label above editable field&#10;                                                // Parse existQty from API response for consistency with &quot;SL vật liệu&quot;&#10;                                                txtMatQtyLabel.text = &quot;Số lượng dùng:&quot;&#10;                                                txtMatQtyLabel.visibility = android.view.View.VISIBLE&#10;                                                txtMatQtyLabel.setTextColor(ContextCompat.getColor(context, android.R.color.black))&#10;                                                edtMatQty.visibility = android.view.View.VISIBLE&#10;                                                edtMatQty.setText(existQty)&#10;&#10;                                                // Show part quantity with label above editable field&#10;                                                // Parse qty from API response for consistency with &quot;SL con hàng&quot;&#10;                                                txtPartQtyLabel.text = &quot;Số lượng con hàng:&quot;&#10;                                                txtPartQtyLabel.visibility = android.view.View.VISIBLE&#10;                                                txtPartQtyLabel.setTextColor(ContextCompat.getColor(context, android.R.color.black))&#10;                                                edtPartQty.visibility = android.view.View.VISIBLE&#10;                                                edtPartQty.setText(qty)&#10;&#10;                                                // Show notes field&#10;                                                edtNotes.visibility = android.view.View.VISIBLE&#10;&#10;&#10;                                                // Hide product quantity and warehouse area fields&#10;                                                edtWarehouseArea.visibility = android.view.View.GONE&#10;&#10;                                                // Show the &quot;Cập nhật&quot; button&#10;                                                btnXuatHang.visibility = android.view.View.VISIBLE&#10;                                            }&#10;                                        }&#10;&#10;                                        layoutHeatInfoButtons.addView(button)&#10;                                    }&#10;                                } else {&#10;                                    txtHeatInfo.text = getString(R.string.data_not_found)&#10;                                    txtHeatInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;                                }&#10;                            } catch (_: Exception) {&#10;                                txtHeatInfo.text = getString(R.string.data_not_found)&#10;                                txtHeatInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;                            }&#10;                        }&#10;                    } else if (isNhapHangModeSelected) {&#10;                        // For Nhập phôi mode - call GetInputMaterial API and show form for new material input&#10;                        txtHeatInfo.text = getString(R.string.loading)&#10;                        txtHeatInfo.setTextColor(ContextCompat.getColor(this, android.R.color.holo_red_dark))&#10;&#10;                        lifecycleScope.launch {&#10;                            try {&#10;                                val inputMaterialList = inputMaterialApi.getInputMaterial(heatNoStr)&#10;                                if (inputMaterialList != null &amp;&amp; inputMaterialList.isNotEmpty()) {&#10;                                    val firstMaterial = inputMaterialList[0]&#10;                                    val material = firstMaterial.material ?: &quot;&quot;&#10;                                    val matPONo = firstMaterial.matPONo ?: &quot;&quot;&#10;&#10;                                    // Store the actual material name for POST API&#10;                                    actualMaterialName = material&#10;&#10;                                    // Show material name field with API data&#10;                                    txtSelectedMaterial.text = &quot;Tên vật liệu: $material, P.O: $matPONo&quot;&#10;                                    txtSelectedMaterial.visibility = android.view.View.VISIBLE&#10;                                    txtSelectedMaterial.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;&#10;                                    txtHeatInfo.text = &quot;&quot;&#10;                                } else {&#10;                                    // No data found, show default&#10;                                    actualMaterialName = &quot;&quot;&#10;                                    txtSelectedMaterial.text = &quot;Tên vật liệu: chưa có&quot;&#10;                                    txtSelectedMaterial.visibility = android.view.View.VISIBLE&#10;                                    txtSelectedMaterial.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;&#10;                                    txtHeatInfo.text = &quot;&quot;&#10;                                }&#10;                            } catch (_: Exception) {&#10;                                // API call failed, show default&#10;                                actualMaterialName = &quot;&quot;&#10;                                txtSelectedMaterial.text = &quot;Tên vật liệu: chưa có&quot;&#10;                                txtSelectedMaterial.visibility = android.view.View.VISIBLE&#10;                                txtSelectedMaterial.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;&#10;                                txtHeatInfo.text = &quot;&quot;&#10;                            }&#10;                        }&#10;&#10;                        // Show material type selection buttons for Nhập phôi mode&#10;                        layoutMaterialTypeButtons.visibility = android.view.View.VISIBLE&#10;&#10;                        // Hide old size fields initially&#10;                        txtSize1Label.visibility = android.view.View.GONE&#10;                        edtSize1.visibility = android.view.View.GONE&#10;                        txtOldSize1.visibility = android.view.View.GONE&#10;                        txtSize2Label.visibility = android.view.View.GONE&#10;                        edtSize2.visibility = android.view.View.GONE&#10;                        txtOldSize2.visibility = android.view.View.GONE&#10;&#10;                        // Hide job and material quantity fields for Nhập phôi mode&#10;                        edtJobNo.visibility = android.view.View.GONE&#10;                        edtMatQty.visibility = android.view.View.GONE&#10;                        txtMatQtyLabel.visibility = android.view.View.GONE&#10;                        txtPartQtyLabel.visibility = android.view.View.GONE&#10;                        edtPartQty.visibility = android.view.View.GONE&#10;                        edtNotes.visibility = android.view.View.GONE&#10;                        edtWarehouseArea.visibility = android.view.View.GONE&#10;                        btnXuatHang.visibility = android.view.View.GONE&#10;                    }&#10;                } else {&#10;                    txtHeatInfo.text = &quot;&quot;&#10;                }&#10;            }&#10;        }&#10;&#10;        // Material type button click listeners&#10;        btnTam.setOnClickListener {&#10;            resetMaterialTypeButtons()&#10;            selectedMaterialType = &quot;TẤM&quot;&#10;            btnTam.setBackgroundResource(R.drawable.button_activated_background)&#10;&#10;            // Show TẤM specific fields&#10;            txtSizeALabel.text = &quot;Nhập chiều rộng&quot;&#10;            txtSizeALabel.visibility = android.view.View.VISIBLE&#10;            edtSizeA.hint = &quot;&quot;&#10;            edtSizeA.setText(&quot;&quot;)&#10;            edtSizeA.visibility = android.view.View.VISIBLE&#10;&#10;            txtSizeBLabel.text = &quot;Nhập độ dày&quot;&#10;            txtSizeBLabel.visibility = android.view.View.VISIBLE&#10;            edtSizeB.hint = &quot;&quot;&#10;            edtSizeB.setText(&quot;&quot;)&#10;            edtSizeB.visibility = android.view.View.VISIBLE&#10;&#10;            txtSizeCLabel.text = &quot;Nhập chiều dài&quot;&#10;            txtSizeCLabel.visibility = android.view.View.VISIBLE&#10;            edtSizeC.hint = &quot;&quot;&#10;            edtSizeC.setText(&quot;&quot;)&#10;            edtSizeC.visibility = android.view.View.VISIBLE&#10;&#10;            // Show warehouse area, material quantity and update button&#10;            edtWarehouseArea.visibility = android.view.View.VISIBLE&#10;            edtMatQtyInput.visibility = android.view.View.VISIBLE&#10;            btnXuatHang.visibility = android.view.View.VISIBLE&#10;        }&#10;&#10;        btnCay.setOnClickListener {&#10;            resetMaterialTypeButtons()&#10;            selectedMaterialType = &quot;CÂY&quot;&#10;            btnCay.setBackgroundResource(R.drawable.button_activated_background)&#10;&#10;            // Show CÂY specific fields&#10;            txtSizeALabel.text = &quot;Nhập đường kính&quot;&#10;            txtSizeALabel.visibility = android.view.View.VISIBLE&#10;            edtSizeA.hint = &quot;&quot;&#10;            edtSizeA.setText(&quot;D&quot;)&#10;            edtSizeA.visibility = android.view.View.VISIBLE&#10;&#10;            txtSizeBLabel.text = &quot;Nhập chiều dài&quot;&#10;            txtSizeBLabel.visibility = android.view.View.VISIBLE&#10;            edtSizeB.hint = &quot;&quot;&#10;            edtSizeB.setText(&quot;&quot;)&#10;            edtSizeB.visibility = android.view.View.VISIBLE&#10;&#10;            // Hide Size C for CÂY&#10;            txtSizeCLabel.visibility = android.view.View.GONE&#10;            edtSizeC.visibility = android.view.View.GONE&#10;&#10;            // Show warehouse area and update button&#10;            edtWarehouseArea.visibility = android.view.View.VISIBLE&#10;            edtMatQtyInput.visibility = android.view.View.VISIBLE&#10;            btnXuatHang.visibility = android.view.View.VISIBLE&#10;        }&#10;&#10;        btnOng.setOnClickListener {&#10;            resetMaterialTypeButtons()&#10;            selectedMaterialType = &quot;ỐNG&quot;&#10;            btnOng.setBackgroundResource(R.drawable.button_activated_background)&#10;&#10;            // Show ỐNG specific fields&#10;            txtSizeALabel.text = &quot;Nhập đường kính ngoài&quot;&#10;            txtSizeALabel.visibility = android.view.View.VISIBLE&#10;            edtSizeA.hint = &quot;&quot;&#10;            edtSizeA.setText(&quot;OD&quot;)&#10;            edtSizeA.visibility = android.view.View.VISIBLE&#10;&#10;            txtSizeBLabel.text = &quot;Nhập đường kính trong&quot;&#10;            txtSizeBLabel.visibility = android.view.View.VISIBLE&#10;            edtSizeB.hint = &quot;&quot;&#10;            edtSizeB.setText(&quot;ID&quot;)&#10;            edtSizeB.visibility = android.view.View.VISIBLE&#10;&#10;            txtSizeCLabel.text = &quot;Nhập chiều dài&quot;&#10;            txtSizeCLabel.visibility = android.view.View.VISIBLE&#10;            edtSizeC.hint = &quot;&quot;&#10;            edtSizeC.setText(&quot;&quot;)&#10;            edtSizeC.visibility = android.view.View.VISIBLE&#10;&#10;            // Show warehouse area, material quantity and update button&#10;            edtWarehouseArea.visibility = android.view.View.VISIBLE&#10;            edtMatQtyInput.visibility = android.view.View.VISIBLE&#10;            btnXuatHang.visibility = android.view.View.VISIBLE&#10;        }&#10;&#10;        // &quot;Cập nhật&quot; button click listener for submitting material usage data&#10;        btnXuatHang.setOnClickListener {&#10;            // Validate required fields for Xuất phôi mode&#10;            if (isXuatHangModeSelected) {&#10;                val staffNoStr = edtStaffNo.text.toString().trim()&#10;                val jobNo = edtJobNo.text.toString().trim()&#10;                val materialQtyStr = edtMatQty.text.toString().trim()&#10;                val partQtyStr = edtPartQty.text.toString().trim()&#10;                val notes = edtNotes.text.toString().trim()&#10;&#10;                // Validation&#10;                if (staffNoStr.isEmpty()) {&#10;                    android.widget.Toast.makeText(this, &quot;Vui lòng nhập số thợ&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                    return@setOnClickListener&#10;                }&#10;&#10;                if (selectedMatIID.isEmpty()) {&#10;                    android.widget.Toast.makeText(this, &quot;Vui lòng chọn vật liệu&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                    return@setOnClickListener&#10;                }&#10;&#10;                if (jobNo.isEmpty()) {&#10;                    android.widget.Toast.makeText(this, &quot;Vui lòng nhập chi tiết công việc&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                    return@setOnClickListener&#10;                }&#10;&#10;                if (materialQtyStr.isEmpty()) {&#10;                    android.widget.Toast.makeText(this, &quot;Vui lòng nhập số lượng vật liệu&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                    return@setOnClickListener&#10;                }&#10;&#10;                if (partQtyStr.isEmpty()) {&#10;                    android.widget.Toast.makeText(this, &quot;Vui lòng nhập số lượng con hàng&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                    return@setOnClickListener&#10;                }&#10;&#10;                try {&#10;                    val staffNo = staffNoStr.toInt()&#10;                    val materialQty = materialQtyStr.toInt()  // Changed from toFloat() to toInt()&#10;                    val partQty = partQtyStr.toInt()&#10;&#10;                    // Create POST data object&#10;                    val postData = PostMUsingDto(&#10;                        staffNo = staffNo,&#10;                        matIID = selectedMatIID,&#10;                        matQty = materialQty,  // Now using Int instead of Float&#10;                        partQty = partQty,&#10;                        jobNo = jobNo,&#10;                        notes = notes&#10;                    )&#10;&#10;                    // Show loading state&#10;                    btnXuatHang.text = &quot;Đang xử lý...&quot;&#10;                    btnXuatHang.isEnabled = false&#10;&#10;                    // Submit data to API&#10;                    lifecycleScope.launch {&#10;                        try {&#10;                            val response = postMUsingApi.postMaterialUsing(postData)&#10;&#10;                            if (response.isSuccessful) {&#10;                                val responseBody = response.body()&#10;                                if (responseBody != null) {&#10;                                    // Success - show response message&#10;                                    val successMessage = &quot;Thành công!\n${responseBody.message}&quot;&#10;&#10;                                    android.widget.Toast.makeText(this@MaterialLogActivity, successMessage, android.widget.Toast.LENGTH_LONG).show()&#10;&#10;                                    // Clear form after successful submission&#10;                                    clearAllFields()&#10;                                    resetButtonStates()&#10;                                    edtStaffNo.setText(&quot;&quot;)&#10;                                    edtHeatNo.setText(&quot;&quot;)&#10;                                    txtStaffInfo.text = &quot;&quot;&#10;                                    selectedMatIID = &quot;&quot;&#10;                                } else {&#10;                                    android.widget.Toast.makeText(this@MaterialLogActivity, &quot;Không có dữ liệu trả về&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                                }&#10;                            } else {&#10;                                // Handle API error response - show more detailed error info&#10;                                val httpCode = response.code()&#10;                                val errorMessage = try {&#10;                                    response.errorBody()?.string() ?: &quot;Lỗi HTTP $httpCode&quot;&#10;                                } catch (e: Exception) {&#10;                                    &quot;Lỗi HTTP $httpCode - không thể đọc chi tiết lỗi&quot;&#10;                                }&#10;&#10;                                android.util.Log.e(&quot;MaterialLogActivity&quot;, &quot;HTTP Error $httpCode: $errorMessage&quot;)&#10;                                android.widget.Toast.makeText(this@MaterialLogActivity, &quot;Lỗi HTTP $httpCode: $errorMessage&quot;, android.widget.Toast.LENGTH_LONG).show()&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            // Handle network or other errors&#10;                            android.widget.Toast.makeText(this@MaterialLogActivity, &quot;Lỗi kết nối: ${e.message}&quot;, android.widget.Toast.LENGTH_LONG).show()&#10;                            android.util.Log.e(&quot;MaterialLogActivity&quot;, &quot;POST request failed&quot;, e)&#10;                        } finally {&#10;                            // Reset button state&#10;                            btnXuatHang.text = &quot;Cập nhật&quot;&#10;                            btnXuatHang.isEnabled = true&#10;                        }&#10;                    }&#10;&#10;                } catch (e: NumberFormatException) {&#10;                    android.widget.Toast.makeText(this, &quot;Vui lòng nhập số hợp lệ&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                }&#10;            } else if (isNhapHangModeSelected) {&#10;                // Validate and submit for Nhập phôi mode&#10;                val staffNoStr = edtStaffNo.text.toString().trim()&#10;                val heatNoStr = edtHeatNo.text.toString().trim()&#10;                val warehouseAreaStr = edtWarehouseArea.text.toString().trim()&#10;                val matQtyStr = edtMatQtyInput.text.toString().trim()  // Fixed: Use edtMatQtyInput instead of edtMatQty&#10;&#10;                // Validation&#10;                if (staffNoStr.isEmpty()) {&#10;                    android.widget.Toast.makeText(this, &quot;Vui lòng nhập số thợ&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                    return@setOnClickListener&#10;                }&#10;&#10;                if (heatNoStr.isEmpty()) {&#10;                    android.widget.Toast.makeText(this, &quot;Vui lòng nhập Heat Number&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                    return@setOnClickListener&#10;                }&#10;&#10;                if (selectedMaterialType.isEmpty()) {&#10;                    android.widget.Toast.makeText(this, &quot;Vui lòng chọn loại vật liệu&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                    return@setOnClickListener&#10;                }&#10;&#10;                if (warehouseAreaStr.isEmpty()) {&#10;                    android.widget.Toast.makeText(this, &quot;Vui lòng nhập khu vực kho&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                    return@setOnClickListener&#10;                }&#10;&#10;                if (matQtyStr.isEmpty()) {&#10;                    android.widget.Toast.makeText(this, &quot;Vui lòng nhập số lượng vật liệu&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                    return@setOnClickListener&#10;                }&#10;&#10;                // Function to convert sizeA, sizeB, sizeC to newInpSize1 and newInpSize2&#10;                fun convertSizesToInpSizes(): Pair&lt;String, String&gt; {&#10;                    val sizeA = edtSizeA.text.toString().trim()&#10;                    val sizeB = edtSizeB.text.toString().trim()&#10;                    val sizeC = edtSizeC.text.toString().trim()&#10;&#10;                    return when (selectedMaterialType) {&#10;                        &quot;TẤM&quot; -&gt; {&#10;                            // For TẤM: newInpSize1 = chiều rộng, newInpSize2 = độ dày*chiều dài&#10;                            val newInpSize1 = sizeA // chiều rộng&#10;                            val newInpSize2 = &quot;${sizeB}*${sizeC}&quot; // độ dày*chiều dài&#10;                            Pair(newInpSize1, newInpSize2)&#10;                        }&#10;                        &quot;CÂY&quot; -&gt; {&#10;                            // For CÂY: newInpSize1 = đường kính, newInpSize2 = chiều dài&#10;                            val newInpSize1 = sizeA // đường kính (D)&#10;                            val newInpSize2 = sizeB // chiều dài&#10;                            Pair(newInpSize1, newInpSize2)&#10;                        }&#10;                        &quot;ỐNG&quot; -&gt; {&#10;                            // For ỐNG: newInpSize1 = đường kính ngoài, newInpSize2 = đường kính trong*chiều dài&#10;                            val newInpSize1 = sizeA // đường kính ngoài (OD)&#10;                            val newInpSize2 = &quot;${sizeB}*${sizeC}&quot; // đường kính trong*chiều dài&#10;                            Pair(newInpSize1, newInpSize2)&#10;                        }&#10;                        else -&gt; Pair(&quot;&quot;, &quot;&quot;)&#10;                    }&#10;                }&#10;&#10;                try {&#10;                    val staffNo = staffNoStr.toInt()&#10;                    val matQty = matQtyStr.toInt()  // Changed from toFloat() to toInt()&#10;                    val (newInpSize1, newInpSize2) = convertSizesToInpSizes()&#10;&#10;                    // Create POST data object for material input using the correct API structure&#10;                    val postData = PostMInputDto(&#10;                        staffNo = staffNo,&#10;                        heatNo = heatNoStr,&#10;                        materialType = actualMaterialName, // Use actual material name from GetInputMaterial API&#10;                        newInpSize1 = newInpSize1,&#10;                        newInpSize2 = newInpSize2,&#10;                        warehouseArea = warehouseAreaStr,&#10;                        matQty = matQty&#10;                    )&#10;&#10;                    // Show loading state&#10;                    btnXuatHang.text = &quot;Đang xử lý...&quot;&#10;                    btnXuatHang.isEnabled = false&#10;&#10;                    // Submit data to API&#10;                    lifecycleScope.launch {&#10;                        try {&#10;                            val response = postMInputApi.postMaterialInput(postData)&#10;&#10;                            if (response.isSuccessful) {&#10;                                val responseBody = response.body()&#10;                                if (responseBody != null) {&#10;                                    // Success - show response message&#10;                                    val successMessage = &quot;Nhập phôi thành công!\n${responseBody.message}&quot;&#10;                                    android.widget.Toast.makeText(this@MaterialLogActivity, successMessage, android.widget.Toast.LENGTH_LONG).show()&#10;&#10;                                    // Clear form after successful submission&#10;                                    clearAllFields()&#10;                                    resetButtonStates()&#10;                                    edtStaffNo.setText(&quot;&quot;)&#10;                                    edtHeatNo.setText(&quot;&quot;)&#10;                                    txtStaffInfo.text = &quot;&quot;&#10;                                    selectedMatIID = &quot;&quot;&#10;                                } else {&#10;                                    android.widget.Toast.makeText(this@MaterialLogActivity, &quot;Không có dữ liệu trả về&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                                }&#10;                            } else {&#10;                                // Handle API error response - show more detailed error info&#10;                                val httpCode = response.code()&#10;                                val errorMessage = try {&#10;                                    response.errorBody()?.string() ?: &quot;Lỗi HTTP $httpCode&quot;&#10;                                } catch (e: Exception) {&#10;                                    &quot;Lỗi HTTP $httpCode - không thể đọc chi tiết lỗi&quot;&#10;                                }&#10;&#10;                                android.util.Log.e(&quot;MaterialLogActivity&quot;, &quot;HTTP Error $httpCode: $errorMessage&quot;)&#10;                                android.widget.Toast.makeText(this@MaterialLogActivity, &quot;Lỗi HTTP $httpCode: $errorMessage&quot;, android.widget.Toast.LENGTH_LONG).show()&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            // Handle network or other errors&#10;                            android.widget.Toast.makeText(this@MaterialLogActivity, &quot;Lỗi kết nối: ${e.message}&quot;, android.widget.Toast.LENGTH_LONG).show()&#10;                            android.util.Log.e(&quot;MaterialLogActivity&quot;, &quot;POST request failed&quot;, e)&#10;                        } finally {&#10;                            // Reset button state&#10;                            btnXuatHang.text = &quot;Cập nhật&quot;&#10;                            btnXuatHang.isEnabled = true&#10;                        }&#10;                    }&#10;&#10;                } catch (e: NumberFormatException) {&#10;                    android.widget.Toast.makeText(this, &quot;Vui lòng nhập số hợp lệ&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Auto-call staff API with saved staff number&#10;    private fun autoCallStaffApi(staffNo: Int) {&#10;        val txtStaffInfo = findViewById&lt;TextView&gt;(R.id.txtStaffInfo)&#10;        val edtStaffNo = findViewById&lt;EditText&gt;(R.id.edtStaffNo)&#10;        val staffApi = RetrofitClient.retrofitPublic.create(StaffApi::class.java)&#10;&#10;        txtStaffInfo.text = getString(R.string.loading)&#10;        txtStaffInfo.setTextColor(ContextCompat.getColor(this, android.R.color.holo_red_dark))&#10;&#10;        lifecycleScope.launch {&#10;            try {&#10;                val info = staffApi.getStaff(staffNo)&#10;                if (info != null) {&#10;                    txtStaffInfo.text = listOfNotNull(info.fullName, info.workJob, info.workPlace).joinToString(&quot;, &quot;)&#10;                    txtStaffInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;                } else {&#10;                    txtStaffInfo.text = getString(R.string.data_not_found)&#10;                    txtStaffInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;                }&#10;            } catch (_: Exception) {&#10;                txtStaffInfo.text = getString(R.string.data_not_found)&#10;                txtStaffInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.lephucmfg&#10;&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.LinearLayout&#10;import android.widget.TextView&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.content.ContextCompat&#10;import androidx.lifecycle.lifecycleScope&#10;import com.example.lephucmfg.network.RetrofitClient&#10;import com.example.lephucmfg.utils.LoadingStates&#10;import com.example.lephucmfg.utils.StaffPreferences&#10;import com.google.gson.annotations.SerializedName&#10;import com.google.zxing.integration.android.IntentIntegrator&#10;import kotlinx.coroutines.launch&#10;import retrofit2.http.GET&#10;import retrofit2.http.Path&#10;&#10;class MaterialLogActivity : AppCompatActivity() {&#10;&#10;    // Add StaffPreferences instance&#10;    private lateinit var staffPreferences: StaffPreferences&#10;&#10;    // --- API interface for fetching staff info (&quot;Thợ&quot;) ---&#10;    interface StaffApi {&#10;        @GET(&quot;/api/GetStaff/{staffNo}&quot;)&#10;        suspend fun getStaff(@Path(&quot;staffNo&quot;) staffNo: Int): StaffInfo?&#10;    }&#10;&#10;    // --- API interface for fetching heat number info ---&#10;    interface HeatNoApi {&#10;        @GET(&quot;/api/GetInfoHeatNo/{HeatNo}&quot;)&#10;        suspend fun getHeatNoInfo(@Path(&quot;HeatNo&quot;) heatNo: String): List&lt;HeatNoInfo&gt;?&#10;    }&#10;&#10;    // --- API interface for fetching HeatNo from Production Order ---&#10;    interface GetHeatNoApi {&#10;        @GET(&quot;/api/GetHeatNo/{proOrdNo}&quot;)&#10;        suspend fun getHeatNo(@Path(&quot;proOrdNo&quot;) proOrdNo: String): GetHeatNoResponse?&#10;    }&#10;&#10;    // --- API interface for fetching input material info ---&#10;    interface InputMaterialApi {&#10;        @GET(&quot;/api/GetInputMaterial/{HeatNo}&quot;)&#10;        suspend fun getInputMaterial(@Path(&quot;HeatNo&quot;) heatNo: String): List&lt;InputMaterialInfo&gt;?&#10;    }&#10;&#10;    // --- API interface for posting material usage ---&#10;    interface PostMUsingApi {&#10;        @retrofit2.http.POST(&quot;/api/PostMUsing&quot;)&#10;        suspend fun postMaterialUsing(@retrofit2.http.Body data: PostMUsingDto): retrofit2.Response&lt;PostMUsingResponse&gt;&#10;    }&#10;&#10;    // --- API interface for posting material input ---&#10;    interface PostMInputApi {&#10;        @retrofit2.http.POST(&quot;/api/PostMInput&quot;)&#10;        suspend fun postMaterialInput(@retrofit2.http.Body data: PostMInputDto): retrofit2.Response&lt;PostMInputResponse&gt;&#10;    }&#10;&#10;    // --- Data class for staff info ---&#10;    data class StaffInfo(&#10;        @SerializedName(&quot;fullName&quot;) val fullName: String?,&#10;        @SerializedName(&quot;workJob&quot;) val workJob: String?,&#10;        @SerializedName(&quot;workPlace&quot;) val workPlace: String?&#10;    )&#10;&#10;    // --- Data class for GetHeatNo response ---&#10;    data class GetHeatNoResponse(&#10;        @SerializedName(&quot;heatNo&quot;) val heatNo: String?&#10;    )&#10;&#10;    // --- Data class for heat number info ---&#10;    data class HeatNoInfo(&#10;        @SerializedName(&quot;material&quot;) val material: String?,&#10;        @SerializedName(&quot;existQty&quot;) val existQty: Int?,&#10;        @SerializedName(&quot;inpSize1&quot;) val inpSize1: String?,&#10;        @SerializedName(&quot;inpSize2&quot;) val inpSize2: String?,&#10;        @SerializedName(&quot;qty&quot;) val qty: Int?,&#10;        @SerializedName(&quot;notes&quot;) val notes: String?,&#10;        @SerializedName(&quot;matIID&quot;) val matIID: String?&#10;    )&#10;&#10;    // --- Data class for input material info ---&#10;    data class InputMaterialInfo(&#10;        @SerializedName(&quot;material&quot;) val material: String?,&#10;        @SerializedName(&quot;matPONo&quot;) val matPONo: String?&#10;    )&#10;&#10;    // --- Data class for POST request ---&#10;    data class PostMUsingDto(&#10;        @SerializedName(&quot;staffNo&quot;) val staffNo: Int,&#10;        @SerializedName(&quot;matIID&quot;) val matIID: String,&#10;        @SerializedName(&quot;matQty&quot;) val matQty: Int,  // Changed from Float to Int&#10;        @SerializedName(&quot;partQty&quot;) val partQty: Int,&#10;        @SerializedName(&quot;jobNo&quot;) val jobNo: String,&#10;        @SerializedName(&quot;notes&quot;) val notes: String&#10;    )&#10;&#10;    // --- Data class for POST response ---&#10;    data class PostMUsingResponse(&#10;        @SerializedName(&quot;message&quot;) val message: String?&#10;    )&#10;&#10;    // --- Data class for POST request (Material Input) ---&#10;    data class PostMInputDto(&#10;        @SerializedName(&quot;staffNo&quot;) val staffNo: Int,&#10;        @SerializedName(&quot;heatNo&quot;) val heatNo: String,&#10;        @SerializedName(&quot;materialType&quot;) val materialType: String,&#10;        @SerializedName(&quot;newInpSize1&quot;) val newInpSize1: String,&#10;        @SerializedName(&quot;newInpSize2&quot;) val newInpSize2: String,&#10;        @SerializedName(&quot;warehouseArea&quot;) val warehouseArea: String,&#10;        @SerializedName(&quot;matQty&quot;) val matQty: Int&#10;    )&#10;&#10;    // --- Data class for POST response (Material Input) ---&#10;    data class PostMInputResponse(&#10;        @SerializedName(&quot;message&quot;) val message: String?&#10;    )&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_material_log)&#10;&#10;        // Initialize StaffPreferences&#10;        staffPreferences = StaffPreferences(this)&#10;&#10;        val edtStaffNo = findViewById&lt;EditText&gt;(R.id.edtStaffNo)&#10;        val txtStaffInfo = findViewById&lt;TextView&gt;(R.id.txtStaffInfo)&#10;        val edtProductionOrder = findViewById&lt;EditText&gt;(R.id.edtProductionOrder)&#10;        val edtHeatNo = findViewById&lt;EditText&gt;(R.id.edtHeatNo)&#10;        val txtHeatInfo = findViewById&lt;TextView&gt;(R.id.txtHeatInfo)&#10;        val btnScan = findViewById&lt;Button&gt;(R.id.btnScan)&#10;        val layoutHeatInfoButtons = findViewById&lt;LinearLayout&gt;(R.id.layoutHeatInfoButtons)&#10;        val txtSelectedMaterial = findViewById&lt;TextView&gt;(R.id.txtSelectedMaterial)&#10;        val txtModeSelectionMessage = findViewById&lt;TextView&gt;(R.id.txtModeSelectionMessage)&#10;&#10;        // Load saved staff number and info on startup&#10;        val savedStaffNumber = staffPreferences.getStaffNumber()&#10;        val savedStaffInfo = staffPreferences.getStaffInfo()&#10;&#10;        if (savedStaffNumber.isNotEmpty()) {&#10;            edtStaffNo.setText(savedStaffNumber)&#10;            if (savedStaffInfo.isNotEmpty()) {&#10;                txtStaffInfo.text = savedStaffInfo&#10;                txtStaffInfo.setTextColor(ContextCompat.getColor(this, android.R.color.holo_red_dark))&#10;            }&#10;            // Auto-call API with saved staff number&#10;            autoCallStaffApi(savedStaffNumber.toIntOrNull() ?: 0)&#10;        }&#10;&#10;        // New material type selection UI elements&#10;        val layoutMaterialTypeButtons = findViewById&lt;LinearLayout&gt;(R.id.layoutMaterialTypeButtons)&#10;        val btnTam = findViewById&lt;Button&gt;(R.id.btnTam)&#10;        val btnCay = findViewById&lt;Button&gt;(R.id.btnCay)&#10;        val btnOng = findViewById&lt;Button&gt;(R.id.btnOng)&#10;&#10;        // New size input fields&#10;        val txtSizeALabel = findViewById&lt;TextView&gt;(R.id.txtSizeALabel)&#10;        val edtSizeA = findViewById&lt;EditText&gt;(R.id.edtSizeA)&#10;        val txtSizeBLabel = findViewById&lt;TextView&gt;(R.id.txtSizeBLabel)&#10;        val edtSizeB = findViewById&lt;EditText&gt;(R.id.edtSizeB)&#10;        val txtSizeCLabel = findViewById&lt;TextView&gt;(R.id.txtSizeCLabel)&#10;        val edtSizeC = findViewById&lt;EditText&gt;(R.id.edtSizeC)&#10;&#10;        // Existing UI elements for Xuất phôi mode&#10;        val edtJobNo = findViewById&lt;EditText&gt;(R.id.edtJobNo)&#10;        val txtSize1Label = findViewById&lt;TextView&gt;(R.id.txtSize1Label)&#10;        val edtSize1 = findViewById&lt;EditText&gt;(R.id.edtSize1)&#10;        val txtOldSize1 = findViewById&lt;TextView&gt;(R.id.txtOldSize1)&#10;        val txtSize2Label = findViewById&lt;TextView&gt;(R.id.txtSize2Label)&#10;        val edtSize2 = findViewById&lt;EditText&gt;(R.id.edtSize2)&#10;        val txtOldSize2 = findViewById&lt;TextView&gt;(R.id.txtOldSize2)&#10;        val edtMatQty = findViewById&lt;EditText&gt;(R.id.edtMaterialQty)  // matQty for API consistency&#10;        val txtMatQtyLabel = findViewById&lt;TextView&gt;(R.id.txtOldMaterialQty)&#10;        val txtPartQtyLabel = findViewById&lt;TextView&gt;(R.id.txtPartQtyLabel)&#10;        val edtPartQty = findViewById&lt;EditText&gt;(R.id.edtPartQty)&#10;        val edtNotes = findViewById&lt;EditText&gt;(R.id.edtNotes)&#10;        val edtWarehouseArea = findViewById&lt;EditText&gt;(R.id.edtWarehouseArea)&#10;        val edtMatQtyInput = findViewById&lt;EditText&gt;(R.id.edtMatQty)  // For Nhập phôi mode&#10;        val btnXuatHang = findViewById&lt;Button&gt;(R.id.btnXuatHang)&#10;        val btnNhapHang = findViewById&lt;Button&gt;(R.id.btnNhapHang)&#10;        val btnXuatHangTop = findViewById&lt;Button&gt;(R.id.btnXuatHangTop)&#10;&#10;        // Track which mode is selected&#10;        var isXuatHangModeSelected = false&#10;        var isNhapHangModeSelected = false&#10;        var selectedMaterialType = &quot;&quot; // &quot;TẤM&quot;, &quot;CÂY&quot;, or &quot;ỐNG&quot; - UI helper only&#10;        var selectedMatIID = &quot;&quot; // Store the selected Material Input ID for POST function&#10;        var actualMaterialName = &quot;&quot; // Store the actual material name from API for POST function&#10;&#10;        val staffApi = RetrofitClient.retrofitPublic.create(StaffApi::class.java)&#10;        val heatNoApi = RetrofitClient.retrofitPublic.create(HeatNoApi::class.java)&#10;        val getHeatNoApi = RetrofitClient.retrofitPublic.create(GetHeatNoApi::class.java)&#10;        val inputMaterialApi = RetrofitClient.retrofitPublic.create(InputMaterialApi::class.java)&#10;        val postMUsingApi = RetrofitClient.retrofitPublic.create(PostMUsingApi::class.java)&#10;        val postMInputApi = RetrofitClient.retrofitPublic.create(PostMInputApi::class.java)&#10;&#10;        // --- QR Scan integration ---&#10;        val editFields = mapOf(&#10;            &quot;staffNo&quot; to edtStaffNo,&#10;            &quot;heatno&quot; to edtHeatNo,&#10;            // fallback: also allow direct EditText id mapping&#10;            &quot;edtStaffNo&quot; to edtStaffNo,&#10;            &quot;edtHeatNo&quot; to edtHeatNo&#10;        )&#10;        var scanHelper: ScanHelper? = null&#10;        val scanLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result -&gt;&#10;            if (result.resultCode == RESULT_OK) {&#10;                val intent = result.data&#10;                val qrText = intent?.getStringExtra(&quot;SCAN_RESULT&quot;)&#10;                    ?: intent?.getStringExtra(&quot;SCAN_RESULT_ORIGINAL&quot;)&#10;                    ?: intent?.getStringExtra(&quot;SCAN_RESULT_RAW&quot;)&#10;                if (!qrText.isNullOrEmpty()) {&#10;                    scanHelper?.handleScanResult(qrText)&#10;                }&#10;            }&#10;        }&#10;        scanHelper = ScanHelper(this, scanLauncher, editFields, btnScan)&#10;&#10;        // Function to disable Production Order and HeatNo fields until mode is selected&#10;        fun disableFieldsUntilModeSelected() {&#10;            edtProductionOrder.isEnabled = false&#10;            edtHeatNo.isEnabled = false&#10;            edtProductionOrder.alpha = 0.5f&#10;            edtHeatNo.alpha = 0.5f&#10;            txtModeSelectionMessage.visibility = android.view.View.VISIBLE&#10;        }&#10;&#10;        // Function to enable Production Order and HeatNo fields when mode is selected&#10;        fun enableFieldsAfterModeSelected() {&#10;            edtProductionOrder.isEnabled = true&#10;            edtHeatNo.isEnabled = true&#10;            edtProductionOrder.alpha = 1.0f&#10;            edtHeatNo.alpha = 1.0f&#10;            txtModeSelectionMessage.visibility = android.view.View.GONE&#10;        }&#10;&#10;        // Function to reset button states&#10;        fun resetButtonStates() {&#10;            btnNhapHang.setBackgroundResource(android.R.drawable.btn_default)&#10;            btnXuatHangTop.setBackgroundResource(android.R.drawable.btn_default)&#10;            isNhapHangModeSelected = false&#10;            isXuatHangModeSelected = false&#10;            disableFieldsUntilModeSelected()&#10;        }&#10;&#10;        // Function to reset material type button states&#10;        fun resetMaterialTypeButtons() {&#10;            btnTam.setBackgroundResource(android.R.drawable.btn_default)&#10;            btnCay.setBackgroundResource(android.R.drawable.btn_default)&#10;            btnOng.setBackgroundResource(android.R.drawable.btn_default)&#10;            selectedMaterialType = &quot;&quot;&#10;        }&#10;&#10;        // Function to clear all form fields (EXCEPT staff input - preserve during mode switching)&#10;        fun clearAllFields() {&#10;            // Clear text fields&#10;            txtHeatInfo.text = &quot;&quot;&#10;            txtSelectedMaterial.text = &quot;&quot;&#10;            txtSelectedMaterial.visibility = android.view.View.GONE&#10;&#10;            // Hide material type buttons&#10;            layoutMaterialTypeButtons.visibility = android.view.View.GONE&#10;            resetMaterialTypeButtons()&#10;&#10;            // Clear and hide input fields&#10;            edtJobNo.setText(&quot;&quot;)&#10;            edtJobNo.visibility = android.view.View.GONE&#10;&#10;            // Clear and hide old size fields and labels&#10;            txtSize1Label.visibility = android.view.View.GONE&#10;            edtSize1.setText(&quot;&quot;)&#10;            edtSize1.visibility = android.view.View.GONE&#10;            txtOldSize1.text = &quot;&quot;&#10;            txtOldSize1.visibility = android.view.View.GONE&#10;&#10;            txtSize2Label.visibility = android.view.View.GONE&#10;            edtSize2.setText(&quot;&quot;)&#10;            edtSize2.visibility = android.view.View.GONE&#10;            txtOldSize2.text = &quot;&quot;&#10;            txtOldSize2.visibility = android.view.View.GONE&#10;&#10;            // Clear new size fields and labels&#10;            txtSizeALabel.visibility = android.view.View.GONE&#10;            edtSizeA.setText(&quot;&quot;)&#10;            edtSizeA.visibility = android.view.View.GONE&#10;            txtSizeBLabel.visibility = android.view.View.GONE&#10;            edtSizeB.setText(&quot;&quot;)&#10;            edtSizeB.visibility = android.view.View.GONE&#10;            txtSizeCLabel.visibility = android.view.View.GONE&#10;            edtSizeC.setText(&quot;&quot;)&#10;            edtSizeC.visibility = android.view.View.GONE&#10;&#10;            // Clear Xuất phôi mode fields (matQty and partQty)&#10;            edtMatQty.setText(&quot;&quot;)&#10;            edtMatQty.visibility = android.view.View.GONE&#10;            txtMatQtyLabel.text = &quot;&quot;&#10;            txtMatQtyLabel.visibility = android.view.View.GONE&#10;            txtPartQtyLabel.text = &quot;&quot;&#10;            txtPartQtyLabel.visibility = android.view.View.GONE&#10;            edtPartQty.setText(&quot;&quot;)&#10;            edtPartQty.visibility = android.view.View.GONE&#10;&#10;            edtNotes.setText(&quot;&quot;)&#10;            edtNotes.visibility = android.view.View.GONE&#10;&#10;            // Clear Nhập phôi mode fields&#10;            edtWarehouseArea.setText(&quot;&quot;)&#10;            edtWarehouseArea.visibility = android.view.View.GONE&#10;            edtMatQtyInput.setText(&quot;&quot;)&#10;            edtMatQtyInput.visibility = android.view.View.GONE&#10;&#10;            // Hide the update button&#10;            btnXuatHang.visibility = android.view.View.GONE&#10;&#10;            // Clear any dynamic buttons&#10;            layoutHeatInfoButtons.removeAllViews()&#10;&#10;            // Clear heat number and production order fields&#10;            edtHeatNo.setText(&quot;&quot;)&#10;            edtProductionOrder.setText(&quot;&quot;)&#10;&#10;            // PRESERVED: Staff input (edtStaffNo and txtStaffInfo) are NOT cleared&#10;            // This allows the staff number to survive mode switching&#10;        }&#10;&#10;        // Initially disable fields until mode is selected&#10;        disableFieldsUntilModeSelected()&#10;&#10;        // Nhập phôi button click listener&#10;        btnNhapHang.setOnClickListener {&#10;            resetButtonStates()&#10;            clearAllFields()&#10;            isNhapHangModeSelected = true&#10;            btnNhapHang.setBackgroundResource(R.drawable.button_activated_background)&#10;            enableFieldsAfterModeSelected()&#10;        }&#10;&#10;        // Xuất phôi button click listener&#10;        btnXuatHangTop.setOnClickListener {&#10;            resetButtonStates()&#10;            clearAllFields()&#10;            isXuatHangModeSelected = true&#10;            btnXuatHangTop.setBackgroundResource(R.drawable.button_activated_background)&#10;            enableFieldsAfterModeSelected()&#10;        }&#10;&#10;        // Staff number focus change listener&#10;        edtStaffNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val staffNoStr = edtStaffNo.text.toString().trim()&#10;&#10;                // Save staff number to SharedPreferences when user finishes editing&#10;                if (staffNoStr.isNotEmpty()) {&#10;                    staffPreferences.saveStaffNumber(staffNoStr)&#10;&#10;                    try {&#10;                        val staffNo = staffNoStr.toInt()&#10;                        txtStaffInfo.text = getString(R.string.loading)&#10;                        txtStaffInfo.setTextColor(ContextCompat.getColor(this, android.R.color.holo_red_dark))&#10;                        lifecycleScope.launch {&#10;                            try {&#10;                                val info = staffApi.getStaff(staffNo)&#10;                                if (info != null) {&#10;                                    val staffInfoText = listOfNotNull(info.fullName, info.workJob, info.workPlace).joinToString(&quot;, &quot;)&#10;                                    txtStaffInfo.text = staffInfoText&#10;                                    txtStaffInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;&#10;                                    // Save staff info to SharedPreferences&#10;                                    staffPreferences.saveStaffInfo(staffInfoText)&#10;                                } else {&#10;                                    txtStaffInfo.text = getString(R.string.data_not_found)&#10;                                    txtStaffInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;                                    staffPreferences.saveStaffInfo(&quot;&quot;)&#10;                                }&#10;                            } catch (_: Exception) {&#10;                                txtStaffInfo.text = getString(R.string.data_not_found)&#10;                                txtStaffInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;                                staffPreferences.saveStaffInfo(&quot;&quot;)&#10;                            }&#10;                        }&#10;                    } catch (_: NumberFormatException) {&#10;                        txtStaffInfo.text = getString(R.string.data_not_found)&#10;                        staffPreferences.saveStaffInfo(&quot;&quot;)&#10;                    }&#10;                } else {&#10;                    txtStaffInfo.text = &quot;&quot;&#10;                    // Clear saved staff data if field is emptied&#10;                    staffPreferences.clearStaffPreferences()&#10;                }&#10;            }&#10;        }&#10;&#10;        // Production Order focus change listener&#10;        edtProductionOrder.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val proOrdNoStr = edtProductionOrder.text.toString().trim()&#10;                // Clear previous HeatNo buttons when Production Order changes&#10;                layoutHeatInfoButtons.removeAllViews()&#10;&#10;                if (proOrdNoStr.isNotEmpty()) {&#10;                    txtHeatInfo.text = getString(R.string.loading)&#10;                    txtHeatInfo.setTextColor(ContextCompat.getColor(this, android.R.color.holo_red_dark))&#10;&#10;                    lifecycleScope.launch {&#10;                        try {&#10;                            val response = getHeatNoApi.getHeatNo(proOrdNoStr)&#10;                            if (response != null &amp;&amp; !response.heatNo.isNullOrEmpty()) {&#10;                                val heatNo = response.heatNo!!&#10;                                txtHeatInfo.text = &quot;&quot;&#10;&#10;                                // Create clickable HeatNo button&#10;                                val heatNoButton = Button(this@MaterialLogActivity).apply {&#10;                                    text = &quot;HeatNo: $heatNo&quot;&#10;                                    setBackgroundResource(R.drawable.clickable_button_background)&#10;                                    setTextColor(ContextCompat.getColor(context, android.R.color.white))&#10;                                    layoutParams = LinearLayout.LayoutParams(&#10;                                        LinearLayout.LayoutParams.MATCH_PARENT,&#10;                                        LinearLayout.LayoutParams.WRAP_CONTENT&#10;                                    ).apply {&#10;                                        setMargins(0, 0, 0, 8)&#10;                                    }&#10;&#10;                                    setOnClickListener {&#10;                                        // Populate HeatNo field when button is clicked&#10;                                        edtHeatNo.setText(heatNo)&#10;                                        // Trigger HeatNo processing by simulating focus loss&#10;                                        edtHeatNo.clearFocus()&#10;                                        edtHeatNo.requestFocus()&#10;                                        edtHeatNo.clearFocus()&#10;                                    }&#10;                                }&#10;&#10;                                layoutHeatInfoButtons.addView(heatNoButton)&#10;                            } else {&#10;                                txtHeatInfo.text = getString(R.string.data_not_found)&#10;                                txtHeatInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;                            }&#10;                        } catch (_: Exception) {&#10;                            txtHeatInfo.text = getString(R.string.data_not_found)&#10;                            txtHeatInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;                        }&#10;                    }&#10;                } else {&#10;                    txtHeatInfo.text = &quot;&quot;&#10;                }&#10;            }&#10;        }&#10;&#10;        // HeatNo focus change listener&#10;        edtHeatNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val heatNoStr = edtHeatNo.text.toString().trim()&#10;                // Clear previous buttons&#10;                layoutHeatInfoButtons.removeAllViews()&#10;&#10;                if (heatNoStr.isNotEmpty()) {&#10;                    // Check if any mode is selected&#10;                    if (!isXuatHangModeSelected &amp;&amp; !isNhapHangModeSelected) {&#10;                        txtHeatInfo.text = &quot;Hãy chọn Nhập phôi hoặc Xuất phôi&quot;&#10;                        txtHeatInfo.setTextColor(ContextCompat.getColor(this, android.R.color.holo_red_dark))&#10;                        return@setOnFocusChangeListener&#10;                    }&#10;&#10;                    // Only proceed with API call if Xuất phôi is selected&#10;                    if (isXuatHangModeSelected) {&#10;                        txtHeatInfo.text = getString(R.string.loading)&#10;                        txtHeatInfo.setTextColor(ContextCompat.getColor(this, android.R.color.holo_red_dark))&#10;                        lifecycleScope.launch {&#10;                            try {&#10;                                val heatInfoList = heatNoApi.getHeatNoInfo(heatNoStr)&#10;                                if (heatInfoList != null &amp;&amp; heatInfoList.isNotEmpty()) {&#10;                                    txtHeatInfo.text = &quot;&quot;&#10;&#10;                                    // Create clickable buttons for each heat info item&#10;                                    heatInfoList.forEach { info -&gt;&#10;                                        val material = info.material ?: &quot;&quot;&#10;                                        val existQty = info.existQty?.toString() ?: &quot;&quot;&#10;                                        val inpSize1 = info.inpSize1 ?: &quot;&quot;&#10;                                        val inpSize2 = info.inpSize2 ?: &quot;&quot;&#10;                                        val qty = info.qty?.toString() ?: &quot;&quot;&#10;                                        val notes = info.notes ?: &quot;&quot;&#10;                                        val matIID = info.matIID ?: &quot;&quot;&#10;&#10;                                        // Include MatIID in the button text&#10;                                        val buttonText = &quot;ID: $matIID - $material, SL vật liệu $existQty, $inpSize1 * $inpSize2, SL con hàng $qty, $notes&quot;&#10;&#10;                                        val button = Button(this@MaterialLogActivity).apply {&#10;                                            text = buttonText&#10;                                            setBackgroundResource(R.drawable.clickable_button_background)&#10;                                            setTextColor(ContextCompat.getColor(context, android.R.color.white))&#10;                                            layoutParams = LinearLayout.LayoutParams(&#10;                                                LinearLayout.LayoutParams.MATCH_PARENT,&#10;                                                LinearLayout.LayoutParams.WRAP_CONTENT&#10;                                            ).apply {&#10;                                                setMargins(0, 0, 0, 8)&#10;                                            }&#10;&#10;                                            setOnClickListener {&#10;                                                // Store the MatIID internally for POST function&#10;                                                selectedMatIID = info.matIID ?: &quot;&quot;&#10;&#10;                                                // Show selected material with MatIID in the TextView&#10;                                                txtSelectedMaterial.text = &quot;ID: $matIID - Tên vật liệu: $material&quot;&#10;                                                txtSelectedMaterial.visibility = android.view.View.VISIBLE&#10;                                                txtSelectedMaterial.setTextColor(ContextCompat.getColor(context, android.R.color.holo_red_dark))&#10;&#10;                                                // Show size fields as display-only TextViews (no edit fields)&#10;                                                txtOldSize1.text = inpSize1&#10;                                                txtOldSize1.visibility = android.view.View.VISIBLE&#10;                                                txtOldSize1.setTextColor(ContextCompat.getColor(context, android.R.color.holo_red_dark))&#10;                                                edtSize1.visibility = android.view.View.GONE&#10;&#10;                                                txtOldSize2.text = inpSize2&#10;                                                txtOldSize2.visibility = android.view.View.VISIBLE&#10;                                                txtOldSize2.setTextColor(ContextCompat.getColor(context, android.R.color.holo_red_dark))&#10;                                                edtSize2.visibility = android.view.View.GONE&#10;&#10;                                                // Show job details field (Chi tiết công việc)&#10;                                                edtJobNo.hint = &quot;Chi tiết công việc&quot;&#10;                                                edtJobNo.visibility = android.view.View.VISIBLE&#10;&#10;                                                // Show material quantity with label above editable field&#10;                                                // Parse existQty from API response for consistency with &quot;SL vật liệu&quot;&#10;                                                txtMatQtyLabel.text = &quot;Số lượng dùng:&quot;&#10;                                                txtMatQtyLabel.visibility = android.view.View.VISIBLE&#10;                                                txtMatQtyLabel.setTextColor(ContextCompat.getColor(context, android.R.color.black))&#10;                                                edtMatQty.visibility = android.view.View.VISIBLE&#10;                                                edtMatQty.setText(existQty)&#10;&#10;                                                // Show part quantity with label above editable field&#10;                                                // Parse qty from API response for consistency with &quot;SL con hàng&quot;&#10;                                                txtPartQtyLabel.text = &quot;Số lượng con hàng:&quot;&#10;                                                txtPartQtyLabel.visibility = android.view.View.VISIBLE&#10;                                                txtPartQtyLabel.setTextColor(ContextCompat.getColor(context, android.R.color.black))&#10;                                                edtPartQty.visibility = android.view.View.VISIBLE&#10;                                                edtPartQty.setText(qty)&#10;&#10;                                                // Show notes field&#10;                                                edtNotes.visibility = android.view.View.VISIBLE&#10;&#10;&#10;                                                // Hide product quantity and warehouse area fields&#10;                                                edtWarehouseArea.visibility = android.view.View.GONE&#10;&#10;                                                // Show the &quot;Cập nhật&quot; button&#10;                                                btnXuatHang.visibility = android.view.View.VISIBLE&#10;                                            }&#10;                                        }&#10;&#10;                                        layoutHeatInfoButtons.addView(button)&#10;                                    }&#10;                                } else {&#10;                                    txtHeatInfo.text = getString(R.string.data_not_found)&#10;                                    txtHeatInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;                                }&#10;                            } catch (_: Exception) {&#10;                                txtHeatInfo.text = getString(R.string.data_not_found)&#10;                                txtHeatInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;                            }&#10;                        }&#10;                    } else if (isNhapHangModeSelected) {&#10;                        // For Nhập phôi mode - call GetInputMaterial API and show form for new material input&#10;                        txtHeatInfo.text = getString(R.string.loading)&#10;                        txtHeatInfo.setTextColor(ContextCompat.getColor(this, android.R.color.holo_red_dark))&#10;&#10;                        lifecycleScope.launch {&#10;                            try {&#10;                                val inputMaterialList = inputMaterialApi.getInputMaterial(heatNoStr)&#10;                                if (inputMaterialList != null &amp;&amp; inputMaterialList.isNotEmpty()) {&#10;                                    val firstMaterial = inputMaterialList[0]&#10;                                    val material = firstMaterial.material ?: &quot;&quot;&#10;                                    val matPONo = firstMaterial.matPONo ?: &quot;&quot;&#10;&#10;                                    // Store the actual material name for POST API&#10;                                    actualMaterialName = material&#10;&#10;                                    // Show material name field with API data&#10;                                    txtSelectedMaterial.text = &quot;Tên vật liệu: $material, P.O: $matPONo&quot;&#10;                                    txtSelectedMaterial.visibility = android.view.View.VISIBLE&#10;                                    txtSelectedMaterial.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;&#10;                                    txtHeatInfo.text = &quot;&quot;&#10;                                } else {&#10;                                    // No data found, show default&#10;                                    actualMaterialName = &quot;&quot;&#10;                                    txtSelectedMaterial.text = &quot;Tên vật liệu: chưa có&quot;&#10;                                    txtSelectedMaterial.visibility = android.view.View.VISIBLE&#10;                                    txtSelectedMaterial.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;&#10;                                    txtHeatInfo.text = &quot;&quot;&#10;                                }&#10;                            } catch (_: Exception) {&#10;                                // API call failed, show default&#10;                                actualMaterialName = &quot;&quot;&#10;                                txtSelectedMaterial.text = &quot;Tên vật liệu: chưa có&quot;&#10;                                txtSelectedMaterial.visibility = android.view.View.VISIBLE&#10;                                txtSelectedMaterial.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;&#10;                                txtHeatInfo.text = &quot;&quot;&#10;                            }&#10;                        }&#10;&#10;                        // Show material type selection buttons for Nhập phôi mode&#10;                        layoutMaterialTypeButtons.visibility = android.view.View.VISIBLE&#10;&#10;                        // Hide old size fields initially&#10;                        txtSize1Label.visibility = android.view.View.GONE&#10;                        edtSize1.visibility = android.view.View.GONE&#10;                        txtOldSize1.visibility = android.view.View.GONE&#10;                        txtSize2Label.visibility = android.view.View.GONE&#10;                        edtSize2.visibility = android.view.View.GONE&#10;                        txtOldSize2.visibility = android.view.View.GONE&#10;&#10;                        // Hide job and material quantity fields for Nhập phôi mode&#10;                        edtJobNo.visibility = android.view.View.GONE&#10;                        edtMatQty.visibility = android.view.View.GONE&#10;                        txtMatQtyLabel.visibility = android.view.View.GONE&#10;                        txtPartQtyLabel.visibility = android.view.View.GONE&#10;                        edtPartQty.visibility = android.view.View.GONE&#10;                        edtNotes.visibility = android.view.View.GONE&#10;                        edtWarehouseArea.visibility = android.view.View.GONE&#10;                        btnXuatHang.visibility = android.view.View.GONE&#10;                    }&#10;                } else {&#10;                    txtHeatInfo.text = &quot;&quot;&#10;                }&#10;            }&#10;        }&#10;&#10;        // Material type button click listeners&#10;        btnTam.setOnClickListener {&#10;            resetMaterialTypeButtons()&#10;            selectedMaterialType = &quot;TẤM&quot;&#10;            btnTam.setBackgroundResource(R.drawable.button_activated_background)&#10;&#10;            // Show TẤM specific fields&#10;            txtSizeALabel.text = &quot;Nhập chiều rộng&quot;&#10;            txtSizeALabel.visibility = android.view.View.VISIBLE&#10;            edtSizeA.hint = &quot;&quot;&#10;            edtSizeA.setText(&quot;&quot;)&#10;            edtSizeA.visibility = android.view.View.VISIBLE&#10;&#10;            txtSizeBLabel.text = &quot;Nhập độ dày&quot;&#10;            txtSizeBLabel.visibility = android.view.View.VISIBLE&#10;            edtSizeB.hint = &quot;&quot;&#10;            edtSizeB.setText(&quot;&quot;)&#10;            edtSizeB.visibility = android.view.View.VISIBLE&#10;&#10;            txtSizeCLabel.text = &quot;Nhập chiều dài&quot;&#10;            txtSizeCLabel.visibility = android.view.View.VISIBLE&#10;            edtSizeC.hint = &quot;&quot;&#10;            edtSizeC.setText(&quot;&quot;)&#10;            edtSizeC.visibility = android.view.View.VISIBLE&#10;&#10;            // Show warehouse area, material quantity and update button&#10;            edtWarehouseArea.visibility = android.view.View.VISIBLE&#10;            edtMatQtyInput.visibility = android.view.View.VISIBLE&#10;            btnXuatHang.visibility = android.view.View.VISIBLE&#10;        }&#10;&#10;        btnCay.setOnClickListener {&#10;            resetMaterialTypeButtons()&#10;            selectedMaterialType = &quot;CÂY&quot;&#10;            btnCay.setBackgroundResource(R.drawable.button_activated_background)&#10;&#10;            // Show CÂY specific fields&#10;            txtSizeALabel.text = &quot;Nhập đường kính&quot;&#10;            txtSizeALabel.visibility = android.view.View.VISIBLE&#10;            edtSizeA.hint = &quot;&quot;&#10;            edtSizeA.setText(&quot;D&quot;)&#10;            edtSizeA.visibility = android.view.View.VISIBLE&#10;&#10;            txtSizeBLabel.text = &quot;Nhập chiều dài&quot;&#10;            txtSizeBLabel.visibility = android.view.View.VISIBLE&#10;            edtSizeB.hint = &quot;&quot;&#10;            edtSizeB.setText(&quot;&quot;)&#10;            edtSizeB.visibility = android.view.View.VISIBLE&#10;&#10;            // Hide Size C for CÂY&#10;            txtSizeCLabel.visibility = android.view.View.GONE&#10;            edtSizeC.visibility = android.view.View.GONE&#10;&#10;            // Show warehouse area and update button&#10;            edtWarehouseArea.visibility = android.view.View.VISIBLE&#10;            edtMatQtyInput.visibility = android.view.View.VISIBLE&#10;            btnXuatHang.visibility = android.view.View.VISIBLE&#10;        }&#10;&#10;        btnOng.setOnClickListener {&#10;            resetMaterialTypeButtons()&#10;            selectedMaterialType = &quot;ỐNG&quot;&#10;            btnOng.setBackgroundResource(R.drawable.button_activated_background)&#10;&#10;            // Show ỐNG specific fields&#10;            txtSizeALabel.text = &quot;Nhập đường kính ngoài&quot;&#10;            txtSizeALabel.visibility = android.view.View.VISIBLE&#10;            edtSizeA.hint = &quot;&quot;&#10;            edtSizeA.setText(&quot;OD&quot;)&#10;            edtSizeA.visibility = android.view.View.VISIBLE&#10;&#10;            txtSizeBLabel.text = &quot;Nhập đường kính trong&quot;&#10;            txtSizeBLabel.visibility = android.view.View.VISIBLE&#10;            edtSizeB.hint = &quot;&quot;&#10;            edtSizeB.setText(&quot;ID&quot;)&#10;            edtSizeB.visibility = android.view.View.VISIBLE&#10;&#10;            txtSizeCLabel.text = &quot;Nhập chiều dài&quot;&#10;            txtSizeCLabel.visibility = android.view.View.VISIBLE&#10;            edtSizeC.hint = &quot;&quot;&#10;            edtSizeC.setText(&quot;&quot;)&#10;            edtSizeC.visibility = android.view.View.VISIBLE&#10;&#10;            // Show warehouse area, material quantity and update button&#10;            edtWarehouseArea.visibility = android.view.View.VISIBLE&#10;            edtMatQtyInput.visibility = android.view.View.VISIBLE&#10;            btnXuatHang.visibility = android.view.View.VISIBLE&#10;        }&#10;&#10;        // &quot;Cập nhật&quot; button click listener for submitting material usage data&#10;        btnXuatHang.setOnClickListener {&#10;            // Validate required fields for Xuất phôi mode&#10;            if (isXuatHangModeSelected) {&#10;                val staffNoStr = edtStaffNo.text.toString().trim()&#10;                val jobNo = edtJobNo.text.toString().trim()&#10;                val materialQtyStr = edtMatQty.text.toString().trim()&#10;                val partQtyStr = edtPartQty.text.toString().trim()&#10;                val notes = edtNotes.text.toString().trim()&#10;&#10;                // Validation&#10;                if (staffNoStr.isEmpty()) {&#10;                    android.widget.Toast.makeText(this, &quot;Vui lòng nhập số thợ&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                    return@setOnClickListener&#10;                }&#10;&#10;                if (selectedMatIID.isEmpty()) {&#10;                    android.widget.Toast.makeText(this, &quot;Vui lòng chọn vật liệu&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                    return@setOnClickListener&#10;                }&#10;&#10;                if (jobNo.isEmpty()) {&#10;                    android.widget.Toast.makeText(this, &quot;Vui lòng nhập chi tiết công việc&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                    return@setOnClickListener&#10;                }&#10;&#10;                if (materialQtyStr.isEmpty()) {&#10;                    android.widget.Toast.makeText(this, &quot;Vui lòng nhập số lượng vật liệu&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                    return@setOnClickListener&#10;                }&#10;&#10;                if (partQtyStr.isEmpty()) {&#10;                    android.widget.Toast.makeText(this, &quot;Vui lòng nhập số lượng con hàng&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                    return@setOnClickListener&#10;                }&#10;&#10;                try {&#10;                    val staffNo = staffNoStr.toInt()&#10;                    val materialQty = materialQtyStr.toInt()  // Changed from toFloat() to toInt()&#10;                    val partQty = partQtyStr.toInt()&#10;&#10;                    // Create POST data object&#10;                    val postData = PostMUsingDto(&#10;                        staffNo = staffNo,&#10;                        matIID = selectedMatIID,&#10;                        matQty = materialQty,  // Now using Int instead of Float&#10;                        partQty = partQty,&#10;                        jobNo = jobNo,&#10;                        notes = notes&#10;                    )&#10;&#10;                    // Show loading state&#10;                    btnXuatHang.text = &quot;Đang xử lý...&quot;&#10;                    btnXuatHang.isEnabled = false&#10;&#10;                    // Submit data to API&#10;                    lifecycleScope.launch {&#10;                        try {&#10;                            val response = postMUsingApi.postMaterialUsing(postData)&#10;&#10;                            if (response.isSuccessful) {&#10;                                val responseBody = response.body()&#10;                                if (responseBody != null) {&#10;                                    // Success - show response message&#10;                                    val successMessage = &quot;Thành công!\n${responseBody.message}&quot;&#10;&#10;                                    android.widget.Toast.makeText(this@MaterialLogActivity, successMessage, android.widget.Toast.LENGTH_LONG).show()&#10;&#10;                                    // Clear form after successful submission&#10;                                    clearAllFields()&#10;                                    resetButtonStates()&#10;                                    edtStaffNo.setText(&quot;&quot;)&#10;                                    edtHeatNo.setText(&quot;&quot;)&#10;                                    txtStaffInfo.text = &quot;&quot;&#10;                                    selectedMatIID = &quot;&quot;&#10;                                } else {&#10;                                    android.widget.Toast.makeText(this@MaterialLogActivity, &quot;Không có dữ liệu trả về&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                                }&#10;                            } else {&#10;                                // Handle API error response - show more detailed error info&#10;                                val httpCode = response.code()&#10;                                val errorMessage = try {&#10;                                    response.errorBody()?.string() ?: &quot;Lỗi HTTP $httpCode&quot;&#10;                                } catch (e: Exception) {&#10;                                    &quot;Lỗi HTTP $httpCode - không thể đọc chi tiết lỗi&quot;&#10;                                }&#10;&#10;                                android.util.Log.e(&quot;MaterialLogActivity&quot;, &quot;HTTP Error $httpCode: $errorMessage&quot;)&#10;                                android.widget.Toast.makeText(this@MaterialLogActivity, &quot;Lỗi HTTP $httpCode: $errorMessage&quot;, android.widget.Toast.LENGTH_LONG).show()&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            // Handle network or other errors&#10;                            android.widget.Toast.makeText(this@MaterialLogActivity, &quot;Lỗi kết nối: ${e.message}&quot;, android.widget.Toast.LENGTH_LONG).show()&#10;                            android.util.Log.e(&quot;MaterialLogActivity&quot;, &quot;POST request failed&quot;, e)&#10;                        } finally {&#10;                            // Reset button state&#10;                            btnXuatHang.text = &quot;Cập nhật&quot;&#10;                            btnXuatHang.isEnabled = true&#10;                        }&#10;                    }&#10;&#10;                } catch (e: NumberFormatException) {&#10;                    android.widget.Toast.makeText(this, &quot;Vui lòng nhập số hợp lệ&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                }&#10;            } else if (isNhapHangModeSelected) {&#10;                // Validate and submit for Nhập phôi mode&#10;                val staffNoStr = edtStaffNo.text.toString().trim()&#10;                val heatNoStr = edtHeatNo.text.toString().trim()&#10;                val warehouseAreaStr = edtWarehouseArea.text.toString().trim()&#10;                val matQtyStr = edtMatQtyInput.text.toString().trim()  // Fixed: Use edtMatQtyInput instead of edtMatQty&#10;&#10;                // Validation&#10;                if (staffNoStr.isEmpty()) {&#10;                    android.widget.Toast.makeText(this, &quot;Vui lòng nhập số thợ&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                    return@setOnClickListener&#10;                }&#10;&#10;                if (heatNoStr.isEmpty()) {&#10;                    android.widget.Toast.makeText(this, &quot;Vui lòng nhập Heat Number&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                    return@setOnClickListener&#10;                }&#10;&#10;                if (selectedMaterialType.isEmpty()) {&#10;                    android.widget.Toast.makeText(this, &quot;Vui lòng chọn loại vật liệu&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                    return@setOnClickListener&#10;                }&#10;&#10;                if (warehouseAreaStr.isEmpty()) {&#10;                    android.widget.Toast.makeText(this, &quot;Vui lòng nhập khu vực kho&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                    return@setOnClickListener&#10;                }&#10;&#10;                if (matQtyStr.isEmpty()) {&#10;                    android.widget.Toast.makeText(this, &quot;Vui lòng nhập số lượng vật liệu&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                    return@setOnClickListener&#10;                }&#10;&#10;                // Function to convert sizeA, sizeB, sizeC to newInpSize1 and newInpSize2&#10;                fun convertSizesToInpSizes(): Pair&lt;String, String&gt; {&#10;                    val sizeA = edtSizeA.text.toString().trim()&#10;                    val sizeB = edtSizeB.text.toString().trim()&#10;                    val sizeC = edtSizeC.text.toString().trim()&#10;&#10;                    return when (selectedMaterialType) {&#10;                        &quot;TẤM&quot; -&gt; {&#10;                            // For TẤM: newInpSize1 = chiều rộng, newInpSize2 = độ dày*chiều dài&#10;                            val newInpSize1 = sizeA // chiều rộng&#10;                            val newInpSize2 = &quot;${sizeB}*${sizeC}&quot; // độ dày*chiều dài&#10;                            Pair(newInpSize1, newInpSize2)&#10;                        }&#10;                        &quot;CÂY&quot; -&gt; {&#10;                            // For CÂY: newInpSize1 = đường kính, newInpSize2 = chiều dài&#10;                            val newInpSize1 = sizeA // đường kính (D)&#10;                            val newInpSize2 = sizeB // chiều dài&#10;                            Pair(newInpSize1, newInpSize2)&#10;                        }&#10;                        &quot;ỐNG&quot; -&gt; {&#10;                            // For ỐNG: newInpSize1 = đường kính ngoài, newInpSize2 = đường kính trong*chiều dài&#10;                            val newInpSize1 = sizeA // đường kính ngoài (OD)&#10;                            val newInpSize2 = &quot;${sizeB}*${sizeC}&quot; // đường kính trong*chiều dài&#10;                            Pair(newInpSize1, newInpSize2)&#10;                        }&#10;                        else -&gt; Pair(&quot;&quot;, &quot;&quot;)&#10;                    }&#10;                }&#10;&#10;                try {&#10;                    val staffNo = staffNoStr.toInt()&#10;                    val matQty = matQtyStr.toInt()  // Changed from toFloat() to toInt()&#10;                    val (newInpSize1, newInpSize2) = convertSizesToInpSizes()&#10;&#10;                    // Create POST data object for material input using the correct API structure&#10;                    val postData = PostMInputDto(&#10;                        staffNo = staffNo,&#10;                        heatNo = heatNoStr,&#10;                        materialType = actualMaterialName, // Use actual material name from GetInputMaterial API&#10;                        newInpSize1 = newInpSize1,&#10;                        newInpSize2 = newInpSize2,&#10;                        warehouseArea = warehouseAreaStr,&#10;                        matQty = matQty&#10;                    )&#10;&#10;                    // Show loading state&#10;                    btnXuatHang.text = &quot;Đang xử lý...&quot;&#10;                    btnXuatHang.isEnabled = false&#10;&#10;                    // Submit data to API&#10;                    lifecycleScope.launch {&#10;                        try {&#10;                            val response = postMInputApi.postMaterialInput(postData)&#10;&#10;                            if (response.isSuccessful) {&#10;                                val responseBody = response.body()&#10;                                if (responseBody != null) {&#10;                                    // Success - show response message&#10;                                    val successMessage = &quot;Nhập phôi thành công!\n${responseBody.message}&quot;&#10;                                    android.widget.Toast.makeText(this@MaterialLogActivity, successMessage, android.widget.Toast.LENGTH_LONG).show()&#10;&#10;                                    // Clear form after successful submission&#10;                                    clearAllFields()&#10;                                    resetButtonStates()&#10;                                    edtStaffNo.setText(&quot;&quot;)&#10;                                    edtHeatNo.setText(&quot;&quot;)&#10;                                    txtStaffInfo.text = &quot;&quot;&#10;                                    selectedMatIID = &quot;&quot;&#10;                                } else {&#10;                                    android.widget.Toast.makeText(this@MaterialLogActivity, &quot;Không có dữ liệu trả về&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                                }&#10;                            } else {&#10;                                // Handle API error response - show more detailed error info&#10;                                val httpCode = response.code()&#10;                                val errorMessage = try {&#10;                                    response.errorBody()?.string() ?: &quot;Lỗi HTTP $httpCode&quot;&#10;                                } catch (e: Exception) {&#10;                                    &quot;Lỗi HTTP $httpCode - không thể đọc chi tiết lỗi&quot;&#10;                                }&#10;&#10;                                android.util.Log.e(&quot;MaterialLogActivity&quot;, &quot;HTTP Error $httpCode: $errorMessage&quot;)&#10;                                android.widget.Toast.makeText(this@MaterialLogActivity, &quot;Lỗi HTTP $httpCode: $errorMessage&quot;, android.widget.Toast.LENGTH_LONG).show()&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            // Handle network or other errors&#10;                            android.widget.Toast.makeText(this@MaterialLogActivity, &quot;Lỗi kết nối: ${e.message}&quot;, android.widget.Toast.LENGTH_LONG).show()&#10;                            android.util.Log.e(&quot;MaterialLogActivity&quot;, &quot;POST request failed&quot;, e)&#10;                        } finally {&#10;                            // Reset button state&#10;                            btnXuatHang.text = &quot;Cập nhật&quot;&#10;                            btnXuatHang.isEnabled = true&#10;                        }&#10;                    }&#10;&#10;                } catch (e: NumberFormatException) {&#10;                    android.widget.Toast.makeText(this, &quot;Vui lòng nhập số hợp lệ&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Auto-call staff API with saved staff number&#10;    private fun autoCallStaffApi(staffNo: Int) {&#10;        val txtStaffInfo = findViewById&lt;TextView&gt;(R.id.txtStaffInfo)&#10;        val edtStaffNo = findViewById&lt;EditText&gt;(R.id.edtStaffNo)&#10;        val staffApi = RetrofitClient.retrofitPublic.create(StaffApi::class.java)&#10;&#10;        txtStaffInfo.text = getString(R.string.loading)&#10;        txtStaffInfo.setTextColor(ContextCompat.getColor(this, android.R.color.holo_red_dark))&#10;&#10;        lifecycleScope.launch {&#10;            try {&#10;                val info = staffApi.getStaff(staffNo)&#10;                if (info != null) {&#10;                    txtStaffInfo.text = listOfNotNull(info.fullName, info.workJob, info.workPlace).joinToString(&quot;, &quot;)&#10;                    txtStaffInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;                } else {&#10;                    txtStaffInfo.text = getString(R.string.data_not_found)&#10;                    txtStaffInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;                }&#10;            } catch (_: Exception) {&#10;                txtStaffInfo.text = getString(R.string.data_not_found)&#10;                txtStaffInfo.setTextColor(ContextCompat.getColor(this@MaterialLogActivity, android.R.color.holo_red_dark))&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_material_log.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_material_log.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;24dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnScan&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;Scan&quot;&#10;                android:layout_marginEnd=&quot;4dp&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnNhapHang&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;Nhập phôi&quot;&#10;                android:layout_marginStart=&quot;4dp&quot;&#10;                android:layout_marginEnd=&quot;4dp&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnXuatHangTop&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;Xuất phôi&quot;&#10;                android:layout_marginStart=&quot;4dp&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtStaffNo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Thợ&quot;&#10;            android:layout_marginTop=&quot;0dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;number&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtStaffInfo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtProductionOrder&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Lệnh sản xuất&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;text&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtHeatNo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;HeatNo&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;text&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtHeatInfo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/layoutHeatInfoButtons&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtSelectedMaterial&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;!-- Material Type Selection Buttons --&gt;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/layoutMaterialTypeButtons&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:visibility=&quot;gone&quot;&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnTam&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;TẤM&quot;&#10;                android:layout_marginEnd=&quot;4dp&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnCay&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;CÂY&quot;&#10;                android:layout_marginStart=&quot;4dp&quot;&#10;                android:layout_marginEnd=&quot;4dp&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnOng&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;ỐNG&quot;&#10;                android:layout_marginStart=&quot;4dp&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Size A Label and Input --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtSizeALabel&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Size A Label&quot;&#10;            android:textColor=&quot;@android:color/holo_blue_dark&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtSizeA&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Size A&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;!-- Size B Label and Input --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtSizeBLabel&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Size B Label&quot;&#10;            android:textColor=&quot;@android:color/holo_blue_dark&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtSizeB&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Size B&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;!-- Size C Label and Input --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtSizeCLabel&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Size C Label&quot;&#10;            android:textColor=&quot;@android:color/holo_blue_dark&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtSizeC&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Size C&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;!-- Original Size 1 Label and Input (for existing functionality) --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtSize1Label&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Nhập kích thước 1 (rộng/ OD/ dầy)&quot;&#10;            android:textColor=&quot;@android:color/holo_blue_dark&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtSize1&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Kích thước 1&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtOldSize1&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;            android:layout_marginTop=&quot;4dp&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;!-- Original Size 2 Label and Input (for existing functionality) --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtSize2Label&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Nhập kích thước 2 (dài/ ID*dài/ dày*dài)&quot;&#10;            android:textColor=&quot;@android:color/holo_blue_dark&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtSize2&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Kích thước 2&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtOldSize2&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;            android:layout_marginTop=&quot;4dp&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtJobNo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Chi tiết công việc&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtOldMaterialQty&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textColor=&quot;@android:color/black&quot;&#10;            android:layout_marginTop=&quot;32dp&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtMaterialQty&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Số lượng vật liệu&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;number&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtPartQtyLabel&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Số lượng con hàng:&quot;&#10;            android:textColor=&quot;@android:color/black&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtPartQty&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Số lượng con hàng&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;number&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtNotes&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Ghi chú&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtWarehouseArea&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Khu vực kho&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtMatQty&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Số lượng vật liệu&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;numberDecimal&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnXuatHang&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Cập nhật&quot;&#10;            android:layout_marginTop=&quot;24dp&quot;&#10;            android:background=&quot;@drawable/clickable_button_background&quot;&#10;            android:textColor=&quot;@android:color/white&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;!-- ...other UI elements... --&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;24dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnScan&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;Scan&quot;&#10;                android:layout_marginEnd=&quot;4dp&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnNhapHang&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;Nhập phôi&quot;&#10;                android:layout_marginStart=&quot;4dp&quot;&#10;                android:layout_marginEnd=&quot;4dp&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnXuatHangTop&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;Xuất phôi&quot;&#10;                android:layout_marginStart=&quot;4dp&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtStaffNo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Thợ&quot;&#10;            android:layout_marginTop=&quot;0dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;number&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtStaffInfo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtProductionOrder&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Lệnh sản xuất&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;text&quot; /&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/layoutHeatInfoButtons&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtHeatNo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;HeatNo&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;text&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtModeSelectionMessage&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Hãy chọn Nhập phôi hoặc Xuất phôi&quot;&#10;            android:textColor=&quot;@android:color/holo_orange_dark&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:visibility=&quot;visible&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtHeatInfo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtSelectedMaterial&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;!-- Material Type Selection Buttons --&gt;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/layoutMaterialTypeButtons&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:visibility=&quot;gone&quot;&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnTam&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;TẤM&quot;&#10;                android:layout_marginEnd=&quot;4dp&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnCay&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;CÂY&quot;&#10;                android:layout_marginStart=&quot;4dp&quot;&#10;                android:layout_marginEnd=&quot;4dp&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnOng&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;ỐNG&quot;&#10;                android:layout_marginStart=&quot;4dp&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Size A Label and Input --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtSizeALabel&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Size A Label&quot;&#10;            android:textColor=&quot;@android:color/holo_blue_dark&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtSizeA&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Size A&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;!-- Size B Label and Input --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtSizeBLabel&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Size B Label&quot;&#10;            android:textColor=&quot;@android:color/holo_blue_dark&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtSizeB&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Size B&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;!-- Size C Label and Input --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtSizeCLabel&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Size C Label&quot;&#10;            android:textColor=&quot;@android:color/holo_blue_dark&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtSizeC&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Size C&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;!-- Original Size 1 Label and Input (for existing functionality) --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtSize1Label&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Nhập kích thước 1 (rộng/ OD/ dầy)&quot;&#10;            android:textColor=&quot;@android:color/holo_blue_dark&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtSize1&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Kích thước 1&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtOldSize1&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;            android:layout_marginTop=&quot;4dp&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;!-- Original Size 2 Label and Input (for existing functionality) --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtSize2Label&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Nhập kích thước 2 (dài/ ID*dài/ dày*dài)&quot;&#10;            android:textColor=&quot;@android:color/holo_blue_dark&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtSize2&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Kích thước 2&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtOldSize2&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;            android:layout_marginTop=&quot;4dp&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtJobNo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Chi tiết công việc&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtOldMaterialQty&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textColor=&quot;@android:color/black&quot;&#10;            android:layout_marginTop=&quot;32dp&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtMaterialQty&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Số lượng vật liệu&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;number&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtPartQtyLabel&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Số lượng con hàng:&quot;&#10;            android:textColor=&quot;@android:color/black&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtPartQty&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Số lượng con hàng&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;number&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtNotes&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Ghi chú&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtWarehouseArea&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Khu vực kho&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtMatQty&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Số lượng vật liệu&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:imeOptions=&quot;actionNext&quot;&#10;            android:inputType=&quot;numberDecimal&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnXuatHang&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Cập nhật&quot;&#10;            android:layout_marginTop=&quot;24dp&quot;&#10;            android:background=&quot;@drawable/clickable_button_background&quot;&#10;            android:textColor=&quot;@android:color/white&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;!-- ...other UI elements... --&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>