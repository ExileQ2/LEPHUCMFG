<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/lephucmfg/MachineLogActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/lephucmfg/MachineLogActivity.kt" />
              <option name="originalContent" value="package com.example.lephucmfg&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.View&#10;import android.view.inputmethod.EditorInfo&#10;import android.view.inputmethod.InputMethodManager&#10;import android.widget.Button&#10;import android.widget.CheckBox&#10;import android.widget.EditText&#10;import android.widget.LinearLayout&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.lifecycle.lifecycleScope&#10;import com.example.lephucmfg.network.RetrofitClient&#10;import com.example.lephucmfg.utils.LoadingStates&#10;    // --- API interface for fetching staff info (&quot;Thợ&quot;) ---&#10;    // --- Data class for staff info ---&#10;    )&#10;    }&#10;    )&#10;    }&#10;    // --- API interface for fetching serial info (GetSerial) ---&#10;    // --- Data class for serial info ---&#10;    interface ProcessNoApi {&#10;        @SerializedName(&quot;processNo&quot;) val processNo: String?,&#10;    // --- API interface for posting machine log ---&#10;    data class NhatKyGiaCongDto(&#10;        val note: String?,&#10;        val qtyGood: Int,&#10;    // Shared function to process machine and staff data&#10;        val txtProcessNo = findViewById&lt;TextView&gt;(R.id.txtProcessNo)&#10;        val txtMachineRunning = findViewById&lt;TextView&gt;(R.id.txtMachineRunning)&#10;        val layoutSmallEdits = findViewById&lt;LinearLayout&gt;(R.id.layoutSmallEdits)&#10;        val edtJobNo = findViewById&lt;EditText&gt;(R.id.edtJobNo)&#10;        val edtProOrdNo = findViewById&lt;EditText&gt;(R.id.edtProOrdNo)&#10;        val edtSerial = findViewById&lt;EditText&gt;(R.id.edtSerial)&#10;        val edtGhiChu = findViewById&lt;EditText&gt;(R.id.edtGhiChu)&#10;        val layoutProOrdNoResults = findViewById&lt;android.widget.GridLayout&gt;(R.id.layoutProOrdNoResults)&#10;        val machineApi = RetrofitClient.retrofitPublic.create(MachineApi::class.java)&#10;&#10;        val staffNo = edtStaffNo.text.toString().trim()&#10;        val mcName = edtMcName.text.toString().trim()&#10;&#10;        // If machine code is empty, clear everything and return&#10;        if (mcName.isEmpty()) {&#10;            txtMachineInfo.text = &quot;&quot;&#10;            txtProcessNo.text = &quot;&quot;&#10;            txtMachineRunning.visibility = View.GONE&#10;            layoutSmallEdits.visibility = View.GONE&#10;            edtJobNo.isEnabled = true&#10;            edtProOrdNo.isEnabled = true&#10;            edtSerial.isEnabled = true&#10;            edtGhiChu.isEnabled = true&#10;            updateSubmitButtonState()&#10;            return&#10;        }&#10;&#10;        // Show loading indicator&#10;        txtMachineInfo.text = LoadingStates.LOADING&#10;        txtMachineInfo.setTextColor(LoadingStates.getLoadingColor(resources))&#10;&#10;        var machineModel: String? = null&#10;        var machineStatus: String? = null&#10;&#10;        // Fetch machine info&#10;        try {&#10;            val info = machineApi.getMachine(mcName)&#10;            if (info != null) {&#10;                txtMachineInfo.text = listOfNotNull(info.model, info.status).joinToString(&quot;, &quot;)&#10;                txtMachineInfo.setTextColor(resources.getColor(android.R.color.holo_blue_dark))&#10;                machineModel = info.model&#10;                machineStatus = info.status&#10;            } else {&#10;                txtMachineInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;                txtMachineInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;            }&#10;        } catch (e: Exception) {&#10;            txtMachineInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;            txtMachineInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;        }&#10;&#10;        // Fetch ProcessNo if both staff and machine are available&#10;        var processNoValue: String? = null&#10;        var processNoDto: ProcessNoDto? = null&#10;&#10;        if (staffNo.isNotEmpty()) {&#10;            try {&#10;                val processNoApi = RetrofitClient.retrofitPublic.create(ProcessNoApi::class.java)&#10;                processNoDto = processNoApi.getProcessNo(staffNo, mcName)&#10;                processNoValue = processNoDto.processNo?.trim()&#10;                txtProcessNo.text = processNoValue ?: &quot;&quot;&#10;&#10;                // If we have a processNo, show &quot;Máy đang chạy&quot; and auto-fill fields&#10;                if (!processNoValue.isNullOrBlank()) {&#10;                    txtMachineRunning.visibility = View.VISIBLE&#10;                    txtMachineRunning.text = &quot;Máy đang chạy&quot;&#10;                    txtMachineRunning.setTextColor(resources.getColor(android.R.color.holo_green_dark))&#10;                    txtMachineRunning.setTypeface(null, android.graphics.Typeface.NORMAL)&#10;                    layoutSmallEdits.visibility = View.VISIBLE&#10;&#10;                    // Auto-fill fields with data from processNoDto&#10;                    if (!machineModel.isNullOrBlank()) {&#10;                        edtJobNo.setText(machineModel)&#10;                        edtJobNo.isEnabled = false&#10;                    }&#10;&#10;                    if (!processNoDto.proOrdNo2.isNullOrBlank()) {&#10;                        edtProOrdNo.setText(processNoDto.proOrdNo2)&#10;                        edtProOrdNo.requestFocus()&#10;                        edtProOrdNo.clearFocus()&#10;                        edtProOrdNo.isEnabled = false&#10;                    }&#10;&#10;                    if (!processNoDto.serial2.isNullOrBlank()) {&#10;                        edtSerial.setText(processNoDto.serial2)&#10;                        edtSerial.isEnabled = true&#10;                    }&#10;&#10;                    if (!processNoDto.note.isNullOrBlank()) {&#10;                        edtGhiChu.setText(processNoDto.note)&#10;                        edtGhiChu.isEnabled = true&#10;                    }&#10;&#10;                    // Hide keyboard and clear any remaining focus&#10;                    val imm = getSystemService(INPUT_METHOD_SERVICE) as? InputMethodManager&#10;                    imm?.hideSoftInputFromWindow(edtGhiChu.windowToken, 0)&#10;                    layoutProOrdNoResults.removeAllViews()&#10;&#10;                    updateSubmitButtonState()&#10;                    return&#10;                }&#10;            } catch (e: Exception) {&#10;                txtProcessNo.text = &quot;&quot;&#10;            }&#10;        } else {&#10;            txtProcessNo.text = &quot;&quot;&#10;        }&#10;&#10;        // Show machine status based on machine status only&#10;        when {&#10;            machineStatus?.contains(&quot;Status: Ready&quot;, ignoreCase = true) == true -&gt; {&#10;                txtMachineRunning.visibility = View.VISIBLE&#10;                txtMachineRunning.text = &quot;Đang chờ việc&quot;&#10;                txtMachineRunning.setTextColor(resources.getColor(android.R.color.holo_orange_dark))&#10;                txtMachineRunning.setTypeface(null, android.graphics.Typeface.NORMAL)&#10;                layoutSmallEdits.visibility = View.GONE&#10;            }&#10;            machineStatus?.contains(&quot;Status: Processing&quot;, ignoreCase = true) == true -&gt; {&#10;                txtMachineRunning.visibility = View.VISIBLE&#10;                txtMachineRunning.text = &quot;Đang gia công&quot;&#10;                txtMachineRunning.setTextColor(resources.getColor(android.R.color.holo_green_dark))&#10;                txtMachineRunning.setTypeface(null, android.graphics.Typeface.BOLD)&#10;                layoutSmallEdits.visibility = View.GONE&#10;            }&#10;            machineStatus?.contains(&quot;Status: Maintenance&quot;, ignoreCase = true) == true -&gt; {&#10;                txtMachineRunning.visibility = View.VISIBLE&#10;                txtMachineRunning.text = &quot;Đang bảo trì&quot;&#10;                txtMachineRunning.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                txtMachineRunning.setTypeface(null, android.graphics.Typeface.NORMAL)&#10;                layoutSmallEdits.visibility = View.GONE&#10;            }&#10;            machineStatus?.contains(&quot;Status: BeingSetup&quot;, ignoreCase = true) == true -&gt; {&#10;                txtMachineRunning.visibility = View.VISIBLE&#10;                txtMachineRunning.text = &quot;Đang setup&quot;&#10;                txtMachineRunning.setTextColor(resources.getColor(android.R.color.holo_orange_dark))&#10;                txtMachineRunning.setTypeface(null, android.graphics.Typeface.NORMAL)&#10;                layoutSmallEdits.visibility = View.GONE&#10;            }&#10;            machineStatus?.contains(&quot;Status: Damage&quot;, ignoreCase = true) == true -&gt; {&#10;                txtMachineRunning.visibility = View.VISIBLE&#10;                txtMachineRunning.text = &quot;Báo hư chờ sửa&quot;&#10;                txtMachineRunning.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                txtMachineRunning.setTypeface(null, android.graphics.Typeface.NORMAL)&#10;                layoutSmallEdits.visibility = View.GONE&#10;            }&#10;            else -&gt; {&#10;                txtMachineRunning.visibility = View.GONE&#10;                layoutSmallEdits.visibility = View.GONE&#10;            }&#10;        }&#10;&#10;        // Re-enable editing when machine is not running for this user&#10;        edtJobNo.isEnabled = true&#10;        edtProOrdNo.isEnabled = true&#10;        edtSerial.isEnabled = true&#10;        edtGhiChu.isEnabled = true&#10;&#10;        updateSubmitButtonState()&#10;    }&#10;&#10;    // Function to check machine status and control submit button&#10;    private fun updateSubmitButtonState() {&#10;        val btnSubmit = findViewById&lt;Button&gt;(R.id.btnSubmit)&#10;        val txtMachineInfo = findViewById&lt;TextView&gt;(R.id.txtMachineInfo)&#10;        val txtMachineRunning = findViewById&lt;TextView&gt;(R.id.txtMachineRunning)&#10;&#10;        val machineInfoText = txtMachineInfo.text.toString()&#10;        val machineRunningText = txtMachineRunning.text.toString()&#10;        val isMachineRunningVisible = txtMachineRunning.visibility == View.VISIBLE&#10;&#10;        // Check conditions that should block submit&#10;        val hasProcessingStatus = machineInfoText.contains(&quot;Status: Processing&quot;, ignoreCase = true)&#10;        val isShowingProcessingForOther = isMachineRunningVisible &amp;&amp; machineRunningText == &quot;Đang gia công&quot;&#10;        val hasMaintenanceStatus = machineInfoText.contains(&quot;Status: Maintenance&quot;, ignoreCase = true)&#10;        val isShowingMaintenance = isMachineRunningVisible &amp;&amp; machineRunningText == &quot;Đang bảo trì&quot;&#10;        val hasBeingSetupStatus = machineInfoText.contains(&quot;Status: BeingSetup&quot;, ignoreCase = true)&#10;        val isShowingBeingSetup = isMachineRunningVisible &amp;&amp; machineRunningText == &quot;Đang setup&quot;&#10;        val hasDamageStatus = machineInfoText.contains(&quot;Status: Damage&quot;, ignoreCase = true)&#10;        val isShowingDamage = isMachineRunningVisible &amp;&amp; machineRunningText == &quot;Báo hư chờ sửa&quot;&#10;&#10;        val shouldBlockSubmit = (hasProcessingStatus &amp;&amp; isShowingProcessingForOther) ||&#10;                               (hasMaintenanceStatus &amp;&amp; isShowingMaintenance) ||&#10;                               (hasBeingSetupStatus &amp;&amp; isShowingBeingSetup) ||&#10;                               (hasDamageStatus &amp;&amp; isShowingDamage)&#10;&#10;        if (shouldBlockSubmit) {&#10;            btnSubmit.isEnabled = false&#10;            btnSubmit.alpha = 0.5f // Gray out the button&#10;        } else {&#10;            btnSubmit.isEnabled = true&#10;            btnSubmit.alpha = 1.0f // Restore normal appearance&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_machine_log)&#10;&#10;        // --- UI references for &quot;Thợ&quot; (Staff) block ---&#10;        val edtStaffNo = findViewById&lt;EditText&gt;(R.id.edtStaffNo)&#10;        val txtStaffInfo = findViewById&lt;TextView&gt;(R.id.txtStaffInfo)&#10;        val api = RetrofitClient.retrofitPublic.create(StaffApi::class.java)&#10;&#10;        val txtProcessNo = findViewById&lt;TextView&gt;(R.id.txtProcessNo)&#10;        val txtMachineRunning = findViewById&lt;TextView&gt;(R.id.txtMachineRunning)&#10;&#10;        // --- UI reference for serial info below LSX (ProOrdNo) ---&#10;        val edtProOrdNo = findViewById&lt;EditText&gt;(R.id.edtProOrdNo)&#10;        val btnScan = findViewById&lt;Button&gt;(R.id.btnScan)&#10;&#10;        // --- UI references for small quantity EditTexts ---&#10;        val edtDat = findViewById&lt;EditText&gt;(R.id.edtDat)&#10;        val edtPhe = findViewById&lt;EditText&gt;(R.id.edtPhe)&#10;                edtJobNo.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;                    edtDat.requestFocus()&#10;                } else {&#10;                    edtGhiChu.requestFocus()&#10;                }&#10;                true&#10;        edtXuLy.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtGhiChu.requestFocus()&#10;                true&#10;            } else false&#10;                        val staffNo = staffNoStr.toInt()&#10;                        // Show loading indicator using LoadingStates&#10;                        txtStaffInfo.text = LoadingStates.LOADING&#10;                        txtStaffInfo.setTextColor(LoadingStates.getLoadingColor(resources))&#10;&#10;                            processMachineAndStaff()&#10;                        }&#10;                    } catch (e: NumberFormatException) {&#10;                        // Show error if input is not a number&#10;                lifecycleScope.launch {&#10;            if (!hasFocus) {&#10;                val jobNo = edtJobNo.text.toString().trim()&#10;                if (jobNo.isNotEmpty()) {&#10;                    // Show loading indicator&#10;                    txtJobInfo.visibility = View.VISIBLE&#10;                                // Machine is running - don't show any buttons, just clear and return&#10;                                return@launch&#10;                            }&#10;&#10;                            if (proOrdList.isNotEmpty()) {&#10;                                            edtProOrdNo.clearFocus()&#10;                                            val imm = getSystemService(INPUT_METHOD_SERVICE) as? InputMethodManager&#10;                                            imm?.hideSoftInputFromWindow(edtProOrdNo.windowToken, 0)&#10;                                        }&#10;                                        layoutProOrdNoResults.addView(tv)&#10;            if (!hasFocus) {&#10;                val proOrdNo = edtProOrdNo.text.toString().trim()&#10;                if (proOrdNo.isNotEmpty()) {&#10;                    lifecycleScope.launch {&#10;                        try {&#10;        )&#10;&#10;        // Register ActivityResultLauncher for QR scan (must be defined before ScanHelper)&#10;        var scanHelper: ScanHelper? = null&#10;        val scanLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result -&gt;&#10;            // Prevent submit if any error message is shown&#10;            val dataError = &quot;Không lấy được dữ liệu&quot;&#10;            val serverError = &quot;Không lấy được dữ liệu&quot;&#10;            val errorFields = listOf(txtStaffInfo, txtMachineInfo, txtSerialInfo)&#10;            if (errorFields.any {&#10;            )&#10;            lifecycleScope.launch {&#10;                try {&#10;                    android.util.Log.d(&quot;POST_DTO&quot;, Gson().toJson(dto)) // Log the payload&#10;                    val response = postApi.postLog(dto)&#10;" />
              <option name="updatedContent" value="package com.example.lephucmfg&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.View&#10;import android.view.inputmethod.EditorInfo&#10;import android.view.inputmethod.InputMethodManager&#10;import android.widget.Button&#10;import android.widget.CheckBox&#10;import android.widget.EditText&#10;import android.widget.LinearLayout&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.lifecycle.lifecycleScope&#10;import com.example.lephucmfg.network.RetrofitClient&#10;import com.example.lephucmfg.utils.LoadingStates&#10;import com.example.lephucmfg.utils.StaffPreferences&#10;import com.google.gson.annotations.SerializedName&#10;import kotlinx.coroutines.launch&#10;import okhttp3.ResponseBody&#10;import com.google.gson.Gson&#10;import com.google.gson.JsonElement&#10;import com.google.gson.JsonParser&#10;import retrofit2.Call&#10;import retrofit2.Callback&#10;import retrofit2.Response&#10;import retrofit2.http.GET&#10;import retrofit2.http.Path&#10;import retrofit2.http.POST&#10;import retrofit2.http.Body&#10;&#10;class MachineLogActivity : AppCompatActivity() {&#10;&#10;    // Add StaffPreferences instance&#10;    private lateinit var staffPreferences: StaffPreferences&#10;&#10;    // --- API interface for fetching staff info (&quot;Thợ&quot;) ---&#10;    interface StaffApi {&#10;        @GET(&quot;/api/GetStaff/{staffNo}&quot;)&#10;        suspend fun getStaff(@Path(&quot;staffNo&quot;) staffNo: Int): StaffInfo?&#10;    }&#10;    // --- Data class for staff info ---&#10;    data class StaffInfo(&#10;        @SerializedName(&quot;fullName&quot;) val fullName: String?,&#10;        @SerializedName(&quot;workJob&quot;) val workJob: String?,&#10;        @SerializedName(&quot;workPlace&quot;) val workPlace: String?&#10;    )&#10;    // --- API interface for fetching machine info (&quot;Mã máy&quot;) ---&#10;    interface MachineApi {&#10;        @GET(&quot;/api/GetMachine/{mcName}&quot;)&#10;        suspend fun getMachine(@Path(&quot;mcName&quot;) mcName: String): MachineInfo?&#10;    }&#10;    // --- Data class for machine info ---&#10;    data class MachineInfo(&#10;        @SerializedName(&quot;model&quot;) val model: String?,&#10;        @SerializedName(&quot;status&quot;) val status: String?&#10;    )&#10;    // --- API interface for fetching production order (LSX/ProOrdNo) ---&#10;    interface ProOrdApi {&#10;        @GET(&quot;/api/Laylsx/{JobControlNo}&quot;)&#10;        suspend fun getProOrd(@Path(&quot;JobControlNo&quot;) jobControlNo: String): ResponseBody&#10;    }&#10;    // --- Data class for production order DTO ---&#10;    data class ProOrdDto(&#10;        @SerializedName(&quot;jobControlNo&quot;) val jobControlNo: String?&#10;    )&#10;    // --- API interface for fetching serial info (GetSerial) ---&#10;    interface SerialApi {&#10;        @GET(&quot;/api/GetSerial/{proOrdNo}&quot;)&#10;        suspend fun getSerial(@Path(&quot;proOrdNo&quot;) proOrdNo: String): List&lt;SerialDto&gt;&#10;    }&#10;    // --- Data class for serial info ---&#10;    data class SerialDto(&#10;        @SerializedName(&quot;serial&quot;) val serial: String?&#10;    )&#10;    // --- API interface for fetching process number (ProcessNo) ---&#10;    interface ProcessNoApi {&#10;        @GET(&quot;/api/GetProcessNoChuaKetThuc/{StaffNo}/{McName}&quot;)&#10;        suspend fun getProcessNo(@Path(&quot;StaffNo&quot;) staffNo: String, @Path(&quot;McName&quot;) mcName: String): ProcessNoDto&#10;    }&#10;    data class ProcessNoDto(&#10;        @SerializedName(&quot;processNo&quot;) val processNo: String?,&#10;        @SerializedName(&quot;note&quot;) val note: String?,&#10;        @SerializedName(&quot;serial2&quot;) val serial2: String?,&#10;        @SerializedName(&quot;proOrdNo2&quot;) val proOrdNo2: String?&#10;    )&#10;    // --- API interface for posting machine log ---&#10;    interface PostNhatKyGiaCongApi {&#10;        @POST(&quot;/api/postNhatKyGiaCong&quot;)&#10;        suspend fun postLog(@Body body: NhatKyGiaCongDto): retrofit2.Response&lt;Void&gt;&#10;    }&#10;    data class NhatKyGiaCongDto(&#10;        val processNo: String?,&#10;        val jobControlNo: String?,&#10;        val staffNo: String?,&#10;        val mcName: String?,&#10;        val note: String?,&#10;        val proOrdNo: String?,&#10;        val serial: String?,&#10;        val setup: Boolean,&#10;        val rework: Boolean,&#10;        val qtyGood: Int,&#10;        val qtyReject: Int,&#10;        val qtyRework: Int&#10;    )&#10;&#10;    // Shared function to process machine and staff data&#10;    private suspend fun processMachineAndStaff() {&#10;        val edtStaffNo = findViewById&lt;EditText&gt;(R.id.edtStaffNo)&#10;        val edtMcName = findViewById&lt;EditText&gt;(R.id.edtMcName)&#10;        val txtMachineInfo = findViewById&lt;TextView&gt;(R.id.txtMachineInfo)&#10;        val txtProcessNo = findViewById&lt;TextView&gt;(R.id.txtProcessNo)&#10;        val txtMachineRunning = findViewById&lt;TextView&gt;(R.id.txtMachineRunning)&#10;        val layoutSmallEdits = findViewById&lt;LinearLayout&gt;(R.id.layoutSmallEdits)&#10;        val edtJobNo = findViewById&lt;EditText&gt;(R.id.edtJobNo)&#10;        val edtProOrdNo = findViewById&lt;EditText&gt;(R.id.edtProOrdNo)&#10;        val edtSerial = findViewById&lt;EditText&gt;(R.id.edtSerial)&#10;        val edtGhiChu = findViewById&lt;EditText&gt;(R.id.edtGhiChu)&#10;        val layoutProOrdNoResults = findViewById&lt;android.widget.GridLayout&gt;(R.id.layoutProOrdNoResults)&#10;        val machineApi = RetrofitClient.retrofitPublic.create(MachineApi::class.java)&#10;&#10;        val staffNo = edtStaffNo.text.toString().trim()&#10;        val mcName = edtMcName.text.toString().trim()&#10;&#10;        // If machine code is empty, clear everything and return&#10;        if (mcName.isEmpty()) {&#10;            txtMachineInfo.text = &quot;&quot;&#10;            txtProcessNo.text = &quot;&quot;&#10;            txtMachineRunning.visibility = View.GONE&#10;            layoutSmallEdits.visibility = View.GONE&#10;            edtJobNo.isEnabled = true&#10;            edtProOrdNo.isEnabled = true&#10;            edtSerial.isEnabled = true&#10;            edtGhiChu.isEnabled = true&#10;            updateSubmitButtonState()&#10;            return&#10;        }&#10;&#10;        // Show loading indicator&#10;        txtMachineInfo.text = LoadingStates.LOADING&#10;        txtMachineInfo.setTextColor(LoadingStates.getLoadingColor(resources))&#10;&#10;        var machineModel: String? = null&#10;        var machineStatus: String? = null&#10;&#10;        // Fetch machine info&#10;        try {&#10;            val info = machineApi.getMachine(mcName)&#10;            if (info != null) {&#10;                txtMachineInfo.text = listOfNotNull(info.model, info.status).joinToString(&quot;, &quot;)&#10;                txtMachineInfo.setTextColor(resources.getColor(android.R.color.holo_blue_dark))&#10;                machineModel = info.model&#10;                machineStatus = info.status&#10;            } else {&#10;                txtMachineInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;                txtMachineInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;            }&#10;        } catch (e: Exception) {&#10;            txtMachineInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;            txtMachineInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;        }&#10;&#10;        // Fetch ProcessNo if both staff and machine are available&#10;        var processNoValue: String? = null&#10;        var processNoDto: ProcessNoDto? = null&#10;&#10;        if (staffNo.isNotEmpty()) {&#10;            try {&#10;                val processNoApi = RetrofitClient.retrofitPublic.create(ProcessNoApi::class.java)&#10;                processNoDto = processNoApi.getProcessNo(staffNo, mcName)&#10;                processNoValue = processNoDto.processNo?.trim()&#10;                txtProcessNo.text = processNoValue ?: &quot;&quot;&#10;&#10;                // If we have a processNo, show &quot;Máy đang chạy&quot; and auto-fill fields&#10;                if (!processNoValue.isNullOrBlank()) {&#10;                    txtMachineRunning.visibility = View.VISIBLE&#10;                    txtMachineRunning.text = &quot;Máy đang chạy&quot;&#10;                    txtMachineRunning.setTextColor(resources.getColor(android.R.color.holo_green_dark))&#10;                    txtMachineRunning.setTypeface(null, android.graphics.Typeface.NORMAL)&#10;                    layoutSmallEdits.visibility = View.VISIBLE&#10;&#10;                    // Auto-fill fields with data from processNoDto&#10;                    if (!machineModel.isNullOrBlank()) {&#10;                        edtJobNo.setText(machineModel)&#10;                        edtJobNo.isEnabled = false&#10;                    }&#10;&#10;                    if (!processNoDto.proOrdNo2.isNullOrBlank()) {&#10;                        edtProOrdNo.setText(processNoDto.proOrdNo2)&#10;                        edtProOrdNo.requestFocus()&#10;                        edtProOrdNo.clearFocus()&#10;                        edtProOrdNo.isEnabled = false&#10;                    }&#10;&#10;                    if (!processNoDto.serial2.isNullOrBlank()) {&#10;                        edtSerial.setText(processNoDto.serial2)&#10;                        edtSerial.isEnabled = true&#10;                    }&#10;&#10;                    if (!processNoDto.note.isNullOrBlank()) {&#10;                        edtGhiChu.setText(processNoDto.note)&#10;                        edtGhiChu.isEnabled = true&#10;                    }&#10;&#10;                    // Hide keyboard and clear any remaining focus&#10;                    val imm = getSystemService(INPUT_METHOD_SERVICE) as? InputMethodManager&#10;                    imm?.hideSoftInputFromWindow(edtGhiChu.windowToken, 0)&#10;                    layoutProOrdNoResults.removeAllViews()&#10;&#10;                    updateSubmitButtonState()&#10;                    return&#10;                }&#10;            } catch (e: Exception) {&#10;                txtProcessNo.text = &quot;&quot;&#10;            }&#10;        } else {&#10;            txtProcessNo.text = &quot;&quot;&#10;        }&#10;&#10;        // Show machine status based on machine status only&#10;        when {&#10;            machineStatus?.contains(&quot;Status: Ready&quot;, ignoreCase = true) == true -&gt; {&#10;                txtMachineRunning.visibility = View.VISIBLE&#10;                txtMachineRunning.text = &quot;Đang chờ việc&quot;&#10;                txtMachineRunning.setTextColor(resources.getColor(android.R.color.holo_orange_dark))&#10;                txtMachineRunning.setTypeface(null, android.graphics.Typeface.NORMAL)&#10;                layoutSmallEdits.visibility = View.GONE&#10;            }&#10;            machineStatus?.contains(&quot;Status: Processing&quot;, ignoreCase = true) == true -&gt; {&#10;                txtMachineRunning.visibility = View.VISIBLE&#10;                txtMachineRunning.text = &quot;Đang gia công&quot;&#10;                txtMachineRunning.setTextColor(resources.getColor(android.R.color.holo_green_dark))&#10;                txtMachineRunning.setTypeface(null, android.graphics.Typeface.BOLD)&#10;                layoutSmallEdits.visibility = View.GONE&#10;            }&#10;            machineStatus?.contains(&quot;Status: Maintenance&quot;, ignoreCase = true) == true -&gt; {&#10;                txtMachineRunning.visibility = View.VISIBLE&#10;                txtMachineRunning.text = &quot;Đang bảo trì&quot;&#10;                txtMachineRunning.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                txtMachineRunning.setTypeface(null, android.graphics.Typeface.NORMAL)&#10;                layoutSmallEdits.visibility = View.GONE&#10;            }&#10;            machineStatus?.contains(&quot;Status: BeingSetup&quot;, ignoreCase = true) == true -&gt; {&#10;                txtMachineRunning.visibility = View.VISIBLE&#10;                txtMachineRunning.text = &quot;Đang setup&quot;&#10;                txtMachineRunning.setTextColor(resources.getColor(android.R.color.holo_orange_dark))&#10;                txtMachineRunning.setTypeface(null, android.graphics.Typeface.NORMAL)&#10;                layoutSmallEdits.visibility = View.GONE&#10;            }&#10;            machineStatus?.contains(&quot;Status: Damage&quot;, ignoreCase = true) == true -&gt; {&#10;                txtMachineRunning.visibility = View.VISIBLE&#10;                txtMachineRunning.text = &quot;Báo hư chờ sửa&quot;&#10;                txtMachineRunning.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                txtMachineRunning.setTypeface(null, android.graphics.Typeface.NORMAL)&#10;                layoutSmallEdits.visibility = View.GONE&#10;            }&#10;            else -&gt; {&#10;                txtMachineRunning.visibility = View.GONE&#10;                layoutSmallEdits.visibility = View.GONE&#10;            }&#10;        }&#10;&#10;        // Re-enable editing when machine is not running for this user&#10;        edtJobNo.isEnabled = true&#10;        edtProOrdNo.isEnabled = true&#10;        edtSerial.isEnabled = true&#10;        edtGhiChu.isEnabled = true&#10;&#10;        updateSubmitButtonState()&#10;    }&#10;&#10;    // Function to check machine status and control submit button&#10;    private fun updateSubmitButtonState() {&#10;        val btnSubmit = findViewById&lt;Button&gt;(R.id.btnSubmit)&#10;        val txtMachineInfo = findViewById&lt;TextView&gt;(R.id.txtMachineInfo)&#10;        val txtMachineRunning = findViewById&lt;TextView&gt;(R.id.txtMachineRunning)&#10;&#10;        val machineInfoText = txtMachineInfo.text.toString()&#10;        val machineRunningText = txtMachineRunning.text.toString()&#10;        val isMachineRunningVisible = txtMachineRunning.visibility == View.VISIBLE&#10;&#10;        // Check conditions that should block submit&#10;        val hasProcessingStatus = machineInfoText.contains(&quot;Status: Processing&quot;, ignoreCase = true)&#10;        val isShowingProcessingForOther = isMachineRunningVisible &amp;&amp; machineRunningText == &quot;Đang gia công&quot;&#10;        val hasMaintenanceStatus = machineInfoText.contains(&quot;Status: Maintenance&quot;, ignoreCase = true)&#10;        val isShowingMaintenance = isMachineRunningVisible &amp;&amp; machineRunningText == &quot;Đang bảo trì&quot;&#10;        val hasBeingSetupStatus = machineInfoText.contains(&quot;Status: BeingSetup&quot;, ignoreCase = true)&#10;        val isShowingBeingSetup = isMachineRunningVisible &amp;&amp; machineRunningText == &quot;Đang setup&quot;&#10;        val hasDamageStatus = machineInfoText.contains(&quot;Status: Damage&quot;, ignoreCase = true)&#10;        val isShowingDamage = isMachineRunningVisible &amp;&amp; machineRunningText == &quot;Báo hư chờ sửa&quot;&#10;&#10;        val shouldBlockSubmit = (hasProcessingStatus &amp;&amp; isShowingProcessingForOther) ||&#10;                               (hasMaintenanceStatus &amp;&amp; isShowingMaintenance) ||&#10;                               (hasBeingSetupStatus &amp;&amp; isShowingBeingSetup) ||&#10;                               (hasDamageStatus &amp;&amp; isShowingDamage)&#10;&#10;        if (shouldBlockSubmit) {&#10;            btnSubmit.isEnabled = false&#10;            btnSubmit.alpha = 0.5f // Gray out the button&#10;        } else {&#10;            btnSubmit.isEnabled = true&#10;            btnSubmit.alpha = 1.0f // Restore normal appearance&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_machine_log)&#10;&#10;        // Initialize StaffPreferences&#10;        staffPreferences = StaffPreferences(this)&#10;&#10;        // --- UI references for &quot;Thợ&quot; (Staff) block ---&#10;        val edtStaffNo = findViewById&lt;EditText&gt;(R.id.edtStaffNo)&#10;        val txtStaffInfo = findViewById&lt;TextView&gt;(R.id.txtStaffInfo)&#10;        val api = RetrofitClient.retrofitPublic.create(StaffApi::class.java)&#10;&#10;        // Load saved staff number and info on startup&#10;        val savedStaffNumber = staffPreferences.getStaffNumber()&#10;        val savedStaffInfo = staffPreferences.getStaffInfo()&#10;        &#10;        if (savedStaffNumber.isNotEmpty()) {&#10;            edtStaffNo.setText(savedStaffNumber)&#10;            if (savedStaffInfo.isNotEmpty()) {&#10;                txtStaffInfo.text = savedStaffInfo&#10;                txtStaffInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;            }&#10;            // Auto-call API with saved staff number&#10;            autoCallStaffApi(savedStaffNumber.toIntOrNull() ?: 0)&#10;        }&#10;&#10;        // --- UI references for &quot;Mã máy&quot; (Machine) block ---&#10;        val edtMcName = findViewById&lt;EditText&gt;(R.id.edtMcName)&#10;        val txtMachineInfo = findViewById&lt;TextView&gt;(R.id.txtMachineInfo)&#10;        val txtProcessNo = findViewById&lt;TextView&gt;(R.id.txtProcessNo)&#10;        val txtMachineRunning = findViewById&lt;TextView&gt;(R.id.txtMachineRunning)&#10;&#10;        // --- UI reference for serial info below LSX (ProOrdNo) ---&#10;        val edtProOrdNo = findViewById&lt;EditText&gt;(R.id.edtProOrdNo)&#10;        val txtSerialInfo = findViewById&lt;TextView&gt;(R.id.txtSerialInfo)&#10;        val txtJobInfo = findViewById&lt;TextView&gt;(R.id.txtJobInfo)&#10;        val txtSerialStatus = findViewById&lt;TextView&gt;(R.id.txtSerialStatus)&#10;        val txtNoteStatus = findViewById&lt;TextView&gt;(R.id.txtNoteStatus)&#10;        val machineApi = RetrofitClient.retrofitPublic.create(MachineApi::class.java)&#10;        val serialApi = RetrofitClient.retrofitPublic.create(SerialApi::class.java)&#10;        val proOrdApi = RetrofitClient.retrofitPublic.create(ProOrdApi::class.java)&#10;        var processNoValue: String? = null&#10;&#10;        // --- Declare layoutSmallEdits reference ---&#10;        val layoutSmallEdits = findViewById&lt;LinearLayout&gt;(R.id.layoutSmallEdits)&#10;&#10;        // --- UI references for LSX (ProOrdNo) and result grid block ---&#10;        val edtJobNo = findViewById&lt;EditText&gt;(R.id.edtJobNo)&#10;        val layoutProOrdNoResults = findViewById&lt;android.widget.GridLayout&gt;(R.id.layoutProOrdNoResults)&#10;&#10;        val edtSerial = findViewById&lt;EditText&gt;(R.id.edtSerial)&#10;        val btnScan = findViewById&lt;Button&gt;(R.id.btnScan)&#10;&#10;        // --- UI references for small quantity EditTexts ---&#10;        val edtDat = findViewById&lt;EditText&gt;(R.id.edtDat)&#10;        val edtPhe = findViewById&lt;EditText&gt;(R.id.edtPhe)&#10;        val edtXuLy = findViewById&lt;EditText&gt;(R.id.edtXuLy)&#10;&#10;        // --- UI references for note field and status ---&#10;        val edtGhiChu = findViewById&lt;EditText&gt;(R.id.edtGhiChu)&#10;        val txtSendStatus = findViewById&lt;TextView&gt;(R.id.txtSendStatus)&#10;        val btnSubmit = findViewById&lt;Button&gt;(R.id.btnSubmit)&#10;&#10;        // --- Setup IME action listeners for all EditTexts ---&#10;        edtStaffNo.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtMcName.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtMcName.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtJobNo.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtJobNo.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtProOrdNo.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtProOrdNo.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtSerial.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtSerial.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                if (layoutSmallEdits.visibility == View.VISIBLE) {&#10;                    edtDat.requestFocus()&#10;                } else {&#10;                    edtGhiChu.requestFocus()&#10;                }&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtDat.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtPhe.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtPhe.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtXuLy.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtXuLy.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_NEXT) {&#10;                edtGhiChu.requestFocus()&#10;                true&#10;            } else false&#10;        }&#10;&#10;        edtGhiChu.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_DONE) {&#10;                edtGhiChu.clearFocus()&#10;                val imm = getSystemService(INPUT_METHOD_SERVICE) as? InputMethodManager&#10;                imm?.hideSoftInputFromWindow(edtGhiChu.windowToken, 0)&#10;                true&#10;            } else false&#10;        }&#10;&#10;        // --- Block for handling Staff (&quot;Thợ&quot;) input and validation ---&#10;        edtStaffNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val staffNoStr = edtStaffNo.text.toString().trim()&#10;                &#10;                // Save staff number to SharedPreferences when user finishes editing&#10;                if (staffNoStr.isNotEmpty()) {&#10;                    staffPreferences.saveStaffNumber(staffNoStr)&#10;                    &#10;                    try {&#10;                        val staffNo = staffNoStr.toInt()&#10;                        // Show loading indicator using LoadingStates&#10;                        txtStaffInfo.text = LoadingStates.LOADING&#10;                        txtStaffInfo.setTextColor(LoadingStates.getLoadingColor(resources))&#10;&#10;                        // Fetch staff info asynchronously&#10;                        lifecycleScope.launch {&#10;                            try {&#10;                                val info = api.getStaff(staffNo)&#10;                                if (info != null) {&#10;                                    // Display staff info if found - dark red color for valid and bold&#10;                                    val staffInfoText = listOfNotNull(info.fullName, info.workJob, info.workPlace).joinToString(&quot;, &quot;)&#10;                                    txtStaffInfo.text = staffInfoText&#10;                                    txtStaffInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                                    &#10;                                    // Save staff info to SharedPreferences&#10;                                    staffPreferences.saveStaffInfo(staffInfoText)&#10;                                } else {&#10;                                    // Show error if staff not found - API responded but returned null (invalid)&#10;                                    txtStaffInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;                                    txtStaffInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                                    staffPreferences.saveStaffInfo(&quot;&quot;)&#10;                                }&#10;                            } catch (e: Exception) {&#10;                                // Show server connection error if API call fails&#10;                                txtStaffInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;                                txtStaffInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                                staffPreferences.saveStaffInfo(&quot;&quot;)&#10;                            }&#10;&#10;                            // Call shared function to process machine and staff combination&#10;                            processMachineAndStaff()&#10;                        }&#10;                    } catch (e: NumberFormatException) {&#10;                        // Show error if input is not a number&#10;                        txtStaffInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;                        txtStaffInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                        staffPreferences.saveStaffInfo(&quot;&quot;)&#10;                    }&#10;                } else {&#10;                    // Clear staff info if input is empty&#10;                    txtStaffInfo.text = &quot;&quot;&#10;                    // Clear saved staff data if field is emptied&#10;                    staffPreferences.clearStaffPreferences()&#10;                    // Call shared function to clear machine processing&#10;                    lifecycleScope.launch {&#10;                        processMachineAndStaff()&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // --- Block for handling Machine Code (&quot;Mã máy&quot;) input and validation ---&#10;        edtMcName.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                // Call shared function to process machine and staff combination&#10;                lifecycleScope.launch {&#10;                    processMachineAndStaff()&#10;                }&#10;            }&#10;        }&#10;&#10;        // --- Block for handling LSX (ProOrdNo) input and displaying results in a grid ---&#10;        // Goal 2: Move the auto-click logic here when processNo is blank&#10;        edtJobNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val jobNo = edtJobNo.text.toString().trim()&#10;                if (jobNo.isNotEmpty()) {&#10;                    // Show loading indicator&#10;                    txtJobInfo.visibility = View.VISIBLE&#10;                    txtJobInfo.text = LoadingStates.LOADING&#10;                    txtJobInfo.setTextColor(LoadingStates.getLoadingColor(resources))&#10;&#10;                    // Fetch production order list asynchronously&#10;                    lifecycleScope.launch {&#10;                        try {&#10;                            val responseBody = proOrdApi.getProOrd(jobNo)&#10;                            val json = responseBody.string()&#10;                            val gson = Gson()&#10;                            val jsonElement = JsonParser.parseString(json)&#10;                            val proOrdList = when {&#10;                                jsonElement.isJsonArray -&gt; jsonElement.asJsonArray.mapNotNull {&#10;                                    gson.fromJson(it, ProOrdDto::class.java).jobControlNo&#10;                                }&#10;                                jsonElement.isJsonObject -&gt; listOfNotNull(gson.fromJson(jsonElement, ProOrdDto::class.java).jobControlNo)&#10;                                else -&gt; emptyList()&#10;                            }&#10;&#10;                            // Hide loading indicator&#10;                            txtJobInfo.visibility = View.GONE&#10;&#10;                            // Clear previous results in the grid&#10;                            layoutProOrdNoResults.removeAllViews()&#10;&#10;                            // Check if machine is running first - if so, don't show any buttons&#10;                            val currentProcessNo = txtProcessNo.text.toString().trim()&#10;                            val isMachineRunning = !currentProcessNo.isBlank()&#10;&#10;                            if (isMachineRunning) {&#10;                                // Machine is running - don't show any buttons, just clear and return&#10;                                return@launch&#10;                            }&#10;&#10;                            if (proOrdList.isNotEmpty()) {&#10;                                // Check if machine is NOT running (processNo is blank)&#10;                                val shouldAutoClick = currentProcessNo.isBlank()&#10;&#10;                                // Auto-click if only one result and machine is not running&#10;                                if (proOrdList.size == 1 &amp;&amp; shouldAutoClick) {&#10;                                    val singleJobControlNo = proOrdList.first()&#10;                                    edtProOrdNo.setText(singleJobControlNo)&#10;                                    edtProOrdNo.requestFocus()&#10;                                    edtProOrdNo.clearFocus()&#10;                                } else {&#10;                                    // Multiple results or machine is running, show clickable boxes&#10;                                    proOrdList.forEach { jobControlNo -&gt;&#10;                                        val tv = TextView(this@MachineLogActivity)&#10;                                        tv.text = jobControlNo&#10;                                        tv.setPadding(12, 8, 12, 8)&#10;                                        tv.setBackgroundResource(R.drawable.clickable_button_background)&#10;                                        tv.setTextColor(resources.getColor(android.R.color.white))&#10;                                        tv.textSize = 14f&#10;                                        tv.gravity = android.view.Gravity.CENTER&#10;&#10;                                        val params = android.widget.GridLayout.LayoutParams()&#10;                                        params.setMargins(4, 4, 4, 4)&#10;                                        params.width = android.widget.GridLayout.LayoutParams.WRAP_CONTENT&#10;                                        params.height = android.widget.GridLayout.LayoutParams.WRAP_CONTENT&#10;                                        tv.layoutParams = params&#10;&#10;                                        tv.setOnClickListener {&#10;                                            edtProOrdNo.setText(jobControlNo)&#10;                                            edtProOrdNo.requestFocus()&#10;                                            edtProOrdNo.clearFocus()&#10;                                            val imm = getSystemService(INPUT_METHOD_SERVICE) as? InputMethodManager&#10;                                            imm?.hideSoftInputFromWindow(edtProOrdNo.windowToken, 0)&#10;                                        }&#10;                                        layoutProOrdNoResults.addView(tv)&#10;                                    }&#10;                                }&#10;                            } else {&#10;                                // Show error if no results found&#10;                                val tv = TextView(this@MachineLogActivity)&#10;                                tv.text = &quot;Không lấy được dữ liệu&quot;&#10;                                tv.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                                layoutProOrdNoResults.addView(tv)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            // Hide loading and show error if API call fails&#10;                            txtJobInfo.visibility = View.GONE&#10;                            layoutProOrdNoResults.removeAllViews()&#10;                            val tv = TextView(this@MachineLogActivity)&#10;                            tv.text = &quot;Không lấy được dữ liệu&quot;&#10;                            tv.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                            layoutProOrdNoResults.addView(tv)&#10;                        }&#10;                    }&#10;                } else {&#10;                    // Clear grid and hide loading if input is empty&#10;                    layoutProOrdNoResults.removeAllViews()&#10;                    txtJobInfo.visibility = View.GONE&#10;                }&#10;            }&#10;        }&#10;&#10;        // --- Block for handling LSX (ProOrdNo) serial info fetching ---&#10;        edtProOrdNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val proOrdNo = edtProOrdNo.text.toString().trim()&#10;                if (proOrdNo.isNotEmpty()) {&#10;                    lifecycleScope.launch {&#10;                        try {&#10;                            val serialList = serialApi.getSerial(proOrdNo)&#10;                            if (serialList.isNotEmpty()) {&#10;                                txtSerialInfo.text = serialList.joinToString(&quot;, &quot;) { it.serial ?: &quot;&quot; }&#10;                            } else {&#10;                                txtSerialInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            txtSerialInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;                        }&#10;                    }&#10;                } else {&#10;                    txtSerialInfo.text = &quot;&quot;&#10;                }&#10;            }&#10;        }&#10;&#10;        // Map QR keys to EditText IDs (future-proof, add new keys here)&#10;        val editFields = mapOf(&#10;            &quot;staffNo&quot; to edtStaffNo,&#10;            &quot;mcName&quot; to edtMcName,&#10;            &quot;jobNo&quot; to edtJobNo,&#10;            &quot;proOrdNo&quot; to edtProOrdNo,&#10;            &quot;serial&quot; to edtSerial,&#10;            // fallback: also allow direct EditText id mapping&#10;            &quot;edtStaffNo&quot; to edtStaffNo,&#10;            &quot;edtMcName&quot; to edtMcName,&#10;            &quot;edtJobNo&quot; to edtJobNo,&#10;            &quot;edtProOrdNo&quot; to edtProOrdNo,&#10;            &quot;edtSerial&quot; to edtSerial&#10;        )&#10;&#10;        // Register ActivityResultLauncher for QR scan (must be defined before ScanHelper)&#10;        var scanHelper: ScanHelper? = null&#10;        val scanLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result -&gt;&#10;            if (result.resultCode == RESULT_OK) {&#10;                val intent = result.data&#10;                val qrText = intent?.getStringExtra(&quot;SCAN_RESULT&quot;)&#10;                    ?: intent?.getStringExtra(&quot;SCAN_RESULT_ORIGINAL&quot;)&#10;                    ?: intent?.getStringExtra(&quot;SCAN_RESULT_RAW&quot;)&#10;                if (!qrText.isNullOrEmpty()) {&#10;                    scanHelper?.handleScanResult(qrText)&#10;                }&#10;            }&#10;        }&#10;&#10;        // Setup ScanHelper (button click launches scan)&#10;        scanHelper = ScanHelper(this, scanLauncher, editFields, btnScan)&#10;&#10;        // --- UI references for checkboxes (Rework, Setup) ---&#10;        val chkRework = findViewById&lt;CheckBox&gt;(R.id.chkRework)&#10;        val chkSetup = findViewById&lt;CheckBox&gt;(R.id.chkSetup)&#10;        // --- Checkbox value mapping: 1 if checked, 0 if not ---&#10;        var reworkValue = 0&#10;        var setupValue = 0&#10;        chkRework.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            reworkValue = if (isChecked) 1 else 0&#10;        }&#10;        chkSetup.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            setupValue = if (isChecked) 1 else 0&#10;        }&#10;&#10;        val postApi = RetrofitClient.retrofitPublic.create(PostNhatKyGiaCongApi::class.java)&#10;        btnSubmit.setOnClickListener {&#10;            // Prevent submit if any error message is shown&#10;            val dataError = &quot;Không lấy được dữ liệu&quot;&#10;            val serverError = &quot;Không lấy được dữ liệu&quot;&#10;            val errorFields = listOf(txtStaffInfo, txtMachineInfo, txtSerialInfo)&#10;            if (errorFields.any {&#10;                val text = it.text.toString()&#10;                text.contains(dataError, ignoreCase = true) || text.contains(serverError, ignoreCase = true)&#10;            }) {&#10;                Toast.makeText(this, &quot;Vui lòng kiểm tra lại thông tin&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;&#10;            val processNoForDto = txtProcessNo.text.toString().let { if (it.isBlank()) &quot; &quot; else it }&#10;&#10;            // Show immediate feedback and disable button&#10;            Toast.makeText(this, &quot;Dữ liệu đã được gửi&quot;, Toast.LENGTH_SHORT).show()&#10;            btnSubmit.isEnabled = false&#10;            txtSendStatus.visibility = View.VISIBLE&#10;            txtSendStatus.text = &quot;Đang xử lý...&quot;&#10;            txtSendStatus.setTextColor(resources.getColor(android.R.color.holo_orange_dark))&#10;&#10;            val dto = NhatKyGiaCongDto(&#10;                processNo = processNoForDto,&#10;                jobControlNo = edtJobNo.text.toString().trim(),&#10;                staffNo = edtStaffNo.text.toString().trim(),&#10;                mcName = edtMcName.text.toString().trim(),&#10;                note = edtGhiChu.text.toString().trim(),&#10;                proOrdNo = edtProOrdNo.text.toString().trim(),&#10;                serial = edtSerial.text.toString().trim(),&#10;                setup = chkSetup.isChecked,&#10;                rework = chkRework.isChecked,&#10;                qtyGood = edtDat.text.toString().toIntOrNull() ?: 0,&#10;                qtyReject = edtPhe.text.toString().toIntOrNull() ?: 0,&#10;                qtyRework = edtXuLy.text.toString().toIntOrNull() ?: 0&#10;            )&#10;            lifecycleScope.launch {&#10;                try {&#10;                    android.util.Log.d(&quot;POST_DTO&quot;, Gson().toJson(dto)) // Log the payload&#10;                    val response = postApi.postLog(dto)&#10;                    if (response.isSuccessful) {&#10;                        Toast.makeText(this@MachineLogActivity, &quot;Cập nhật thành công&quot;, Toast.LENGTH_SHORT).show()&#10;                        txtSendStatus.text = &quot;Cập nhật thành công&quot;&#10;                        txtSendStatus.setTextColor(resources.getColor(android.R.color.holo_green_dark))&#10;                    } else {&#10;                        val errorBody = response.errorBody()?.string()&#10;                        val errorMessage = &quot;Cập nhật thất bại ${response.code()} ${errorBody ?: &quot;&quot;}&quot;&#10;                        Toast.makeText(this@MachineLogActivity, errorMessage, Toast.LENGTH_LONG).show()&#10;                        txtSendStatus.text = errorMessage&#10;                        txtSendStatus.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                        android.util.Log.e(&quot;POST_ERROR&quot;, &quot;Code: ${response.code()} Body: $errorBody&quot;)&#10;                    }&#10;                } catch (e: Exception) {&#10;                    val errorMessage = &quot;Cập nhật thất bại: ${e.message}&quot;&#10;                    Toast.makeText(this@MachineLogActivity, errorMessage, Toast.LENGTH_SHORT).show()&#10;                    txtSendStatus.text = errorMessage&#10;                    txtSendStatus.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                    android.util.Log.e(&quot;POST_EXCEPTION&quot;, e.toString())&#10;                } finally {&#10;                    // Re-enable button after operation completes&#10;                    btnSubmit.isEnabled = true&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Auto-call staff API with saved staff number&#10;    private fun autoCallStaffApi(staffNo: Int) {&#10;        val txtStaffInfo = findViewById&lt;TextView&gt;(R.id.txtStaffInfo)&#10;        val api = RetrofitClient.retrofitPublic.create(StaffApi::class.java)&#10;&#10;        txtStaffInfo.text = LoadingStates.LOADING&#10;        txtStaffInfo.setTextColor(LoadingStates.getLoadingColor(resources))&#10;&#10;        lifecycleScope.launch {&#10;            try {&#10;                val info = api.getStaff(staffNo)&#10;                if (info != null) {&#10;                    val staffInfoText = listOfNotNull(info.fullName, info.workJob, info.workPlace).joinToString(&quot;, &quot;)&#10;                    txtStaffInfo.text = staffInfoText&#10;                    txtStaffInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                } else {&#10;                    txtStaffInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;                    txtStaffInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                }&#10;            } catch (_: Exception) {&#10;                txtStaffInfo.text = &quot;Không lấy được dữ liệu&quot;&#10;                txtStaffInfo.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>