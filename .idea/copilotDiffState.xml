<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-feature&#10;        android:name=&quot;android.hardware.camera&quot;&#10;        android:required=&quot;false&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.AppCompat.Light.DarkActionBar&quot;&#10;        tools:targetApi=&quot;31&quot;&#10;        android:usesCleartextTraffic=&quot;true&quot;&gt;  &lt;!-- Important for HTTP testing if API is not HTTPS --&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.AppCompat.Light.DarkActionBar&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;        &lt;activity&#10;            android:name=&quot;.AbListActivity&quot;&#10;            android:exported=&quot;false&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.ABTestingActivity&quot;&#10;            android:exported=&quot;false&quot;/&gt;&#10;&#10;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-feature&#10;        android:name=&quot;android.hardware.camera&quot;&#10;        android:required=&quot;false&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.AppCompat.Light.DarkActionBar&quot;&#10;        tools:targetApi=&quot;31&quot;&#10;        android:usesCleartextTraffic=&quot;true&quot;&gt;  &lt;!-- Important for HTTP testing if API is not HTTPS --&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.AppCompat.Light.DarkActionBar&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;        &lt;activity&#10;            android:name=&quot;.AbListActivity&quot;&#10;            android:exported=&quot;false&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.ABTestingActivity&quot;&#10;            android:exported=&quot;false&quot;/&gt;&#10;        &lt;activity android:name=&quot;.MachineLogActivity&quot; /&gt;&#10;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/lephucmfg/MachineLogActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/lephucmfg/MachineLogActivity.kt" />
              <option name="originalContent" value="package com.example.lephucmfg&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.inputmethod.InputMethodManager&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.lifecycle.lifecycleScope&#10;import com.example.lephucmfg.network.RetrofitClient&#10;import com.google.gson.annotations.SerializedName&#10;import kotlinx.coroutines.launch&#10;import okhttp3.ResponseBody&#10;import com.google.gson.Gson&#10;import com.google.gson.JsonElement&#10;import com.google.gson.JsonParser&#10;import retrofit2.Call&#10;import retrofit2.Callback&#10;import retrofit2.Response&#10;import retrofit2.http.GET&#10;import retrofit2.http.Path&#10;&#10;class MachineLogActivity : AppCompatActivity() {&#10;    // --- API interface for fetching staff info (&quot;Thợ&quot;) ---&#10;    interface StaffApi {&#10;        @GET(&quot;/api/GetStaff/{staffNo}&quot;)&#10;        suspend fun getStaff(@Path(&quot;staffNo&quot;) staffNo: Int): StaffInfo?&#10;    }&#10;    // --- Data class for staff info ---&#10;    data class StaffInfo(&#10;        @SerializedName(&quot;fullName&quot;) val fullName: String?,&#10;        @SerializedName(&quot;workJob&quot;) val workJob: String?,&#10;        @SerializedName(&quot;workPlace&quot;) val workPlace: String?&#10;    )&#10;    // --- API interface for fetching machine info (&quot;Mã máy&quot;) ---&#10;    interface MachineApi {&#10;        @GET(&quot;/api/GetMachine/{mcName}&quot;)&#10;        suspend fun getMachine(@Path(&quot;mcName&quot;) mcName: String): MachineInfo?&#10;    }&#10;    // --- Data class for machine info ---&#10;    data class MachineInfo(&#10;        @SerializedName(&quot;model&quot;) val model: String?,&#10;        @SerializedName(&quot;status&quot;) val status: String?&#10;    )&#10;    // --- API interface for fetching production order (LSX/ProOrdNo) ---&#10;    interface ProOrdApi {&#10;        @GET(&quot;/api/Laylsx/{A}&quot;)&#10;        suspend fun getProOrd(@Path(&quot;A&quot;) jobNo: String): ResponseBody&#10;    }&#10;    // --- Data class for production order DTO ---&#10;    data class ProOrdDto(&#10;        @SerializedName(&quot;proOrdNo&quot;) val proOrdNo: String?&#10;    )&#10;    // --- API interface for fetching serial info (GetSerial) ---&#10;    interface SerialApi {&#10;        @GET(&quot;/api/GetSerial/{proOrdNo}&quot;)&#10;        suspend fun getSerial(@Path(&quot;proOrdNo&quot;) proOrdNo: String): List&lt;SerialDto&gt;&#10;    }&#10;    // --- Data class for serial info ---&#10;    data class SerialDto(&#10;        @SerializedName(&quot;serial&quot;) val serial: String?&#10;    )&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_machine_log)&#10;&#10;        // --- UI references for &quot;Thợ&quot; (Staff) block ---&#10;        val edtStaffNo = findViewById&lt;EditText&gt;(R.id.edtStaffNo)&#10;        val txtStaffInfo = findViewById&lt;TextView&gt;(R.id.txtStaffInfo)&#10;        val api = RetrofitClient.retrofitPublic.create(StaffApi::class.java)&#10;&#10;        // --- Block for handling Staff (&quot;Thợ&quot;) input and validation ---&#10;        edtStaffNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val staffNoStr = edtStaffNo.text.toString().trim()&#10;                if (staffNoStr.isNotEmpty()) {&#10;                    try {&#10;                        val staffNo = staffNoStr.toInt()&#10;                        // Fetch staff info asynchronously&#10;                        lifecycleScope.launch {&#10;                            try {&#10;                                val info = api.getStaff(staffNo)&#10;                                if (info != null) {&#10;                                    // Display staff info if found&#10;                                    txtStaffInfo.text = listOfNotNull(info.fullName, info.workJob, info.workPlace).joinToString(&quot;, &quot;)&#10;                                } else {&#10;                                    // Show error if staff not found&#10;                                    txtStaffInfo.setText(R.string.invalid_staff)&#10;                                }&#10;                            } catch (e: Exception) {&#10;                                // Show error if API call fails&#10;                                txtStaffInfo.setText(R.string.invalid_staff)&#10;                            }&#10;                        }&#10;                    } catch (e: NumberFormatException) {&#10;                        // Show error if input is not a number&#10;                        txtStaffInfo.setText(R.string.invalid_staff)&#10;                    }&#10;                } else {&#10;                    // Clear staff info if input is empty&#10;                    txtStaffInfo.text = &quot;&quot;&#10;                }&#10;            }&#10;        }&#10;        // --- UI references for &quot;Mã máy&quot; (Machine) block ---&#10;        val edtMcName = findViewById&lt;EditText&gt;(R.id.edtMcName)&#10;        val txtMachineInfo = findViewById&lt;TextView&gt;(R.id.txtMachineInfo)&#10;        // --- UI reference for serial info below LSX (ProOrdNo) ---&#10;        val edtProOrdNo = findViewById&lt;EditText&gt;(R.id.edtProOrdNo)&#10;        val txtSerialInfo = findViewById&lt;TextView&gt;(R.id.txtSerialInfo) // Add this TextView in your layout XML below edtProOrdNo&#10;        val machineApi = RetrofitClient.retrofitPublic.create(MachineApi::class.java)&#10;        val serialApi = RetrofitClient.retrofitPublic.create(SerialApi::class.java)&#10;        val proOrdApi = RetrofitClient.retrofitPublic.create(ProOrdApi::class.java)&#10;&#10;        // --- Block for handling Machine Code (&quot;Mã máy&quot;) input and validation ---&#10;        edtMcName.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val mcName = edtMcName.text.toString().trim()&#10;                if (mcName.isNotEmpty()) {&#10;                    // Launch coroutine to fetch machine info asynchronously&#10;                    lifecycleScope.launch {&#10;                        try {&#10;                            val info = machineApi.getMachine(mcName)&#10;                            if (info != null) {&#10;                                // Display machine model and status if found&#10;                                txtMachineInfo.text = listOfNotNull(info.model, info.status).joinToString(&quot;, &quot;)&#10;                            } else {&#10;                                // Show error if machine not found&#10;                                txtMachineInfo.setText(R.string.invalid_staff)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            // Show error if API call fails&#10;                            txtMachineInfo.setText(R.string.invalid_staff)&#10;                        }&#10;                    }&#10;                } else {&#10;                    // Clear machine info if input is empty&#10;                    txtMachineInfo.text = &quot;&quot;&#10;                }&#10;            }&#10;        }&#10;        // --- UI references for LSX (ProOrdNo) and result grid block ---&#10;        val edtJobNo = findViewById&lt;EditText&gt;(R.id.edtJobNo)&#10;        val layoutProOrdNoResults = findViewById&lt;android.widget.GridLayout&gt;(R.id.layoutProOrdNoResults)&#10;&#10;        // --- Block for handling LSX (ProOrdNo) input and displaying results in a grid ---&#10;        edtJobNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val jobNo = edtJobNo.text.toString().trim()&#10;                if (jobNo.isNotEmpty()) {&#10;                    // Fetch production order list asynchronously&#10;                    lifecycleScope.launch {&#10;                        try {&#10;                            val responseBody = proOrdApi.getProOrd(jobNo)&#10;                            val json = responseBody.string()&#10;                            val gson = Gson()&#10;                            val jsonElement = JsonParser.parseString(json)&#10;                            val proOrdList = when {&#10;                                jsonElement.isJsonArray -&gt; jsonElement.asJsonArray.mapNotNull {&#10;                                    gson.fromJson(it, ProOrdDto::class.java).proOrdNo&#10;                                }&#10;                                jsonElement.isJsonObject -&gt; listOfNotNull(gson.fromJson(jsonElement, ProOrdDto::class.java).proOrdNo)&#10;                                else -&gt; emptyList()&#10;                            }&#10;                            // Clear previous results in the grid&#10;                            layoutProOrdNoResults.removeAllViews()&#10;                            if (proOrdList.isNotEmpty()) {&#10;                                // For each result, create a clickable TextView and add to grid&#10;                                proOrdList.forEach { proOrdNo -&gt;&#10;                                    val tv = TextView(this@MachineLogActivity)&#10;                                    tv.text = proOrdNo&#10;                                    tv.setPadding(24, 16, 24, 16)&#10;                                    tv.setBackgroundResource(android.R.drawable.dialog_holo_light_frame)&#10;                                    tv.setTextColor(resources.getColor(android.R.color.black))&#10;                                    val params = android.widget.GridLayout.LayoutParams()&#10;                                    params.setMargins(8, 8, 8, 8)&#10;                                    params.width = 0&#10;                                    params.height = android.widget.GridLayout.LayoutParams.WRAP_CONTENT&#10;                                    params.columnSpec = android.widget.GridLayout.spec(android.widget.GridLayout.UNDEFINED, 1f)&#10;                                    tv.layoutParams = params&#10;                                    // On click, copy result to LSX (ProOrdNo) input&#10;                                    tv.setOnClickListener {&#10;                                        edtProOrdNo.setText(proOrdNo)&#10;                                        // Hide keyboard after filling LSX (ProOrdNo) from JobNo output&#10;                                        val imm = getSystemService(INPUT_METHOD_SERVICE) as? InputMethodManager&#10;                                        imm?.hideSoftInputFromWindow(edtProOrdNo.windowToken, 0)&#10;                                    }&#10;                                    layoutProOrdNoResults.addView(tv)&#10;                                }&#10;                            } else {&#10;                                // Show error if no results found&#10;                                val tv = TextView(this@MachineLogActivity)&#10;                                tv.text = getString(R.string.invalid_staff)&#10;                                tv.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                                layoutProOrdNoResults.addView(tv)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            // Show error if API call fails&#10;                            layoutProOrdNoResults.removeAllViews()&#10;                            val tv = TextView(this@MachineLogActivity)&#10;                            tv.text = getString(R.string.invalid_staff)&#10;                            tv.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                            layoutProOrdNoResults.addView(tv)&#10;                        }&#10;                    }&#10;                } else {&#10;                    // Clear grid if input is empty&#10;                    layoutProOrdNoResults.removeAllViews()&#10;                }&#10;            }&#10;        }&#10;        // --- Block for handling LSX (ProOrdNo) serial info fetching ---&#10;        edtProOrdNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val proOrdNo = edtProOrdNo.text.toString().trim()&#10;                if (proOrdNo.isNotEmpty()) {&#10;                    lifecycleScope.launch {&#10;                        try {&#10;                            val serialList = serialApi.getSerial(proOrdNo)&#10;                            if (serialList.isNotEmpty()) {&#10;                                txtSerialInfo.text = serialList.joinToString(&quot;, &quot;) { it.serial ?: &quot;&quot; }&#10;                            } else {&#10;                                txtSerialInfo.text = getString(R.string.invalid_staff)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            txtSerialInfo.text = getString(R.string.invalid_staff)&#10;                        }&#10;                    }&#10;                } else {&#10;                    txtSerialInfo.text = &quot;&quot;&#10;                }&#10;            }&#10;        }&#10;        val edtSerial = findViewById&lt;EditText&gt;(R.id.edtSerial)&#10;        val btnScan = findViewById&lt;Button&gt;(R.id.btnScan)&#10;&#10;        // Map QR keys to EditText IDs (future-proof, add new keys here)&#10;        val editFields = mapOf(&#10;            &quot;staffNo&quot; to edtStaffNo,&#10;            &quot;mcName&quot; to edtMcName,&#10;            &quot;jobNo&quot; to edtJobNo,&#10;            &quot;proOrdNo&quot; to edtProOrdNo,&#10;            &quot;serial&quot; to edtSerial,&#10;            // fallback: also allow direct EditText id mapping&#10;            &quot;edtStaffNo&quot; to edtStaffNo,&#10;            &quot;edtMcName&quot; to edtMcName,&#10;            &quot;edtJobNo&quot; to edtJobNo,&#10;            &quot;edtProOrdNo&quot; to edtProOrdNo,&#10;            &quot;edtSerial&quot; to edtSerial&#10;        )&#10;&#10;        // Register ActivityResultLauncher for QR scan (must be defined before ScanHelper)&#10;        var scanHelper: ScanHelper? = null&#10;        val scanLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result -&gt;&#10;            if (result.resultCode == RESULT_OK) {&#10;                val intent = result.data&#10;                val qrText = intent?.getStringExtra(&quot;SCAN_RESULT&quot;)&#10;                    ?: intent?.getStringExtra(&quot;SCAN_RESULT_ORIGINAL&quot;)&#10;                    ?: intent?.getStringExtra(&quot;SCAN_RESULT_RAW&quot;)&#10;                if (!qrText.isNullOrEmpty()) {&#10;                    scanHelper?.handleScanResult(qrText)&#10;                }&#10;            }&#10;        }&#10;&#10;        // Setup ScanHelper (button click launches scan)&#10;        scanHelper = ScanHelper(this, scanLauncher, editFields, btnScan)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.lephucmfg&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.inputmethod.InputMethodManager&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.lifecycle.lifecycleScope&#10;import com.example.lephucmfg.network.RetrofitClient&#10;import com.google.gson.annotations.SerializedName&#10;import kotlinx.coroutines.launch&#10;import okhttp3.ResponseBody&#10;import com.google.gson.Gson&#10;import com.google.gson.JsonElement&#10;import com.google.gson.JsonParser&#10;import retrofit2.Call&#10;import retrofit2.Callback&#10;import retrofit2.Response&#10;import retrofit2.http.GET&#10;import retrofit2.http.Path&#10;&#10;class MachineLogActivity : AppCompatActivity() {&#10;    // --- API interface for fetching staff info (&quot;Thợ&quot;) ---&#10;    interface StaffApi {&#10;        @GET(&quot;/api/GetStaff/{staffNo}&quot;)&#10;        suspend fun getStaff(@Path(&quot;staffNo&quot;) staffNo: Int): StaffInfo?&#10;    }&#10;    // --- Data class for staff info ---&#10;    data class StaffInfo(&#10;        @SerializedName(&quot;fullName&quot;) val fullName: String?,&#10;        @SerializedName(&quot;workJob&quot;) val workJob: String?,&#10;        @SerializedName(&quot;workPlace&quot;) val workPlace: String?&#10;    )&#10;    // --- API interface for fetching machine info (&quot;Mã máy&quot;) ---&#10;    interface MachineApi {&#10;        @GET(&quot;/api/GetMachine/{mcName}&quot;)&#10;        suspend fun getMachine(@Path(&quot;mcName&quot;) mcName: String): MachineInfo?&#10;    }&#10;    // --- Data class for machine info ---&#10;    data class MachineInfo(&#10;        @SerializedName(&quot;model&quot;) val model: String?,&#10;        @SerializedName(&quot;status&quot;) val status: String?&#10;    )&#10;    // --- API interface for fetching production order (LSX/ProOrdNo) ---&#10;    interface ProOrdApi {&#10;        @GET(&quot;/api/Laylsx/{A}&quot;)&#10;        suspend fun getProOrd(@Path(&quot;A&quot;) jobNo: String): ResponseBody&#10;    }&#10;    // --- Data class for production order DTO ---&#10;    data class ProOrdDto(&#10;        @SerializedName(&quot;proOrdNo&quot;) val proOrdNo: String?&#10;    )&#10;    // --- API interface for fetching serial info (GetSerial) ---&#10;    interface SerialApi {&#10;        @GET(&quot;/api/GetSerial/{proOrdNo}&quot;)&#10;        suspend fun getSerial(@Path(&quot;proOrdNo&quot;) proOrdNo: String): List&lt;SerialDto&gt;&#10;    }&#10;    // --- Data class for serial info ---&#10;    data class SerialDto(&#10;        @SerializedName(&quot;serial&quot;) val serial: String?&#10;    )&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_machine_log)&#10;&#10;        // --- UI references for &quot;Thợ&quot; (Staff) block ---&#10;        val edtStaffNo = findViewById&lt;EditText&gt;(R.id.edtStaffNo)&#10;        val txtStaffInfo = findViewById&lt;TextView&gt;(R.id.txtStaffInfo)&#10;        val api = RetrofitClient.retrofitPublic.create(StaffApi::class.java)&#10;&#10;        // --- Block for handling Staff (&quot;Thợ&quot;) input and validation ---&#10;        edtStaffNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val staffNoStr = edtStaffNo.text.toString().trim()&#10;                if (staffNoStr.isNotEmpty()) {&#10;                    try {&#10;                        val staffNo = staffNoStr.toInt()&#10;                        // Fetch staff info asynchronously&#10;                        lifecycleScope.launch {&#10;                            try {&#10;                                val info = api.getStaff(staffNo)&#10;                                if (info != null) {&#10;                                    // Display staff info if found&#10;                                    txtStaffInfo.text = listOfNotNull(info.fullName, info.workJob, info.workPlace).joinToString(&quot;, &quot;)&#10;                                } else {&#10;                                    // Show error if staff not found&#10;                                    txtStaffInfo.setText(R.string.invalid_staff)&#10;                                }&#10;                            } catch (e: Exception) {&#10;                                // Show error if API call fails&#10;                                txtStaffInfo.setText(R.string.invalid_staff)&#10;                            }&#10;                        }&#10;                    } catch (e: NumberFormatException) {&#10;                        // Show error if input is not a number&#10;                        txtStaffInfo.setText(R.string.invalid_staff)&#10;                    }&#10;                } else {&#10;                    // Clear staff info if input is empty&#10;                    txtStaffInfo.text = &quot;&quot;&#10;                }&#10;            }&#10;        }&#10;        // --- UI references for &quot;Mã máy&quot; (Machine) block ---&#10;        val edtMcName = findViewById&lt;EditText&gt;(R.id.edtMcName)&#10;        val txtMachineInfo = findViewById&lt;TextView&gt;(R.id.txtMachineInfo)&#10;        // --- UI reference for serial info below LSX (ProOrdNo) ---&#10;        val edtProOrdNo = findViewById&lt;EditText&gt;(R.id.edtProOrdNo)&#10;        val txtSerialInfo = findViewById&lt;TextView&gt;(R.id.txtSerialInfo) // Add this TextView in your layout XML below edtProOrdNo&#10;        val machineApi = RetrofitClient.retrofitPublic.create(MachineApi::class.java)&#10;        val serialApi = RetrofitClient.retrofitPublic.create(SerialApi::class.java)&#10;        val proOrdApi = RetrofitClient.retrofitPublic.create(ProOrdApi::class.java)&#10;&#10;        // --- Block for handling Machine Code (&quot;Mã máy&quot;) input and validation ---&#10;        edtMcName.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val mcName = edtMcName.text.toString().trim()&#10;                if (mcName.isNotEmpty()) {&#10;                    // Launch coroutine to fetch machine info asynchronously&#10;                    lifecycleScope.launch {&#10;                        try {&#10;                            val info = machineApi.getMachine(mcName)&#10;                            if (info != null) {&#10;                                // Display machine model and status if found&#10;                                txtMachineInfo.text = listOfNotNull(info.model, info.status).joinToString(&quot;, &quot;)&#10;                            } else {&#10;                                // Show error if machine not found&#10;                                txtMachineInfo.setText(R.string.invalid_staff)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            // Show error if API call fails&#10;                            txtMachineInfo.setText(R.string.invalid_staff)&#10;                        }&#10;                    }&#10;                } else {&#10;                    // Clear machine info if input is empty&#10;                    txtMachineInfo.text = &quot;&quot;&#10;                }&#10;            }&#10;        }&#10;        // --- UI references for LSX (ProOrdNo) and result grid block ---&#10;        val edtJobNo = findViewById&lt;EditText&gt;(R.id.edtJobNo)&#10;        val layoutProOrdNoResults = findViewById&lt;android.widget.GridLayout&gt;(R.id.layoutProOrdNoResults)&#10;&#10;        // --- Block for handling LSX (ProOrdNo) input and displaying results in a grid ---&#10;        edtJobNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val jobNo = edtJobNo.text.toString().trim()&#10;                if (jobNo.isNotEmpty()) {&#10;                    // Fetch production order list asynchronously&#10;                    lifecycleScope.launch {&#10;                        try {&#10;                            val responseBody = proOrdApi.getProOrd(jobNo)&#10;                            val json = responseBody.string()&#10;                            val gson = Gson()&#10;                            val jsonElement = JsonParser.parseString(json)&#10;                            val proOrdList = when {&#10;                                jsonElement.isJsonArray -&gt; jsonElement.asJsonArray.mapNotNull {&#10;                                    gson.fromJson(it, ProOrdDto::class.java).proOrdNo&#10;                                }&#10;                                jsonElement.isJsonObject -&gt; listOfNotNull(gson.fromJson(jsonElement, ProOrdDto::class.java).proOrdNo)&#10;                                else -&gt; emptyList()&#10;                            }&#10;                            // Clear previous results in the grid&#10;                            layoutProOrdNoResults.removeAllViews()&#10;                            if (proOrdList.isNotEmpty()) {&#10;                                // For each result, create a clickable TextView and add to grid&#10;                                proOrdList.forEach { proOrdNo -&gt;&#10;                                    val tv = TextView(this@MachineLogActivity)&#10;                                    tv.text = proOrdNo&#10;                                    tv.setPadding(24, 16, 24, 16)&#10;                                    tv.setBackgroundResource(android.R.drawable.dialog_holo_light_frame)&#10;                                    tv.setTextColor(resources.getColor(android.R.color.black))&#10;                                    val params = android.widget.GridLayout.LayoutParams()&#10;                                    params.setMargins(8, 8, 8, 8)&#10;                                    params.width = 0&#10;                                    params.height = android.widget.GridLayout.LayoutParams.WRAP_CONTENT&#10;                                    params.columnSpec = android.widget.GridLayout.spec(android.widget.GridLayout.UNDEFINED, 1f)&#10;                                    tv.layoutParams = params&#10;                                    // On click, copy result to LSX (ProOrdNo) input&#10;                                    tv.setOnClickListener {&#10;                                        edtProOrdNo.setText(proOrdNo)&#10;                                        // Quick fix: focus, unfocus, then hide keyboard to trigger value output&#10;                                        edtProOrdNo.requestFocus()&#10;                                        edtProOrdNo.clearFocus()&#10;                                        val imm = getSystemService(INPUT_METHOD_SERVICE) as? InputMethodManager&#10;                                        imm?.hideSoftInputFromWindow(edtProOrdNo.windowToken, 0)&#10;                                    }&#10;                                    layoutProOrdNoResults.addView(tv)&#10;                                }&#10;                            } else {&#10;                                // Show error if no results found&#10;                                val tv = TextView(this@MachineLogActivity)&#10;                                tv.text = getString(R.string.invalid_staff)&#10;                                tv.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                                layoutProOrdNoResults.addView(tv)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            // Show error if API call fails&#10;                            layoutProOrdNoResults.removeAllViews()&#10;                            val tv = TextView(this@MachineLogActivity)&#10;                            tv.text = getString(R.string.invalid_staff)&#10;                            tv.setTextColor(resources.getColor(android.R.color.holo_red_dark))&#10;                            layoutProOrdNoResults.addView(tv)&#10;                        }&#10;                    }&#10;                } else {&#10;                    // Clear grid if input is empty&#10;                    layoutProOrdNoResults.removeAllViews()&#10;                }&#10;            }&#10;        }&#10;        // --- Block for handling LSX (ProOrdNo) serial info fetching ---&#10;        edtProOrdNo.setOnFocusChangeListener { _, hasFocus -&gt;&#10;            if (!hasFocus) {&#10;                val proOrdNo = edtProOrdNo.text.toString().trim()&#10;                if (proOrdNo.isNotEmpty()) {&#10;                    lifecycleScope.launch {&#10;                        try {&#10;                            val serialList = serialApi.getSerial(proOrdNo)&#10;                            if (serialList.isNotEmpty()) {&#10;                                txtSerialInfo.text = serialList.joinToString(&quot;, &quot;) { it.serial ?: &quot;&quot; }&#10;                            } else {&#10;                                txtSerialInfo.text = getString(R.string.invalid_staff)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            txtSerialInfo.text = getString(R.string.invalid_staff)&#10;                        }&#10;                    }&#10;                } else {&#10;                    txtSerialInfo.text = &quot;&quot;&#10;                }&#10;            }&#10;        }&#10;        val edtSerial = findViewById&lt;EditText&gt;(R.id.edtSerial)&#10;        val btnScan = findViewById&lt;Button&gt;(R.id.btnScan)&#10;&#10;        // Map QR keys to EditText IDs (future-proof, add new keys here)&#10;        val editFields = mapOf(&#10;            &quot;staffNo&quot; to edtStaffNo,&#10;            &quot;mcName&quot; to edtMcName,&#10;            &quot;jobNo&quot; to edtJobNo,&#10;            &quot;proOrdNo&quot; to edtProOrdNo,&#10;            &quot;serial&quot; to edtSerial,&#10;            // fallback: also allow direct EditText id mapping&#10;            &quot;edtStaffNo&quot; to edtStaffNo,&#10;            &quot;edtMcName&quot; to edtMcName,&#10;            &quot;edtJobNo&quot; to edtJobNo,&#10;            &quot;edtProOrdNo&quot; to edtProOrdNo,&#10;            &quot;edtSerial&quot; to edtSerial&#10;        )&#10;&#10;        // Register ActivityResultLauncher for QR scan (must be defined before ScanHelper)&#10;        var scanHelper: ScanHelper? = null&#10;        val scanLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result -&gt;&#10;            if (result.resultCode == RESULT_OK) {&#10;                val intent = result.data&#10;                val qrText = intent?.getStringExtra(&quot;SCAN_RESULT&quot;)&#10;                    ?: intent?.getStringExtra(&quot;SCAN_RESULT_ORIGINAL&quot;)&#10;                    ?: intent?.getStringExtra(&quot;SCAN_RESULT_RAW&quot;)&#10;                if (!qrText.isNullOrEmpty()) {&#10;                    scanHelper?.handleScanResult(qrText)&#10;                }&#10;            }&#10;        }&#10;&#10;        // Setup ScanHelper (button click launches scan)&#10;        scanHelper = ScanHelper(this, scanLauncher, editFields, btnScan)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/lephucmfg/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/lephucmfg/MainActivity.kt" />
              <option name="originalContent" value="package com.example.lephucmfg&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import androidx.appcompat.app.AppCompatActivity&#10;&#10;import com.example.lephucmfg.ABTestingActivity&#10;&#10;class MainActivity : AppCompatActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.frontpage)&#10;&#10;        findViewById&lt;Button&gt;(R.id.btnAbTesting).setOnClickListener {&#10;            startActivity(Intent(this, ABTestingActivity::class.java))&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.lephucmfg&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import androidx.appcompat.app.AppCompatActivity&#10;&#10;import com.example.lephucmfg.ABTestingActivity&#10;&#10;class MainActivity : AppCompatActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.frontpage)&#10;&#10;        findViewById&lt;Button&gt;(R.id.btnAbTesting).setOnClickListener {&#10;            startActivity(Intent(this, ABTestingActivity::class.java))&#10;        }&#10;        findViewById&lt;Button&gt;(R.id.btnMachineLog).setOnClickListener {&#10;            startActivity(Intent(this, MachineLogActivity::class.java))&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/lephucmfg/Scan.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/lephucmfg/Scan.kt" />
              <option name="originalContent" value="package com.example.lephucmfg&#10;&#10;import android.app.Activity&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.view.View&#10;import android.view.inputmethod.InputMethodManager&#10;import android.widget.EditText&#10;import android.widget.Toast&#10;import androidx.activity.result.ActivityResultLauncher&#10;import com.google.zxing.integration.android.IntentIntegrator&#10;&#10;/**&#10; * Helper for QR scanning and field population.&#10; * Pass the caller Activity and all EditTexts to constructor.&#10; */&#10;class ScanHelper(&#10;    private val activity: Activity,&#10;    private val scanLauncher: ActivityResultLauncher&lt;Intent&gt;,&#10;    private val editFields: Map&lt;String, EditText&gt;,&#10;    private val scanButton: View&#10;) {&#10;    // Order of fields for focus movement&#10;    private val fieldOrder = listOf(&quot;edtStaffNo&quot;, &quot;edtMcName&quot;, &quot;edtJobNo&quot;, &quot;edtProOrdNo&quot;, &quot;edtSerial&quot;)&#10;&#10;    init {&#10;        scanButton.setOnClickListener {&#10;            // If no EditText has focus, focus the first field&#10;            if (editFields.values.none { it.hasFocus() }) {&#10;                fieldOrder.mapNotNull { editFields[it] }.firstOrNull()?.requestFocus()&#10;            }&#10;            val integrator = IntentIntegrator(activity)&#10;            integrator.setOrientationLocked(false)&#10;            scanLauncher.launch(integrator.createScanIntent())&#10;        }&#10;    }&#10;&#10;    fun handleScanResult(qrText: String) {&#10;        val keyValuePairs = qrText.split('&amp;').mapNotNull {&#10;            val idx = it.indexOf('=')&#10;            if (idx &gt; 0) {&#10;                val key = it.substring(0, idx).trim()&#10;                val value = it.substring(idx + 1).trim()&#10;                if (value.isNotEmpty()) key to value else null&#10;            } else null&#10;        }.toMap()&#10;&#10;        if (keyValuePairs.isNotEmpty()) {&#10;            // Map keys to EditText IDs, last occurrence wins&#10;            for ((key, value) in keyValuePairs) {&#10;                editFields[key]?.setText(value)&#10;            }&#10;            // Move focus to next empty field&#10;            moveFocusToNextEmpty()&#10;            Toast.makeText(activity, &quot;đã nhập&quot;, Toast.LENGTH_SHORT).show()&#10;        } else {&#10;            // No key-value, treat as value for focused field&#10;            val focused = editFields.values.firstOrNull { it.hasFocus() }&#10;            if (focused != null) {&#10;                focused.setText(qrText)&#10;                moveFocusToNextEmpty()&#10;                Toast.makeText(activity, &quot;đã nhập&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun moveFocusToNextEmpty() {&#10;        for (id in fieldOrder) {&#10;            val field = editFields[id]&#10;            if (field != null &amp;&amp; field.text.isNullOrEmpty()) {&#10;                field.requestFocus()&#10;                hideKeyboard(field)&#10;                return&#10;            }&#10;        }&#10;        // All fields filled: clear focus and hide keyboard&#10;        activity.currentFocus?.clearFocus()&#10;        hideKeyboard(activity.currentFocus)&#10;    }&#10;&#10;    private fun hideKeyboard(view: View?) {&#10;        val imm = activity.getSystemService(Context.INPUT_METHOD_SERVICE) as? InputMethodManager&#10;        imm?.hideSoftInputFromWindow(view?.windowToken, 0)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.lephucmfg&#10;&#10;import android.app.Activity&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.view.View&#10;import android.view.inputmethod.InputMethodManager&#10;import android.widget.EditText&#10;import android.widget.Toast&#10;import androidx.activity.result.ActivityResultLauncher&#10;import com.google.zxing.integration.android.IntentIntegrator&#10;&#10;/**&#10; * Helper for QR scanning and field population.&#10; * Pass the caller Activity and all EditTexts to constructor.&#10; */&#10;class ScanHelper(&#10;    private val activity: Activity,&#10;    private val scanLauncher: ActivityResultLauncher&lt;Intent&gt;,&#10;    private val editFields: Map&lt;String, EditText&gt;,&#10;    private val scanButton: View&#10;) {&#10;    // Order of fields for focus movement&#10;    private val fieldOrder = listOf(&quot;edtStaffNo&quot;, &quot;edtMcName&quot;, &quot;edtJobNo&quot;, &quot;edtProOrdNo&quot;, &quot;edtSerial&quot;)&#10;&#10;    init {&#10;        scanButton.setOnClickListener {&#10;            // If no EditText has focus, focus the first field&#10;            if (editFields.values.none { it.hasFocus() }) {&#10;                fieldOrder.mapNotNull { editFields[it] }.firstOrNull()?.requestFocus()&#10;            }&#10;            val integrator = IntentIntegrator(activity)&#10;            integrator.setOrientationLocked(false)&#10;            scanLauncher.launch(integrator.createScanIntent())&#10;        }&#10;    }&#10;&#10;    fun handleScanResult(qrText: String) {&#10;        val keyValuePairs = qrText.split('&amp;').mapNotNull {&#10;            val idx = it.indexOf('=')&#10;            if (idx &gt; 0) {&#10;                val key = it.substring(0, idx).trim()&#10;                val value = it.substring(idx + 1).trim()&#10;                if (value.isNotEmpty()) key to value else null&#10;            } else null&#10;        }.toMap()&#10;&#10;        if (keyValuePairs.isNotEmpty()) {&#10;            // Map keys to EditText IDs, last occurrence wins&#10;            for ((key, value) in keyValuePairs) {&#10;                editFields[key]?.setText(value)&#10;            }&#10;            // Move focus to next empty field&#10;            moveFocusToNextEmpty()&#10;            Toast.makeText(activity, &quot;đã nhập&quot;, Toast.LENGTH_SHORT).show()&#10;        } else {&#10;            // No key-value, treat as value for focused field&#10;            val focused = editFields.values.firstOrNull { it.hasFocus() }&#10;            if (focused != null) {&#10;                focused.setText(qrText)&#10;                moveFocusToNextEmpty()&#10;                Toast.makeText(activity, &quot;đã nhập&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun moveFocusToNextEmpty() {&#10;        for (id in fieldOrder) {&#10;            val field = editFields[id]&#10;            if (field != null &amp;&amp; field.text.isNullOrEmpty()) {&#10;                field.requestFocus()&#10;                hideKeyboard(field)&#10;                return&#10;            }&#10;        }&#10;        // All fields filled: clear focus and hide keyboard&#10;        activity.currentFocus?.clearFocus()&#10;        hideKeyboard(activity.currentFocus)&#10;    }&#10;&#10;    private fun hideKeyboard(view: View?) {&#10;        val imm = activity.getSystemService(Context.INPUT_METHOD_SERVICE) as? InputMethodManager&#10;        imm?.hideSoftInputFromWindow(view?.windowToken, 0)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_machine_log.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_machine_log.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;24dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnScan&quot;&#10;                android:layout_width=&quot;159dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;Scan&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnSubmit&quot;&#10;                android:layout_width=&quot;39dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;Submit&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtStaffNo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Thợ (StaffNo)&quot;&#10;            android:layout_marginTop=&quot;0dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtStaffInfo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtMcName&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Mã máy (McName)&quot;&#10;            android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtMachineInfo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtJobNo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;CTCViec (JobNo)&quot;&#10;            android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;!-- Replacing LinearLayout with GridLayout for 3 columns per row --&gt;&#10;        &lt;GridLayout&#10;            android:id=&quot;@+id/layoutProOrdNoResults&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:columnCount=&quot;3&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:background=&quot;@android:color/white&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtProOrdNo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;LSX (ProOrdNo)&quot;&#10;            android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;!-- Serial info result for LSX (ProOrdNo) --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtSerialInfo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtSerial&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Số series&quot;&#10;            android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;24dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnScan&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;Scan&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnSubmit&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;Submit&quot;&#10;                android:layout_marginStart=&quot;8dp&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtStaffNo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Thợ (StaffNo)&quot;&#10;            android:layout_marginTop=&quot;0dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtStaffInfo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtMcName&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Mã máy (McName)&quot;&#10;            android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtMachineInfo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtJobNo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;CTCViec (JobNo)&quot;&#10;            android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;!-- Replacing LinearLayout with GridLayout for 3 columns per row --&gt;&#10;        &lt;GridLayout&#10;            android:id=&quot;@+id/layoutProOrdNoResults&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:columnCount=&quot;3&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:background=&quot;@android:color/white&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtProOrdNo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;LSX (ProOrdNo)&quot;&#10;            android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;!-- Serial info result for LSX (ProOrdNo) --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtSerialInfo&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtSerial&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Số series&quot;&#10;            android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/strings.xml" />
              <option name="originalContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;LEPHUCMFG&lt;/string&gt;&#10;    &lt;string name=&quot;scan_qr&quot;&gt;Scan QR&lt;/string&gt;&#10;    &lt;string name=&quot;result_will_show_here&quot;&gt;kết quả&lt;/string&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;LEPHUCMFG&lt;/string&gt;&#10;    &lt;string name=&quot;scan_qr&quot;&gt;Scan QR&lt;/string&gt;&#10;    &lt;string name=&quot;result_will_show_here&quot;&gt;kết quả&lt;/string&gt;&#10;    &lt;string name=&quot;invalid_staff&quot;&gt;không hợp lệ&lt;/string&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>